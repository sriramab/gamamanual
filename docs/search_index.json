[
["index.html", "GAMA 1.8 User Manual Notice", " GAMA 1.8 User Manual Srirama Bhamidipati Updated: 2018-07-15 09:43:18 (Amsterdam) Notice The content of this manual is from gama-platform.org website. I have only modified and edited very small portions of the content to give it a book format. This is a modified content and is not a 100% reproduction. If you do not find what you are looking for, go to the main website. I thank the Team of GAMA-Platform for giving me the permission to reproduce their content. Cheers ! Srirama Bhamidipati Delft, Netherlands 2018 "],
["java-version.html", "Chapter 1 Java version 1.1 Changes between 1.6.1 and 1.7/1.8 that can influence the dynamics of models", " Chapter 1 Java version Due to changes in the libraries used by GAMA 1.7 and 1.8, this version now requires JDK/JVM 1.8 to run. Please note that GAMA has not been tested with JDK 1.9 and 1.10. 1.1 Changes between 1.6.1 and 1.7/1.8 that can influence the dynamics of models Initialization order between the initialization of variables and the execution of the init block in grids init -&gt; vars in 1.6.1 / vars -&gt; init in 1.7 Initialization order of agents -&gt; now, the init block of the agents are not executed at the end of the global init, but during it. put a sample model to explain the order of creation and its differences Initialization of vars to their default value map ? list ? Systematic casting and verification of types give examples header of CSV files: be careful, in GAMA 1.7, if the first line is detected as a header, it is not read when the file is casted as a matrix (so the first row of the matrix is not the header, but the first line of data) gives examples the step of batch experiments is now executed after all repetitions of simulations are done (not after each one). They can however be still accessed using the attributes simulations (see Batch.gaml in Models Library) signal and diffuse have been merged into a single statement facets do not accept a space between their identifier and the : anymore. simplification of equation/solve statements and deprecation of old facets in FIPA skill, contentis replaced everywhere with contents in FIPA skill, receivers is replaced everywhere with to in FIPA skill, messages is replaced by mailbox The pseudo-attribute user_location has been removed (not deprecated, unfortunately) and replaced by the “unit” #user_location. The actions called by an event layer do not need anymore to define point and list&lt;agent&gt; arguments to receive the mouse location and the list of agents selected. Instead, they can now use #user_location and they have to compute the selected agents by themselves (using an arbitrary function). The random number generators now better handle seeding (larger range), but it can change the series of values previously obtained from a given seed in 1.6.1 all models now have a starting_date and a current_date. They then dont begin at an hypothetical “zero” date, but at the epoch date defined by ISO 8601 (1970/1/1). It should not change models that dont rely on dates, except that: the #year (and its nicknames #y, #years) and #month (and its nickname #month) do not longer have a default value (of resp. 30 days and 360 days). Instead, they are always evaluated against the current_date of the model. If no starting_date is defined, the values of #month and #year will then depend on the sequence of months and year since epoch day. as_time, as_system_time, as_date and as_system_date have been removed "],
["enhancements-in-1-71-8.html", "Chapter 2 Enhancements in 1.7/1.8 2.1 Simulations 2.2 Language 2.3 Data importation 2.4 Editor 2.5 Headless 2.6 Models library: 2.7 Preferences 2.8 Simulation displays 2.9 Error view 2.10 Validation 2.11 Console 2.12 Monitor view 2.13 GAMA-wide online help on the language 2.14 Serialization 2.15 Allow TCP, UDP and MQQT communications between agents in different simulations (to come)", " Chapter 2 Enhancements in 1.7/1.8 2.1 Simulations simulations can now be run in parallel withing an experiment (with their outputs, displays, etc.) batch experiments inherit from this possibility and can now run their repetitions in parallel too. concurrency between agents is now possible and can be controlled on a species/grid/ask basis (from multi-threaded concurrency to complete parallelism within a species/grid or between the targets of an ask statement) 2.2 Language gama : a new immutable agent that can be invoked to change preferences or access to platform-only properties (like machine-time) abort: a new behavior (like reflex or init) that is executed once when the agent is about to die try and catch statements now provide a robust way to catch errors happening in the simulations. super (instead of self) and invoke (instead of do) can now be used to call an action defined in a parent species. date : new data type that offers the possibility to use a real calendar, to define a starting_date and to query a current_date from a simulation, to parse dates from date files or to output them in custom formats. Dates can be added, subtracted, compared. Various new operators (minus_months, etc.) allow for a fine manipulation of their data. Time units (#sec, #s, #mn, #minute, #h, #hour, #day, etc.) can be used in conjunction with them. Interval of dates (date1 to date2) can be created and used as a basis for loops, etc. Various simple operators allow for defining conditions based on the current_date (after(date1), before(date2), since(date1), etc.). font type allows to define fonts more precisely in draw statements BDI control architecture for agents file management, new operators, new statements, new skills(?), new built-in variables, files can now download their contents from the web by using standard http: https: addresses instead of file paths. The save can now directly manipulate files and … save them. So something like save shape_file(&quot;bb.shp&quot;, my_agents collect each.shape); is possible. In addition, a new facet attributes allows to define complex attributes to be saved. assert has a simpler syntax and can be used in any behaviour to raise an error if a condition is not met. test is a new type of experiments (experiment aaa type: test ...), equivalent to a batch with an exhaustive search method, which automatically displays the status of tests found in the model. new operators (sum_of, product_of, etc.) casting of files works co-modeling (importation of micro-models that can be managed within a macro-model) populations of agents can now be easily exported to CSV files using the save statement Simple messaging skill between agents Terminal commands can now be issued from within GAMA using the console operator New status statement allows to change the text of the status. light statement in 3D display provides the possibility to custom your lights (point lights, direction lights, spot lights) Displays can now inherit from other displays (facets parent and virtual to describe abstract displays) on_change: facet for attributes/parameters allows to define a sequence of statements to run whenever the value changes. species and experiment now support the virtual boolean facet (virtual species can not be instantiated, and virtual experiments do not show up). experiment now supports the auto_run boolean facet (to run automatically when launched) 2.3 Data importation draw of complex shapes through obj file new types fo files are taken into account: geotiff and dxf viewers for common files navigator: better overview of model files and their support files, addition of plugin models 2.4 Editor doc on built-in elements, templates, shortcuts to common tasks, hyperlinks to files used improvement in time, gathering of infos/todos warnings can be removed from model files 2.5 Headless A new option -validate path/to/dir allows to run a complete validation of all the models in the directory 2.6 Models library: New models (make a list) 2.7 Preferences For performances and bug fixes in displays For charts defaults 2.8 Simulation displays OpenGL displays should be up to 3 times faster in rendering fullscreen mode for displays (ESC key) CTRL+O for overlay and CTRL+L for layers side controls cleaner OpenGL displays (less garbage, better drawing of lines, rotation helper, sticky ROI, etc.) possibility to use a new OpenGl pipeline and to define keystoning parameters (for projections) faster java2D displays (esp. on zoom) better user interaction (mouse move, hover, key listener) a whole new set of charts getting values when moving the mouse on charts possibility to declare permanent layout: + #splitted, #horizontal, #vertical, #stacked in the output section to automatically layout the display view. Outputs can now be managed from the “Views” menu. Closed outputs can be reopened. Changing simulation names is reflected in their display titles (and it can be dynamic) OpenGL displays now handle rotations of 2D and 3D shapes, combinations of textures and colours, and keystoning 2.9 Error view Much faster (up to 100x !) display of errors Contextual menu to copy the text of errors to clipboard or open the editor on it 2.10 Validation Faster validation of multi-file models (x2 approx.) Much less memory used compared to 1.6.1 (/10 approx.) No more “false positive” errors 2.11 Console Interactive console allows to directly interact with agents (experiments, simulations and any agent) and get a direct feedback on the impact of code execution using a new interpreter integrated with the console. Available in the modeling perspective (to interact with the new gama agent) as well as the simulation perspective (to interact with the current experiment agent). Console now accepts colored text output 2.12 Monitor view monitors can have colors monitors now have contextual menus depending on the value displayed (save as CSV, inspect, browse…) 2.13 GAMA-wide online help on the language A global search engine is now available in the top-right corner of the GAMA window to look for GAML idioms 2.14 Serialization Serialize simulations and replay them (to come) Serialization and deserialization of agents between simulations (to come) 2.15 Allow TCP, UDP and MQQT communications between agents in different simulations (to come) "],
["operators-by-categories.html", "Chapter 3 Operators by categories", " Chapter 3 Operators by categories 3.0.1 3D box, cone3D, cube, cylinder, dem, hexagon, pyramid, rgb_to_xyz, set_z, sphere, teapot, 3.0.2 Arithmetic operators -, /, [](operators-a-to-a.html#), *, +, abs, acos, asin, atan, atan2, ceil, cos, cos_rad, div, even, exp, fact, floor, hypot, is_finite, is_number, ln, log, mod, round, signum, sin, sin_rad, sqrt, tan, tan_rad, tanh, with_precision, 3.0.3 BDI and, eval_when, get_about, get_agent, get_agent_cause, get_belief_op, get_belief_with_name_op, get_beliefs_op, get_beliefs_with_name_op, get_current_intention_op, get_decay, get_desire_op, get_desire_with_name_op, get_desires_op, get_desires_with_name_op, get_dominance, get_familiarity, get_ideal_op, get_ideal_with_name_op, get_ideals_op, get_ideals_with_name_op, get_intensity, get_intention_op, get_intention_with_name_op, get_intentions_op, get_intentions_with_name_op, get_lifetime, get_liking, get_modality, get_obligation_op, get_obligation_with_name_op, get_obligations_op, get_obligations_with_name_op, get_plan_name, get_predicate, get_solidarity, get_strength, get_super_intention, get_trust, get_truth, get_uncertainties_op, get_uncertainties_with_name_op, get_uncertainty_op, get_uncertainty_with_name_op, has_belief_op, has_belief_with_name_op, has_desire_op, has_desire_with_name_op, has_ideal_op, has_ideal_with_name_op, has_intention_op, has_intention_with_name_op, has_obligation_op, has_obligation_with_name_op, has_uncertainty_op, has_uncertainty_with_name_op, new_emotion, new_mental_state, new_predicate, new_social_link, or, set_about, set_agent, set_agent_cause, set_decay, set_dominance, set_familiarity, set_intensity, set_lifetime, set_liking, set_modality, set_predicate, set_solidarity, set_strength, set_trust, set_truth, with_lifetime, with_values, 3.0.4 Casting operators as, as_int, as_matrix, font, is, is_skill, list_with, matrix_with, species, to_gaml, topology, 3.0.5 Color-related operators -, /, *, +, blend, brewer_colors, brewer_palettes, grayscale, hsb, mean, median, rgb, rnd_color, sum, 3.0.6 Comparison operators !=, &lt;, &lt;=, =, &gt;, &gt;=, between, 3.0.7 Containers-related operators -, ::, +, accumulate, among, at, collect, contains, contains_all, contains_any, count, distinct, empty, every, first, first_with, get, group_by, in, index_by, inter, interleave, internal_at, internal_integrated_value, last, last_with, length, max, max_of, mean, mean_of, median, min, min_of, mul, one_of, product_of, range, reverse, shuffle, sort_by, split, split_in, split_using, sum, sum_of, union, variance_of, where, with_max_of, with_min_of, 3.0.8 Date-related operators -, !=, +, &lt;, &lt;=, =, &gt;, &gt;=, after, before, between, every, milliseconds_between, minus_days, minus_hours, minus_minutes, minus_months, minus_ms, minus_weeks, minus_years, months_between, plus_days, plus_hours, plus_minutes, plus_months, plus_ms, plus_weeks, plus_years, since, to, until, years_between, 3.0.9 Dates 3.0.10 DescriptiveStatistics auto_correlation, correlation, covariance, durbin_watson, kurtosis, moment, quantile, quantile_inverse, rank_interpolated, rms, skew, variance, 3.0.11 Displays horizontal, stack, vertical, 3.0.12 Distributions binomial_coeff, binomial_complemented, binomial_sum, chi_square, chi_square_complemented, gamma_distribution, gamma_distribution_complemented, normal_area, normal_density, normal_inverse, pValue_for_fStat, pValue_for_tStat, student_area, student_t_inverse, 3.0.13 Driving operators as_driving_graph, 3.0.14 edge edge_between, strahler, 3.0.15 EDP-related operators diff, diff2, internal_zero_order_equation, 3.0.16 Files-related operators crs, evaluate_sub_model, file, file_exists, folder, get, load_sub_model, new_folder, osm_file, read, step_sub_model, writable, 3.0.17 FIPA-related operators conversation, message, 3.0.18 GamaMetaType type_of, 3.0.19 GammaFunction beta, gamma, incomplete_beta, incomplete_gamma, incomplete_gamma_complement, log_gamma, 3.0.20 Graphs-related operators add_edge, add_node, adjacency, agent_from_geometry, all_pairs_shortest_path, alpha_index, as_distance_graph, as_edge_graph, as_intersection_graph, as_path, beta_index, betweenness_centrality, biggest_cliques_of, connected_components_of, connectivity_index, contains_edge, contains_vertex, degree_of, directed, edge, edge_between, edge_betweenness, edges, gamma_index, generate_barabasi_albert, generate_complete_graph, generate_watts_strogatz, grid_cells_to_graph, in_degree_of, in_edges_of, layout, load_graph_from_file, load_shortest_paths, main_connected_component, max_flow_between, maximal_cliques_of, nb_cycles, neighbors_of, node, nodes, out_degree_of, out_edges_of, path_between, paths_between, predecessors_of, remove_node_from, rewire_n, source_of, spatial_graph, strahler, successors_of, sum, target_of, undirected, use_cache, weight_of, with_optimizer_type, with_weights, 3.0.21 Grid-related operators as_4_grid, as_grid, as_hexagonal_grid, grid_at, path_between, 3.0.22 Iterator operators accumulate, as_map, collect, count, create_map, distribution_of, distribution_of, distribution_of, distribution2d_of, distribution2d_of, distribution2d_of, first_with, frequency_of, group_by, index_by, last_with, max_of, mean_of, min_of, product_of, sort_by, sum_of, variance_of, where, with_max_of, with_min_of, 3.0.23 List-related operators copy_between, index_of, last_index_of, 3.0.24 Logical operators :, !, ?, and, or, xor, 3.0.25 Map comparaison operators fuzzy_kappa, fuzzy_kappa_sim, kappa, kappa_sim, percent_absolute_deviation, 3.0.26 Map-related operators as_map, create_map, index_of, last_index_of, 3.0.27 Material material, 3.0.28 Matrix-related operators -, /, ., *, +, append_horizontally, append_vertically, column_at, columns_list, determinant, eigenvalues, index_of, inverse, last_index_of, row_at, rows_list, shuffle, trace, transpose, 3.0.29 multicriteria operators electre_DM, evidence_theory_DM, fuzzy_choquet_DM, promethee_DM, weighted_means_DM, 3.0.30 Path-related operators agent_from_geometry, all_pairs_shortest_path, as_path, load_shortest_paths, max_flow_between, path_between, path_to, paths_between, use_cache, 3.0.31 Points-related operators -, /, *, +, &lt;, &lt;=, &gt;, &gt;=, add_point, angle_between, any_location_in, centroid, closest_points_with, farthest_point_to, grid_at, norm, point, points_along, points_at, points_on, 3.0.32 Random operators binomial, flip, gauss, improved_generator, open_simplex_generator, poisson, rnd, rnd_choice, sample, shuffle, simplex_generator, skew_gauss, truncated_gauss, 3.0.33 ReverseOperators saveSimulation, serialize, serializeAgent, unSerializeSimulation, unSerializeSimulationFromFile, 3.0.34 Shape arc, box, circle, cone, cone3D, cross, cube, curve, cylinder, ellipse, envelope, geometry_collection, hexagon, line, link, plan, polygon, polyhedron, pyramid, rectangle, sphere, square, squircle, teapot, triangle, 3.0.35 Spatial operators -, *, +, add_point, agent_closest_to, agent_farthest_to, agents_at_distance, agents_inside, agents_overlapping, angle_between, any_location_in, arc, around, as_4_grid, as_grid, as_hexagonal_grid, at_distance, at_location, box, centroid, circle, clean, clean_network, closest_points_with, closest_to, cone, cone3D, convex_hull, covers, cross, crosses, crs, CRS_transform, cube, curve, cylinder, dem, direction_between, disjoint_from, distance_between, distance_to, ellipse, envelope, farthest_point_to, farthest_to, geometry_collection, gini, hexagon, hierarchical_clustering, IDW, inside, inter, intersects, line, link, masked_by, moran, neighbors_at, neighbors_of, overlapping, overlaps, partially_overlaps, path_between, path_to, plan, points_along, points_at, points_on, polygon, polyhedron, pyramid, rectangle, rgb_to_xyz, rotated_by, round, scaled_to, set_z, simple_clustering_by_distance, simplification, skeletonize, smooth, sphere, split_at, split_geometry, split_lines, square, squircle, teapot, to_GAMA_CRS, to_rectangles, to_squares, to_sub_geometries, touches, towards, transformed_by, translated_by, triangle, triangulate, union, using, voronoi, with_precision, without_holes, 3.0.36 Spatial properties operators covers, crosses, intersects, partially_overlaps, touches, 3.0.37 Spatial queries operators agent_closest_to, agent_farthest_to, agents_at_distance, agents_inside, agents_overlapping, at_distance, closest_to, farthest_to, inside, neighbors_at, neighbors_of, overlapping, 3.0.38 Spatial relations operators direction_between, distance_between, distance_to, path_between, path_to, towards, 3.0.39 Spatial statistical operators hierarchical_clustering, simple_clustering_by_distance, 3.0.40 Spatial transformations operators -, *, +, as_4_grid, as_grid, as_hexagonal_grid, at_location, clean, clean_network, convex_hull, CRS_transform, rotated_by, scaled_to, simplification, skeletonize, smooth, split_geometry, split_lines, to_GAMA_CRS, to_rectangles, to_squares, to_sub_geometries, transformed_by, translated_by, triangulate, voronoi, with_precision, without_holes, 3.0.41 Species-related operators index_of, last_index_of, of_generic_species, of_species, 3.0.42 Statistical operators build, corR, dbscan, distribution_of, distribution2d_of, dtw, frequency_of, gamma_rnd, geometric_mean, gini, harmonic_mean, hierarchical_clustering, kmeans, kurtosis, max, mean, mean_deviation, meanR, median, min, moran, mul, predict, simple_clustering_by_distance, skewness, split, split_in, split_using, standard_deviation, sum, variance, 3.0.43 Strings-related operators +, &lt;, &lt;=, &gt;, &gt;=, at, char, contains, contains_all, contains_any, copy_between, date, empty, first, in, indented_by, index_of, is_number, last, last_index_of, length, lower_case, replace, replace_regex, reverse, sample, shuffle, split_with, string, upper_case, 3.0.44 System ., command, copy, dead, eval_gaml, every, is_error, is_warning, user_input, 3.0.45 Time-related operators date, string, 3.0.46 Types-related operators 3.0.47 User control operators user_input, "],
["operators-a-to-a.html", "Chapter 4 Operators (A to A) 4.1 Definition 4.2 Priority between operators 4.3 Using actions as operators 4.4 Operators", " Chapter 4 Operators (A to A) This file is automatically generated from java files. Do Not Edit It. 4.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 4.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 4.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 4.4 Operators 4.4.1 - 4.4.1.1 Possible use: - (float) —&gt; float - (int) —&gt; int - (point) —&gt; point float - matrix —&gt; matrix - (float , matrix) —&gt; matrix float - int —&gt; float - (float , int) —&gt; float matrix - int —&gt; matrix - (matrix , int) —&gt; matrix int - float —&gt; float - (int , float) —&gt; float int - int —&gt; int - (int , int) —&gt; int container - container —&gt; list - (container , container) —&gt; list matrix - matrix —&gt; matrix - (matrix , matrix) —&gt; matrix date - int —&gt; date - (date , int) —&gt; date point - point —&gt; point - (point , point) —&gt; point geometry - geometry —&gt; geometry - (geometry , geometry) —&gt; geometry rgb - int —&gt; rgb - (rgb , int) —&gt; rgb geometry - float —&gt; geometry - (geometry , float) —&gt; geometry point - int —&gt; point - (point , int) —&gt; point list - unknown —&gt; list - (list , unknown) —&gt; list map - map —&gt; map - (map , map) —&gt; map date - date —&gt; float - (date , date) —&gt; float species - agent —&gt; list - (species , agent) —&gt; list rgb - rgb —&gt; rgb - (rgb , rgb) —&gt; rgb date - float —&gt; date - (date , float) —&gt; date point - float —&gt; point - (point , float) —&gt; point float - float —&gt; float - (float , float) —&gt; float geometry - container&lt;geometry&gt; —&gt; geometry - (geometry , container&lt;geometry&gt;) —&gt; geometry matrix - float —&gt; matrix - (matrix , float) —&gt; matrix map - pair —&gt; map - (map , pair) —&gt; map int - matrix —&gt; matrix - (int , matrix) —&gt; matrix 4.4.1.2 Result: If it is used as an unary operator, it returns the opposite of the operand. Returns the difference of the two operands. 4.4.1.3 Comment: The behavior of the operator depends on the type of the operands. 4.4.1.4 Special cases: if both operands are containers and the right operand is empty, - returns the left operand if the left operand is a species and the right operand is an agent of the species, - returns a list containing all the agents of the species minus this agent if both operands are numbers, performs a normal arithmetic difference and returns a float if one of them is a float. int var10 &lt;- 1 - 1; // var10 equals 0 if both operands are containers, returns a new list in which all the elements of the right operand have been removed from the left one list&lt;int&gt; var11 &lt;- [1,2,3,4,5,6] - [2,4,9]; // var11 equals [1,3,5,6] list&lt;int&gt; var12 &lt;- [1,2,3,4,5,6] - [0,8]; // var12 equals [1,2,3,4,5,6] if one of the operands is a date and the other a number, returns a date corresponding to the date minus the given number as duration (in seconds) date var13 &lt;- date(&#39;2000-01-01&#39;) - 86400; // var13 equals date(&#39;1999-12-31&#39;) if both operands are points, returns their difference (coordinates per coordinates). point var14 &lt;- {1, 2} - {4, 5}; // var14 equals {-3.0, -3.0} if both operands are a point, a geometry or an agent, returns the geometry resulting from the difference between both geometries geometry var15 &lt;- geom1 - geom2; // var15 equals a geometry corresponding to difference between geom1 and geom2 if one operand is a color and the other an integer, returns a new color resulting from the subtraction of each component of the color with the right operand rgb var16 &lt;- rgb([255, 128, 32]) - 3; // var16 equals rgb([252,125,29]) if the left-hand operand is a geometry and the right-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) reduced by the right-hand operand distance geometry var17 &lt;- shape - 5; // var17 equals a geometry corresponding to the geometry of the agent applying the operator reduced by a distance of 5 if the left operand is a list and the right operand is an object of any type (except list), - returns a list containing the elements of the left operand minus all the occurrences of this object list&lt;int&gt; var18 &lt;- [1,2,3,4,5,6] - 2; // var18 equals [1,3,4,5,6] list&lt;int&gt; var19 &lt;- [1,2,3,4,5,6] - 0; // var19 equals [1,2,3,4,5,6] if both operands are dates, returns the duration in seconds between date2 and date1. To obtain a more precise duration, in milliseconds, use milliseconds_between(date1, date2) float var20 &lt;- date(&#39;2000-01-02&#39;) - date(&#39;2000-01-01&#39;); // var20 equals 86400 if both operands are colors, returns a new color resulting from the subtraction of the two operands, component by component rgb var21 &lt;- rgb([255, 128, 32]) - rgb(&#39;red&#39;); // var21 equals rgb([0,128,32]) if left-hand operand is a point and the right-hand a number, returns a new point with each coordinate as the difference of the operand coordinate with this number. point var22 &lt;- {1, 2} - 4.5; // var22 equals {-3.5, -2.5, -4.5} point var23 &lt;- {1, 2} - 4; // var23 equals {-3.0,-2.0,-4.0} if the right-operand is a list of points, geometries or agents, returns the geometry resulting from the difference between the left-geometry and all of the right-geometries geometry var24 &lt;- rectangle(10,10) - [circle(2), square(2)]; // var24 equals rectangle(10,10) - (circle(2) + square(2)) if one operand is a matrix and the other a number (float or int), performs a normal arithmetic difference of the number with each element of the matrix (results are float if the number is a float. matrix var25 &lt;- 3.5 - matrix([[2,5],[3,4]]); // var25 equals matrix([[1.5,-1.5],[0.5,-0.5]]) 4.4.1.5 Examples: float var0 &lt;- 1.0 - 1; // var0 equals 0.0 float var1 &lt;- 3.7 - 1.2; // var1 equals 2.5 float var2 &lt;- 3 - 1.2; // var2 equals 1.8 int var3 &lt;- - (-56); // var3 equals 56 map var4 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] - [&#39;b&#39;::2]; // var4 equals [&#39;a&#39;::1] map var5 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] - [&#39;b&#39;::2,&#39;c&#39;::3]; // var5 equals [&#39;a&#39;::1] point var6 &lt;- -{3.0,5.0}; // var6 equals {-3.0,-5.0} point var7 &lt;- -{1.0,6.0,7.0}; // var7 equals {-1.0,-6.0,-7.0} map var8 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] - (&#39;b&#39;::2); // var8 equals [&#39;a&#39;::1] map var9 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] - (&#39;c&#39;::3); // var9 equals [&#39;a&#39;::1,&#39;b&#39;::2] 4.4.1.6 See also: +, *, /, -, milliseconds_between, 4.4.2 : 4.4.2.1 Possible use: unknown : unknown —&gt; unknown : (unknown , unknown) —&gt; unknown 4.4.2.2 See also: ?, 4.4.3 :: 4.4.3.1 Possible use: any expression :: any expression —&gt; pair :: (any expression , any expression) —&gt; pair 4.4.3.2 Result: produces a new pair combining the left and the right operands 4.4.3.3 Special cases: nil is not acceptable as a key (although it is as a value). If such a case happens, :: will throw an appropriate error 4.4.4 ! 4.4.4.1 Possible use: ! (bool) —&gt; bool 4.4.4.2 Result: opposite boolean value. 4.4.4.3 Special cases: if the parameter is not boolean, it is casted to a boolean value. 4.4.4.4 Examples: bool var0 &lt;- ! (true); // var0 equals false 4.4.4.5 See also: bool, and, or, 4.4.5 != 4.4.5.1 Possible use: unknown != unknown —&gt; bool != (unknown , unknown) —&gt; bool int != float —&gt; bool != (int , float) —&gt; bool date != date —&gt; bool != (date , date) —&gt; bool float != int —&gt; bool != (float , int) —&gt; bool float != float —&gt; bool != (float , float) —&gt; bool 4.4.5.2 Result: true if both operands are different, false otherwise 4.4.5.3 Examples: bool var0 &lt;- [2,3] != [2,3]; // var0 equals false bool var1 &lt;- [2,4] != [2,3]; // var1 equals true bool var2 &lt;- 3 != 3.0; // var2 equals false bool var3 &lt;- 4 != 4.7; // var3 equals true bool var4 &lt;- #now != #now minus_hours 1; // var4 equals true bool var5 &lt;- 3.0 != 3; // var5 equals false bool var6 &lt;- 4.7 != 4; // var6 equals true bool var7 &lt;- 3.0 != 3.0; // var7 equals false bool var8 &lt;- 4.0 != 4.7; // var8 equals true 4.4.5.4 See also: =, &gt;, &lt;, &gt;=, &lt;=, 4.4.6 ? 4.4.6.1 Possible use: bool ? any expression —&gt; unknown ? (bool , any expression) —&gt; unknown 4.4.6.2 Result: It is used in combination with the : operator: if the left-hand operand evaluates to true, returns the value of the left-hand operand of the :, otherwise that of the right-hand operand of the : 4.4.6.3 Comment: These functional tests can be combined together. 4.4.6.4 Examples: list&lt;string&gt; var0 &lt;- [10, 19, 43, 12, 7, 22] collect ((each &gt; 20) ? &#39;above&#39; : &#39;below&#39;); // var0 equals [&#39;below&#39;, &#39;below&#39;, &#39;above&#39;, &#39;below&#39;, &#39;below&#39;, &#39;above&#39;]rgb col &lt;- (flip(0.3) ? #red : (flip(0.9) ? #blue : #green)); 4.4.6.5 See also: :, 4.4.7 / 4.4.7.1 Possible use: point / float —&gt; point / (point , float) —&gt; point float / float —&gt; float / (float , float) —&gt; float int / int —&gt; float / (int , int) —&gt; float rgb / float —&gt; rgb / (rgb , float) —&gt; rgb float / int —&gt; float / (float , int) —&gt; float rgb / int —&gt; rgb / (rgb , int) —&gt; rgb matrix / int —&gt; matrix / (matrix , int) —&gt; matrix point / int —&gt; point / (point , int) —&gt; point matrix / float —&gt; matrix / (matrix , float) —&gt; matrix matrix / matrix —&gt; matrix / (matrix , matrix) —&gt; matrix int / float —&gt; float / (int , float) —&gt; float 4.4.7.2 Result: Returns the division of the two operands. 4.4.7.3 Special cases: if the right-hand operand is equal to zero, raises a “Division by zero” exception if the left operand is a point, returns a new point with coordinates divided by the right operand point var0 &lt;- {5, 7.5} / 2.5; // var0 equals {2, 3} point var1 &lt;- {2,5} / 4; // var1 equals {0.5,1.25} if both operands are numbers (float or int), performs a normal arithmetic division and returns a float. float var2 &lt;- 3 / 5.0; // var2 equals 0.6 if one operand is a color and the other a double, returns a new color resulting from the division of each component of the color by the right operand. The result on each component is then truncated. rgb var3 &lt;- rgb([255, 128, 32]) / 2.5; // var3 equals rgb([102,51,13]) if one operand is a color and the other an integer, returns a new color resulting from the division of each component of the color by the right operand rgb var4 &lt;- rgb([255, 128, 32]) / 2; // var4 equals rgb([127,64,16]) 4.4.7.4 See also: *, +, -, 4.4.8 . 4.4.8.1 Possible use: agent . any expression —&gt; unknown . (agent , any expression) —&gt; unknown matrix . matrix —&gt; matrix . (matrix , matrix) —&gt; matrix 4.4.8.2 Result: It has two different uses: it can be the dot product between 2 matrices or return an evaluation of the expression (right-hand operand) in the scope the given agent. 4.4.8.3 Special cases: if the agent is nil or dead, throws an exception if the left operand is an agent, it evaluates of the expression (right-hand operand) in the scope the given agent unknown var0 &lt;- agent1.location; // var0 equals the location of the agent agent1 if both operands are matrix, returns the dot product of them matrix var1 &lt;- matrix([[1,1],[1,2]]) . matrix([[1,1],[1,2]]); // var1 equals matrix([[2,3],[3,5]]) 4.4.9 ^ 4.4.9.1 Possible use: float ^ int —&gt; float ^ (float , int) —&gt; float float ^ float —&gt; float ^ (float , float) —&gt; float int ^ int —&gt; float ^ (int , int) —&gt; float int ^ float —&gt; float ^ (int , float) —&gt; float 4.4.9.2 Result: Returns the value (always a float) of the left operand raised to the power of the right operand. 4.4.9.3 Special cases: if the right-hand operand is equal to 0, returns 1 if it is equal to 1, returns the left-hand operand. Various examples of power float var1 &lt;- 2 ^ 3; // var1 equals 8.0 4.4.9.4 Examples: float var0 &lt;- 4.84 ^ 0.5; // var0 equals 2.2 4.4.9.5 See also: *, sqrt, 4.4.10 @ Same signification as at 4.4.11 * 4.4.11.1 Possible use: float * float —&gt; float * (float , float) —&gt; float int * matrix —&gt; matrix * (int , matrix) —&gt; matrix int * int —&gt; int * (int , int) —&gt; int point * float —&gt; point * (point , float) —&gt; point rgb * int —&gt; rgb * (rgb , int) —&gt; rgb int * float —&gt; float * (int , float) —&gt; float geometry * float —&gt; geometry * (geometry , float) —&gt; geometry geometry * point —&gt; geometry * (geometry , point) —&gt; geometry matrix * float —&gt; matrix * (matrix , float) —&gt; matrix matrix * matrix —&gt; matrix * (matrix , matrix) —&gt; matrix float * matrix —&gt; matrix * (float , matrix) —&gt; matrix matrix * int —&gt; matrix * (matrix , int) —&gt; matrix float * int —&gt; float * (float , int) —&gt; float point * int —&gt; point * (point , int) —&gt; point point * point —&gt; float * (point , point) —&gt; float 4.4.11.2 Result: Returns the product of the two operands. 4.4.11.3 Special cases: if one operand is a matrix and the other a number (float or int), performs a normal arithmetic product of the number with each element of the matrix (results are float if the number is a float. matrix&lt;float&gt; m &lt;- (3.5 * matrix([[2,5],[3,4]])); //m equals matrix([[7.0,17.5],[10.5,14]]) if both operands are numbers (float or int), performs a normal arithmetic product and returns a float if one of them is a float. int var2 &lt;- 1 * 1; // var2 equals 1 if one operand is a color and the other an integer, returns a new color resulting from the product of each component of the color with the right operand (with a maximum value at 255) rgb var3 &lt;- rgb([255, 128, 32]) * 2; // var3 equals rgb([255,255,64]) if the left-hand operand is a geometry and the right-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) scaled by the right-hand operand coefficient geometry var4 &lt;- circle(10) * 2; // var4 equals circle(20) geometry var5 &lt;- (circle(10) * 2).location with_precision 9; // var5 equals (circle(20)).location with_precision 9 float var6 &lt;- (circle(10) * 2).height with_precision 9; // var6 equals (circle(20)).height with_precision 9 if the left-hand operand is a geometry and the right-hand operand a point, returns a geometry corresponding to the left-hand operand (geometry, agent, point) scaled by the right-hand operand coefficients in the 3 dimensions geometry var7 &lt;- shape * {0.5,0.5,2}; // var7 equals a geometry corresponding to the geometry of the agent applying the operator scaled by a coefficient of 0.5 in x, 0.5 in y and 2 in z if the left-hand operator is a point and the right-hand a number, returns a point with coordinates multiplied by the number point var8 &lt;- {2,5} * 4; // var8 equals {8.0, 20.0} point var9 &lt;- {2, 4} * 2.5; // var9 equals {5.0, 10.0} if both operands are points, returns their scalar product float var10 &lt;- {2,5} * {4.5, 5}; // var10 equals 34.0 4.4.11.4 Examples: float var0 &lt;- 2.5 * 2; // var0 equals 5.0 4.4.11.5 See also: /, +, -, 4.4.12 + 4.4.12.1 Possible use: point + point —&gt; point + (point , point) —&gt; point int + matrix —&gt; matrix + (int , matrix) —&gt; matrix date + int —&gt; date + (date , int) —&gt; date float + int —&gt; float + (float , int) —&gt; float matrix + int —&gt; matrix + (matrix , int) —&gt; matrix matrix + matrix —&gt; matrix + (matrix , matrix) —&gt; matrix float + float —&gt; float + (float , float) —&gt; float rgb + rgb —&gt; rgb + (rgb , rgb) —&gt; rgb int + int —&gt; int + (int , int) —&gt; int string + unknown —&gt; string + (string , unknown) —&gt; string map + pair —&gt; map + (map , pair) —&gt; map container + unknown —&gt; list + (container , unknown) —&gt; list point + float —&gt; point + (point , float) —&gt; point matrix + float —&gt; matrix + (matrix , float) —&gt; matrix geometry + float —&gt; geometry + (geometry , float) —&gt; geometry geometry + geometry —&gt; geometry + (geometry , geometry) —&gt; geometry string + string —&gt; string + (string , string) —&gt; string container + container —&gt; container + (container , container) —&gt; container map + map —&gt; map + (map , map) —&gt; map point + int —&gt; point + (point , int) —&gt; point date + float —&gt; date + (date , float) —&gt; date float + matrix —&gt; matrix + (float , matrix) —&gt; matrix rgb + int —&gt; rgb + (rgb , int) —&gt; rgb date + string —&gt; string + (date , string) —&gt; string int + float —&gt; float + (int , float) —&gt; float + (geometry, float, int) —&gt; geometry + (geometry, float, int, int) —&gt; geometry 4.4.12.2 Result: Returns the sum, union or concatenation of the two operands. 4.4.12.3 Special cases: if one of the operands is nil, + throws an error if both operands are species, returns a special type of list called meta-population if both operands are points, returns their sum. point var6 &lt;- {1, 2} + {4, 5}; // var6 equals {5.0, 7.0} if the left-hand operand is a geometry and the right-hand operands a float and an integer, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the first right-hand operand (distance), using a number of segments equal to the second right-hand operand geometry var7 &lt;- circle(5) + (5,32); // var7 equals circle(10) if one operand is a matrix and the other a number (float or int), performs a normal arithmetic sum of the number with each element of the matrix (results are float if the number is a float. matrix var8 &lt;- 3.5 + matrix([[2,5],[3,4]]); // var8 equals matrix([[5.5,8.5],[6.5,7.5]]) if one of the operands is a date and the other a number, returns a date corresponding to the date plus the given number as duration (in seconds) date var9 &lt;- date(&#39;2000-01-01&#39;) + 86400; // var9 equals date(&#39;2000-01-02&#39;) if both operands are colors, returns a new color resulting from the sum of the two operands, component by component rgb var10 &lt;- rgb([255, 128, 32]) + rgb(&#39;red&#39;); // var10 equals rgb([255,128,32]) if both operands are numbers (float or int), performs a normal arithmetic sum and returns a float if one of them is a float. int var11 &lt;- 1 + 1; // var11 equals 2 if the left-hand operand is a string, returns the concatenation of the two operands (the left-hand one beind casted into a string) string var12 &lt;- &quot;hello &quot; + 12; // var12 equals &quot;hello 12&quot; if the left-hand operand is a geometry and the right-hand operands a float, an integer and one of #round, #square or #flat, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the first right-hand operand (distance), using a number of segments equal to the second right-hand operand and a flat, square or round end cap style geometry var13 &lt;- circle(5) + (5,32,#round); // var13 equals circle(10) if the right operand is an object of any type (except a container), + returns a list of the elements of the left operand, to which this object has been added list&lt;int&gt; var14 &lt;- [1,2,3,4,5,6] + 2; // var14 equals [1,2,3,4,5,6,2] list&lt;int&gt; var15 &lt;- [1,2,3,4,5,6] + 0; // var15 equals [1,2,3,4,5,6,0] if the left-hand operand is a point and the right-hand a number, returns a new point with each coordinate as the sum of the operand coordinate with this number. point var16 &lt;- {1, 2} + 4; // var16 equals {5.0, 6.0,4.0} point var17 &lt;- {1, 2} + 4.5; // var17 equals {5.5, 6.5,4.5} if the left-hand operand is a geometry and the right-hand operand a float, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the right-hand operand distance. The number of segments used by default is 8 and the end cap style is #round geometry var18 &lt;- circle(5) + 5; // var18 equals circle(10) if the right-operand is a point, a geometry or an agent, returns the geometry resulting from the union between both geometries geometry var19 &lt;- geom1 + geom2; // var19 equals a geometry corresponding to union between geom1 and geom2 if both operands are list, +returns the concatenation of both lists. list&lt;int&gt; var20 &lt;- [1,2,3,4,5,6] + [2,4,9]; // var20 equals [1,2,3,4,5,6,2,4,9] list&lt;int&gt; var21 &lt;- [1,2,3,4,5,6] + [0,8]; // var21 equals [1,2,3,4,5,6,0,8] if one operand is a color and the other an integer, returns a new color resulting from the sum of each component of the color with the right operand rgb var22 &lt;- rgb([255, 128, 32]) + 3; // var22 equals rgb([255,131,35]) 4.4.12.4 Examples: float var0 &lt;- 1.0 + 1; // var0 equals 2.0 float var1 &lt;- 1.0 + 2.5; // var1 equals 3.5 map var2 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] + (&#39;c&#39;::3); // var2 equals [&#39;a&#39;::1,&#39;b&#39;::2,&#39;c&#39;::3] map var3 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] + (&#39;c&#39;::3); // var3 equals [&#39;a&#39;::1,&#39;b&#39;::2,&#39;c&#39;::3] map var4 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] + [&#39;c&#39;::3]; // var4 equals [&#39;a&#39;::1,&#39;b&#39;::2,&#39;c&#39;::3] map var5 &lt;- [&#39;a&#39;::1,&#39;b&#39;::2] + [5::3.0]; // var5 equals [&#39;a&#39;::1,&#39;b&#39;::2,5::3.0] 4.4.12.5 See also: -, *, /, 4.4.13 &lt; 4.4.13.1 Possible use: string &lt; string —&gt; bool &lt; (string , string) —&gt; bool int &lt; int —&gt; bool &lt; (int , int) —&gt; bool float &lt; float —&gt; bool &lt; (float , float) —&gt; bool float &lt; int —&gt; bool &lt; (float , int) —&gt; bool date &lt; date —&gt; bool &lt; (date , date) —&gt; bool point &lt; point —&gt; bool &lt; (point , point) —&gt; bool int &lt; float —&gt; bool &lt; (int , float) —&gt; bool 4.4.13.2 Result: true if the left-hand operand is less than the right-hand operand, false otherwise. 4.4.13.3 Special cases: if one of the operands is nil, returns false if both operands are String, uses a lexicographic comparison of two strings bool var0 &lt;- &#39;abc&#39; &lt; &#39;aeb&#39;; // var0 equals true if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. bool var1 &lt;- {5,7} &lt; {4,6}; // var1 equals false bool var2 &lt;- {5,7} &lt; {4,8}; // var2 equals false 4.4.13.4 Examples: bool var3 &lt;- 3 &lt; 7; // var3 equals true bool var4 &lt;- 3.5 &lt; 7.6; // var4 equals true bool var5 &lt;- 3.5 &lt; 7; // var5 equals true bool var6 &lt;- #now &lt; #now minus_hours 1; // var6 equals false bool var7 &lt;- 3 &lt; 2.5; // var7 equals false 4.4.13.5 See also: &gt;, &gt;=, &lt;=, =, !=, 4.4.14 &lt;= 4.4.14.1 Possible use: string &lt;= string —&gt; bool &lt;= (string , string) —&gt; bool float &lt;= float —&gt; bool &lt;= (float , float) —&gt; bool float &lt;= int —&gt; bool &lt;= (float , int) —&gt; bool int &lt;= int —&gt; bool &lt;= (int , int) —&gt; bool int &lt;= float —&gt; bool &lt;= (int , float) —&gt; bool date &lt;= date —&gt; bool &lt;= (date , date) —&gt; bool point &lt;= point —&gt; bool &lt;= (point , point) —&gt; bool 4.4.14.2 Result: true if the left-hand operand is less or equal than the right-hand operand, false otherwise. 4.4.14.3 Special cases: if one of the operands is nil, returns false if both operands are String, uses a lexicographic comparison of two strings bool var5 &lt;- &#39;abc&#39; &lt;= &#39;aeb&#39;; // var5 equals true if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. bool var6 &lt;- {5,7} &lt;= {4,6}; // var6 equals false bool var7 &lt;- {5,7} &lt;= {4,8}; // var7 equals false 4.4.14.4 Examples: bool var0 &lt;- 3.5 &lt;= 3.5; // var0 equals true bool var1 &lt;- 7.0 &lt;= 7; // var1 equals true bool var2 &lt;- 3 &lt;= 7; // var2 equals true bool var3 &lt;- 3 &lt;= 2.5; // var3 equals false bool var4 &lt;- #now &lt;= #now minus_hours 1; // var4 equals false 4.4.14.5 See also: &gt;, &lt;, &gt;=, =, !=, 4.4.15 &lt;&gt; Same signification as != 4.4.16 = 4.4.16.1 Possible use: float = int —&gt; bool = (float , int) —&gt; bool unknown = unknown —&gt; bool = (unknown , unknown) —&gt; bool int = int —&gt; bool = (int , int) —&gt; bool float = float —&gt; bool = (float , float) —&gt; bool int = float —&gt; bool = (int , float) —&gt; bool date = date —&gt; bool = (date , date) —&gt; bool 4.4.16.2 Result: returns true if both operands are equal, false otherwise returns true if both operands are equal, false otherwise 4.4.16.3 Special cases: if both operands are any kind of objects, returns true if they are identical (i.e., the same object) or equal (comparisons between nil values are permitted) bool var0 &lt;- [2,3] = [2,3]; // var0 equals true 4.4.16.4 Examples: bool var1 &lt;- 4.7 = 4; // var1 equals false bool var2 &lt;- 4 = 5; // var2 equals false bool var3 &lt;- 4.5 = 4.7; // var3 equals false bool var4 &lt;- 3 = 3.0; // var4 equals true bool var5 &lt;- 4 = 4.7; // var5 equals false bool var6 &lt;- #now = #now minus_hours 1; // var6 equals false 4.4.16.5 See also: !=, &gt;, &lt;, &gt;=, &lt;=, 4.4.17 &gt; 4.4.17.1 Possible use: point &gt; point —&gt; bool &gt; (point , point) —&gt; bool float &gt; int —&gt; bool &gt; (float , int) —&gt; bool string &gt; string —&gt; bool &gt; (string , string) —&gt; bool float &gt; float —&gt; bool &gt; (float , float) —&gt; bool date &gt; date —&gt; bool &gt; (date , date) —&gt; bool int &gt; float —&gt; bool &gt; (int , float) —&gt; bool int &gt; int —&gt; bool &gt; (int , int) —&gt; bool 4.4.17.2 Result: true if the left-hand operand is greater than the right-hand operand, false otherwise. 4.4.17.3 Special cases: if one of the operands is nil, returns false if both operands are points, returns true if and only if the left component (x) of the left operand if greater than x of the right one and if the right component (y) of the left operand is greater than y of the right one. bool var0 &lt;- {5,7} &gt; {4,6}; // var0 equals true bool var1 &lt;- {5,7} &gt; {4,8}; // var1 equals false if both operands are String, uses a lexicographic comparison of two strings bool var2 &lt;- &#39;abc&#39; &gt; &#39;aeb&#39;; // var2 equals false 4.4.17.4 Examples: bool var3 &lt;- 3.5 &gt; 7; // var3 equals false bool var4 &lt;- 3.5 &gt; 7.6; // var4 equals false bool var5 &lt;- #now &gt; #now minus_hours 1; // var5 equals true bool var6 &lt;- 3 &gt; 2.5; // var6 equals true bool var7 &lt;- 3 &gt; 7; // var7 equals false 4.4.17.5 See also: &lt;, &gt;=, &lt;=, =, !=, 4.4.18 &gt;= 4.4.18.1 Possible use: float &gt;= int —&gt; bool &gt;= (float , int) —&gt; bool point &gt;= point —&gt; bool &gt;= (point , point) —&gt; bool float &gt;= float —&gt; bool &gt;= (float , float) —&gt; bool int &gt;= int —&gt; bool &gt;= (int , int) —&gt; bool string &gt;= string —&gt; bool &gt;= (string , string) —&gt; bool date &gt;= date —&gt; bool &gt;= (date , date) —&gt; bool int &gt;= float —&gt; bool &gt;= (int , float) —&gt; bool 4.4.18.2 Result: true if the left-hand operand is greater or equal than the right-hand operand, false otherwise. 4.4.18.3 Special cases: if one of the operands is nil, returns false if both operands are points, returns true if and only if the left component (x) of the left operand if greater or equal than x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. bool var0 &lt;- {5,7} &gt;= {4,6}; // var0 equals true bool var1 &lt;- {5,7} &gt;= {4,8}; // var1 equals false if both operands are string, uses a lexicographic comparison of the two strings bool var2 &lt;- &#39;abc&#39; &gt;= &#39;aeb&#39;; // var2 equals false bool var3 &lt;- &#39;abc&#39; &gt;= &#39;abc&#39;; // var3 equals true 4.4.18.4 Examples: bool var4 &lt;- 3.5 &gt;= 7; // var4 equals false bool var5 &lt;- 3.5 &gt;= 3.5; // var5 equals true bool var6 &lt;- 3 &gt;= 7; // var6 equals false bool var7 &lt;- #now &gt;= #now minus_hours 1; // var7 equals true bool var8 &lt;- 3 &gt;= 2.5; // var8 equals true 4.4.18.5 See also: &gt;, &lt;, &lt;=, =, !=, 4.4.19 abs 4.4.19.1 Possible use: abs (float) —&gt; float abs (int) —&gt; int 4.4.19.2 Result: Returns the absolute value of the operand (so a positive int or float depending on the type of the operand). 4.4.19.3 Examples: float var0 &lt;- abs (200 * -1 + 0.5); // var0 equals 199.5 int var1 &lt;- abs (-10); // var1 equals 10 int var2 &lt;- abs (10); // var2 equals 10 4.4.20 accumulate 4.4.20.1 Possible use: container accumulate any expression —&gt; list accumulate (container , any expression) —&gt; list 4.4.20.2 Result: returns a new flat list, in which each element is the evaluation of the right-hand operand. If this evaluation returns a list, the elements of this result are added directly to the list returned 4.4.20.3 Comment: accumulate is dedicated to the application of a same computation on each element of a container (and returns a list). In the right-hand operand, the keyword each can be used to represent, in turn, each of the left-hand operand elements. 4.4.20.4 Examples: list var0 &lt;- [a1,a2,a3] accumulate (each neighbors_at 10); // var0 equals a flat list of all the neighbors of these three agents list&lt;int&gt; var1 &lt;- [1,2,4] accumulate ([2,4]); // var1 equals [2,4,2,4,2,4] list&lt;int&gt; var2 &lt;- [1,2,4] accumulate (each * 2); // var2 equals [2,4,8] 4.4.20.5 See also: collect, 4.4.21 acos 4.4.21.1 Possible use: acos (float) —&gt; float acos (int) —&gt; float 4.4.21.2 Result: Returns the value (in the interval [0,180], in decimal degrees) of the arccos of the operand (which should be in [-1,1]). 4.4.21.3 Special cases: if the right-hand operand is outside of the [-1,1] interval, returns NaN 4.4.21.4 Examples: float var0 &lt;- acos (0); // var0 equals 90.0 4.4.21.5 See also: asin, atan, cos, 4.4.22 action 4.4.22.1 Possible use: action (any) —&gt; action 4.4.22.2 Result: Casts the operand into the type action 4.4.23 add_days Same signification as plus_days 4.4.24 add_edge 4.4.24.1 Possible use: graph add_edge pair —&gt; graph add_edge (graph , pair) —&gt; graph 4.4.24.2 Result: add an edge between a source vertex and a target vertex (resp. the left and the right element of the pair operand) 4.4.24.3 Comment: if the edge already exists, the graph is unchanged 4.4.24.4 Examples: graph &lt;- graph add_edge (source::target); 4.4.24.5 See also: add_node, graph, 4.4.25 add_hours Same signification as plus_hours 4.4.26 add_minutes Same signification as plus_minutes 4.4.27 add_months Same signification as plus_months 4.4.28 add_ms Same signification as plus_ms 4.4.29 add_node 4.4.29.1 Possible use: graph add_node geometry —&gt; graph add_node (graph , geometry) —&gt; graph 4.4.29.2 Result: adds a node in a graph. 4.4.29.3 Examples: graph var0 &lt;- graph add_node node(0) ; // var0 equals the graph with node(0) 4.4.29.4 See also: add_edge, graph, 4.4.30 add_point 4.4.30.1 Possible use: geometry add_point point —&gt; geometry add_point (geometry , point) —&gt; geometry 4.4.30.2 Result: A new geometry resulting from the addition of the right point (coordinate) to the left-hand geometry. Note that adding a point to a line or polyline will always return a closed contour. Also note that the position at which the added point will appear in the geometry is not necessarily the last one, as points are always ordered in a clockwise fashion in geometries 4.4.30.3 Examples: geometry var0 &lt;- polygon([{10,10},{10,20},{20,20}]) add_point {20,10}; // var0 equals polygon([{10,10},{10,20},{20,20},{20,10}]) 4.4.31 add_seconds Same signification as + 4.4.32 add_weeks Same signification as plus_weeks 4.4.33 add_years Same signification as plus_years 4.4.34 adjacency 4.4.34.1 Possible use: adjacency (graph) —&gt; matrix&lt;float&gt; 4.4.34.2 Result: adjacency matrix of the given graph. 4.4.35 after 4.4.35.1 Possible use: after (date) —&gt; bool any expression after date —&gt; bool after (any expression , date) —&gt; bool 4.4.35.2 Result: Returns true if the current_date of the model is strictly after the date passed in argument. Synonym of ‘current_date &gt; argument’. Can be used in its composed form with 2 arguments to express the lower boundary for the computation of a frequency. Note that only dates strictly after this one will be tested against the frequency 4.4.35.3 Examples: reflex when: after(starting_date) {} // this reflex will always be run after the first step reflex when: false after(starting date + #10days) {} // This reflex will not be run after this date. Better to use &#39;until&#39; or &#39;before&#39; in that case every(2#days) after (starting_date + 1#day) // the computation will return true every two days (using the starting_date of the model as the starting point) only for the dates strictly after this starting_date + 1#day 4.4.36 agent 4.4.36.1 Possible use: agent (any) —&gt; agent 4.4.36.2 Result: Casts the operand into the type agent 4.4.37 agent_closest_to 4.4.37.1 Possible use: agent_closest_to (unknown) —&gt; agent 4.4.37.2 Result: An agent, the closest to the operand (casted as a geometry). 4.4.37.3 Comment: the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology. 4.4.37.4 Examples: agent var0 &lt;- agent_closest_to(self); // var0 equals the closest agent to the agent applying the operator. 4.4.37.5 See also: neighbors_at, neighbors_of, agents_inside, agents_overlapping, closest_to, inside, overlapping, 4.4.38 agent_farthest_to 4.4.38.1 Possible use: agent_farthest_to (unknown) —&gt; agent 4.4.38.2 Result: An agent, the farthest to the operand (casted as a geometry). 4.4.38.3 Comment: the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology. 4.4.38.4 Examples: agent var0 &lt;- agent_farthest_to(self); // var0 equals the farthest agent to the agent applying the operator. 4.4.38.5 See also: neighbors_at, neighbors_of, agents_inside, agents_overlapping, closest_to, inside, overlapping, agent_closest_to, farthest_to, 4.4.39 agent_from_geometry 4.4.39.1 Possible use: path agent_from_geometry geometry —&gt; agent agent_from_geometry (path , geometry) —&gt; agent 4.4.39.2 Result: returns the agent corresponding to given geometry (right-hand operand) in the given path (left-hand operand). 4.4.39.3 Special cases: if the left-hand operand is nil, returns nil 4.4.39.4 Examples: geometry line &lt;- one_of(path_followed.segments); road ag &lt;- road(path_followed agent_from_geometry line); 4.4.39.5 See also: path, 4.4.40 agents_at_distance 4.4.40.1 Possible use: agents_at_distance (float) —&gt; list 4.4.40.2 Result: A list of agents situated at a distance lower than the right argument. 4.4.40.3 Examples: list var0 &lt;- agents_at_distance(20); // var0 equals all the agents (excluding the caller) which distance to the caller is lower than 20 4.4.40.4 See also: neighbors_at, neighbors_of, agent_closest_to, agents_inside, closest_to, inside, overlapping, at_distance, 4.4.41 agents_inside 4.4.41.1 Possible use: agents_inside (unknown) —&gt; list&lt;agent&gt; 4.4.41.2 Result: A list of agents covered by the operand (casted as a geometry). 4.4.41.3 Examples: list&lt;agent&gt; var0 &lt;- agents_inside(self); // var0 equals the agents that are covered by the shape of the agent applying the operator. 4.4.41.4 See also: agent_closest_to, agents_overlapping, closest_to, inside, overlapping, 4.4.42 agents_overlapping 4.4.42.1 Possible use: agents_overlapping (unknown) —&gt; list&lt;agent&gt; 4.4.42.2 Result: A list of agents overlapping the operand (casted as a geometry). 4.4.42.3 Examples: list&lt;agent&gt; var0 &lt;- agents_overlapping(self); // var0 equals the agents that overlap the shape of the agent applying the operator. 4.4.42.4 See also: neighbors_at, neighbors_of, agent_closest_to, agents_inside, closest_to, inside, overlapping, at_distance, 4.4.43 all_pairs_shortest_path 4.4.43.1 Possible use: all_pairs_shortest_path (graph) —&gt; matrix&lt;int&gt; 4.4.43.2 Result: returns the successor matrix of shortest paths between all node pairs (rows: source, columns: target): a cell (i,j) will thus contains the next node in the shortest path between i and j. 4.4.43.3 Examples: matrix&lt;int&gt; var0 &lt;- all_pairs_shortest_paths(my_graph); // var0 equals shortest_paths_matrix will contain all pairs of shortest paths 4.4.44 alpha_index 4.4.44.1 Possible use: alpha_index (graph) —&gt; float 4.4.44.2 Result: returns the alpha index of the graph (measure of connectivity which evaluates the number of cycles in a graph in comparison with the maximum number of cycles. The higher the alpha index, the more a network is connected: alpha = nb_cycles / (2*S-5) - planar graph) 4.4.44.3 Examples: float var1 &lt;- alpha_index(graphEpidemio); // var1 equals the alpha index of the graph 4.4.44.4 See also: beta_index, gamma_index, nb_cycles, connectivity_index, 4.4.45 among 4.4.45.1 Possible use: int among container —&gt; list among (int , container) —&gt; list 4.4.45.2 Result: Returns a list of length the value of the left-hand operand, containing random elements from the right-hand operand. As of GAMA 1.6, the order in which the elements are returned can be different than the order in which they appear in the right-hand container 4.4.45.3 Special cases: if the right-hand operand is empty, among returns a new empty list. If it is nil, it throws an error. if the left-hand operand is greater than the length of the right-hand operand, among returns the right-hand operand (converted as a list). If it is smaller or equal to zero, it returns an empty list 4.4.45.4 Examples: list&lt;int&gt; var0 &lt;- 3 among [1,2,4,3,5,7,6,8]; // var0 equals [1,2,8] (for example) list var1 &lt;- 3 among g2; // var1 equals [node6,node11,node7] list var2 &lt;- 3 among list(node); // var2 equals [node1,node11,node4] list&lt;int&gt; var3 &lt;- 1 among [1::2,3::4]; // var3 equals 2 or 4 4.4.46 and 4.4.46.1 Possible use: bool and any expression —&gt; bool and (bool , any expression) —&gt; bool 4.4.46.2 Result: a bool value, equal to the logical and between the left-hand operand and the right-hand operand. 4.4.46.3 Comment: both operands are always casted to bool before applying the operator. Thus, an expression like (1 and 0) is accepted and returns false. 4.4.46.4 See also: bool, or, !, 4.4.47 and 4.4.47.1 Possible use: predicate and predicate —&gt; predicate and (predicate , predicate) —&gt; predicate 4.4.47.2 Result: create a new predicate from two others by including them as subintentions 4.4.47.3 Examples: predicate1 and predicate2 4.4.48 angle_between 4.4.48.1 Possible use: angle_between (point, point, point) —&gt; float 4.4.48.2 Result: the angle between vectors P0P1 and P0P2 (P0, P1, P2 being the three point operands) 4.4.48.3 Examples: float var0 &lt;- angle_between({5,5},{10,5},{5,10}); // var0 equals 90 4.4.49 any Same signification as one_of 4.4.50 any_location_in 4.4.50.1 Possible use: any_location_in (geometry) —&gt; point 4.4.50.2 Result: A point inside (or touching) the operand-geometry. 4.4.50.3 Examples: point var0 &lt;- any_location_in(square(5)); // var0 equals a point in the square, for example : {3,4.6}. 4.4.50.4 See also: closest_points_with, farthest_point_to, points_at, 4.4.51 any_point_in Same signification as any_location_in 4.4.52 append_horizontally 4.4.52.1 Possible use: matrix append_horizontally matrix —&gt; matrix append_horizontally (matrix , matrix) —&gt; matrix matrix append_horizontally matrix —&gt; matrix append_horizontally (matrix , matrix) —&gt; matrix 4.4.52.2 Result: A matrix resulting from the concatenation of the rows of the two given matrices. If not both numerical or both object matrices, returns the first matrix. 4.4.52.3 Examples: matrix var0 &lt;- matrix([[1.0,2.0],[3.0,4.0]]) append_horizontally matrix([[1,2],[3,4]]); // var0 equals matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]]) 4.4.53 append_vertically 4.4.53.1 Possible use: matrix append_vertically matrix —&gt; matrix append_vertically (matrix , matrix) —&gt; matrix matrix append_vertically matrix —&gt; matrix append_vertically (matrix , matrix) —&gt; matrix 4.4.53.2 Result: A matrix resulting from the concatenation of the columns of the two given matrices. If not both numerical or both object matrices, returns the first matrix. 4.4.53.3 Examples: matrix var0 &lt;- matrix([[1,2],[3,4]]) append_vertically matrix([[1,2],[3,4]]); // var0 equals matrix([[1,2,1,2],[3,4,3,4]]) 4.4.54 arc 4.4.54.1 Possible use: arc (float, float, float) —&gt; geometry arc (float, float, float, bool) —&gt; geometry 4.4.54.2 Result: An arc, which radius is equal to the first operand, heading to the second and amplitude the third An arc, which radius is equal to the first operand, heading to the second, amplitude to the third and a boolean indicating whether to return a linestring or a polygon to the fourth 4.4.54.3 Comment: the center of the arc is by default the location of the current agent in which has been called this operator. This operator returns a polygon by default.the center of the arc is by default the location of the current agent in which has been called this operator. 4.4.54.4 Special cases: returns a point if the radius operand is lower or equal to 0. returns a point if the radius operand is lower or equal to 0. 4.4.54.5 Examples: geometry var0 &lt;- arc(4,45,90); // var0 equals a geometry as an arc of radius 4, in a direction of 45Â° and an amplitude of 90Â° geometry var1 &lt;- arc(4,45,90, false); // var1 equals a geometry as an arc of radius 4, in a direction of 45Â° and an amplitude of 90Â°, which only contains the points on the arc 4.4.54.6 See also: around, cone, line, link, norm, point, polygon, polyline, super_ellipse, rectangle, square, circle, ellipse, triangle, 4.4.55 around 4.4.55.1 Possible use: float around unknown —&gt; geometry around (float , unknown) —&gt; geometry 4.4.55.2 Result: A geometry resulting from the difference between a buffer around the right-operand casted in geometry at a distance left-operand (right-operand buffer left-operand) and the right-operand casted as geometry. 4.4.55.3 Special cases: returns a circle geometry of radius right-operand if the left-operand is nil 4.4.55.4 Examples: geometry var0 &lt;- 10 around circle(5); // var0 equals the ring geometry between 5 and 10. 4.4.55.5 See also: circle, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 4.4.56 as 4.4.56.1 Possible use: unknown as msi.gaml.types.IType —&gt; unknown as (unknown , msi.gaml.types.IType) —&gt; unknown 4.4.56.2 Result: casting of the first argument into a given type 4.4.56.3 Comment: It is equivalent to the application of the type operator on the left operand. 4.4.56.4 Examples: int var0 &lt;- 3.5 as int; // var0 equals int(3.5) 4.4.57 as_4_grid 4.4.57.1 Possible use: geometry as_4_grid point —&gt; matrix as_4_grid (geometry , point) —&gt; matrix 4.4.57.2 Result: A matrix of square geometries (grid with 4-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent) 4.4.57.3 Examples: matrix var0 &lt;- self as_4_grid {10, 5}; // var0 equals the matrix of square geometries (grid with 4-neighborhood) with 10 columns and 5 lines corresponding to the square tessellation of the geometry of the agent applying the operator. 4.4.57.4 See also: as_grid, as_hexagonal_grid, 4.4.58 as_distance_graph 4.4.58.1 Possible use: container as_distance_graph map —&gt; graph as_distance_graph (container , map) —&gt; graph container as_distance_graph float —&gt; graph as_distance_graph (container , float) —&gt; graph as_distance_graph (container, float, species) —&gt; graph 4.4.58.2 Result: creates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices close enough (less than a distance, right-hand operand). 4.4.58.3 Comment: as_distance_graph is more efficient for a list of points than as_intersection_graph. 4.4.58.4 Examples: list(ant) as_distance_graph 3.0 4.4.58.5 See also: as_intersection_graph, as_edge_graph, 4.4.59 as_driving_graph 4.4.59.1 Possible use: container as_driving_graph container —&gt; graph as_driving_graph (container , container) —&gt; graph 4.4.59.2 Result: creates a graph from the list/map of edges given as operand and connect the node to the edge 4.4.59.3 Examples: as_driving_graph(road,node) --: build a graph while using the road agents as edges and the node agents as nodes 4.4.59.4 See also: as_intersection_graph, as_distance_graph, as_edge_graph, 4.4.60 as_edge_graph 4.4.60.1 Possible use: as_edge_graph (map) —&gt; graph as_edge_graph (container) —&gt; graph container as_edge_graph float —&gt; graph as_edge_graph (container , float) —&gt; graph 4.4.60.2 Result: creates a graph from the list/map of edges given as operand 4.4.60.3 Special cases: if the operand is a list and a tolerance (max distance in meters to consider that 2 points are the same node) is given, the graph will be built with elements of the list as edges and two edges will be connected by a node if the distance between their extremity (first or last points) are at distance lower or equal to the tolerance graph var0 &lt;- as_edge_graph([line([{1,5},{12,45}]),line([{13,45},{34,56}])],1); // var0 equals a graph with two edges and three vertices if the operand is a map, the graph will be built by creating edges from pairs of the map graph var1 &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); // var1 equals a graph with these three vertices and two edges if the operand is a list, the graph will be built with elements of the list as edges graph var2 &lt;- as_edge_graph([line([{1,5},{12,45}]),line([{12,45},{34,56}])]); // var2 equals a graph with two edges and three vertices 4.4.60.4 See also: as_intersection_graph, as_distance_graph, 4.4.61 as_grid 4.4.61.1 Possible use: geometry as_grid point —&gt; matrix as_grid (geometry , point) —&gt; matrix 4.4.61.2 Result: A matrix of square geometries (grid with 8-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent) 4.4.61.3 Examples: matrix var0 &lt;- self as_grid {10, 5}; // var0 equals a matrix of square geometries (grid with 8-neighborhood) with 10 columns and 5 lines corresponding to the square tessellation of the geometry of the agent applying the operator. 4.4.61.4 See also: as_4_grid, as_hexagonal_grid, 4.4.62 as_hexagonal_grid 4.4.62.1 Possible use: geometry as_hexagonal_grid point —&gt; list&lt;geometry&gt; as_hexagonal_grid (geometry , point) —&gt; list&lt;geometry&gt; 4.4.62.2 Result: A list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry 4.4.62.3 Examples: list&lt;geometry&gt; var0 &lt;- self as_hexagonal_grid {10, 5}; // var0 equals list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry 4.4.62.4 See also: as_4_grid, as_grid, 4.4.63 as_int 4.4.63.1 Possible use: string as_int int —&gt; int as_int (string , int) —&gt; int 4.4.63.2 Result: parses the string argument as a signed integer in the radix specified by the second argument. 4.4.63.3 Special cases: if the left operand is nil or empty, as_int returns 0 if the left operand does not represent an integer in the specified radix, as_int throws an exception 4.4.63.4 Examples: int var0 &lt;- &#39;20&#39; as_int 10; // var0 equals 20 int var1 &lt;- &#39;20&#39; as_int 8; // var1 equals 16 int var2 &lt;- &#39;20&#39; as_int 16; // var2 equals 32 int var3 &lt;- &#39;1F&#39; as_int 16; // var3 equals 31 int var4 &lt;- &#39;hello&#39; as_int 32; // var4 equals 18306744 4.4.63.5 See also: int, 4.4.64 as_intersection_graph 4.4.64.1 Possible use: container as_intersection_graph float —&gt; graph as_intersection_graph (container , float) —&gt; graph 4.4.64.2 Result: creates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices with an intersection (with a given tolerance). 4.4.64.3 Comment: as_intersection_graph is more efficient for a list of geometries (but less accurate) than as_distance_graph. 4.4.64.4 Examples: list(ant) as_intersection_graph 0.5 4.4.64.5 See also: as_distance_graph, as_edge_graph, 4.4.65 as_map 4.4.65.1 Possible use: container as_map any expression —&gt; map as_map (container , any expression) —&gt; map 4.4.65.2 Result: produces a new map from the evaluation of the right-hand operand for each element of the left-hand operand 4.4.65.3 Comment: the right-hand operand should be a pair 4.4.65.4 Special cases: if the left-hand operand is nil, as_map throws an error. 4.4.65.5 Examples: map&lt;int,int&gt; var0 &lt;- [1,2,3,4,5,6,7,8] as_map (each::(each * 2)); // var0 equals [1::2, 2::4, 3::6, 4::8, 5::10, 6::12, 7::14, 8::16] map&lt;int,int&gt; var1 &lt;- [1::2,3::4,5::6] as_map (each::(each * 2)); // var1 equals [2::4, 4::8, 6::12] 4.4.66 as_matrix 4.4.66.1 Possible use: unknown as_matrix point —&gt; matrix as_matrix (unknown , point) —&gt; matrix 4.4.66.2 Result: casts the left operand into a matrix with right operand as preferred size 4.4.66.3 Comment: This operator is very useful to cast a file containing raster data into a matrix.Note that both components of the right operand point should be positive, otherwise an exception is raised.The operator as_matrix creates a matrix of preferred size. It fills in it with elements of the left operand until the matrix is full If the size is to short, some elements will be omitted. Matrix remaining elements will be filled in by nil. 4.4.66.4 Special cases: if the right operand is nil, as_matrix is equivalent to the matrix operator 4.4.66.5 See also: matrix, 4.4.67 as_path 4.4.67.1 Possible use: list&lt;geometry&gt; as_path graph —&gt; path as_path (list&lt;geometry&gt; , graph) —&gt; path 4.4.67.2 Result: create a graph path from the list of shape 4.4.67.3 Examples: path var0 &lt;- [road1,road2,road3] as_path my_graph; // var0 equals a path road1-&gt;road2-&gt;road3 of my_graph 4.4.68 asin 4.4.68.1 Possible use: asin (float) —&gt; float asin (int) —&gt; float 4.4.68.2 Result: the arcsin of the operand 4.4.68.3 Special cases: if the right-hand operand is outside of the [-1,1] interval, returns NaN 4.4.68.4 Examples: float var0 &lt;- asin (0); // var0 equals 0.0 float var1 &lt;- asin (90); // var1 equals #nan 4.4.68.5 See also: acos, atan, sin, 4.4.69 at 4.4.69.1 Possible use: container&lt;KeyType,ValueType&gt; at KeyType —&gt; ValueType at (container&lt;KeyType,ValueType&gt; , KeyType) —&gt; ValueType string at int —&gt; string at (string , int) —&gt; string 4.4.69.2 Result: the element at the right operand index of the container 4.4.69.3 Comment: The first element of the container is located at the index 0. In addition, if the user tries to get the element at an index higher or equals than the length of the container, he will get an IndexOutOfBoundException.The at operator behavior depends on the nature of the operand 4.4.69.4 Special cases: if it is a file, at returns the element of the file content at the index specified by the right operand if it is a population, at returns the agent at the index specified by the right operand if it is a graph and if the right operand is a node, at returns the in and out edges corresponding to that node if it is a graph and if the right operand is an edge, at returns the pair node_out::node_in of the edge if it is a graph and if the right operand is a pair node1::node2, at returns the edge from node1 to node2 in the graph if it is a list or a matrix, at returns the element at the index specified by the right operand int var0 &lt;- [1, 2, 3] at 2; // var0 equals 3 point var1 &lt;- [{1,2}, {3,4}, {5,6}] at 0; // var1 equals {1.0,2.0} 4.4.69.5 Examples: string var2 &lt;- &#39;abcdef&#39; at 0; // var2 equals &#39;a&#39; 4.4.69.6 See also: contains_all, contains_any, 4.4.70 at_distance 4.4.70.1 Possible use: container&lt;agent&gt; at_distance float —&gt; list&lt;geometry&gt; at_distance (container&lt;agent&gt; , float) —&gt; list&lt;geometry&gt; 4.4.70.2 Result: A list of agents or geometries among the left-operand list that are located at a distance &lt;= the right operand from the caller agent (in its topology) 4.4.70.3 Examples: list&lt;geometry&gt; var0 &lt;- [ag1, ag2, ag3] at_distance 20; // var0 equals the agents of the list located at a distance &lt;= 20 from the caller agent (in the same order). 4.4.70.4 See also: neighbors_at, neighbors_of, agent_closest_to, agents_inside, closest_to, inside, overlapping, 4.4.71 at_location 4.4.71.1 Possible use: geometry at_location point —&gt; geometry at_location (geometry , point) —&gt; geometry 4.4.71.2 Result: A geometry resulting from the tran of a translation to the right-hand operand point of the left-hand operand (geometry, agent, point) 4.4.71.3 Examples: geometry var0 &lt;- self at_location {10, 20}; // var0 equals the geometry resulting from a translation to the location {10, 20} of the left-hand geometry (or agent). 4.4.72 atan 4.4.72.1 Possible use: atan (float) —&gt; float atan (int) —&gt; float 4.4.72.2 Result: Returns the value (in the interval [-90,90], in decimal degrees) of the arctan of the operand (which can be any real number). 4.4.72.3 Examples: float var0 &lt;- atan (1); // var0 equals 45.0 4.4.72.4 See also: acos, asin, tan, 4.4.73 atan2 4.4.73.1 Possible use: float atan2 float —&gt; float atan2 (float , float) —&gt; float 4.4.73.2 Result: the atan2 value of the two operands. 4.4.73.3 Comment: The function atan2 is the arctangent function with two arguments. The purpose of using two arguments instead of one is to gather information on the signs of the inputs in order to return the appropriate quadrant of the computed angle, which is not possible for the single-argument arctangent function. 4.4.73.4 Examples: float var0 &lt;- atan2 (0,0); // var0 equals 0.0 4.4.73.5 See also: atan, acos, asin, 4.4.74 attributes 4.4.74.1 Possible use: attributes (any) —&gt; attributes 4.4.74.2 Result: Casts the operand into the type attributes 4.4.75 auto_correlation 4.4.75.1 Possible use: container auto_correlation int —&gt; float auto_correlation (container , int) —&gt; float 4.4.75.2 Result: Returns the auto-correlation of a data sequence "],
["operators-b-to-c.html", "Chapter 5 Operators (B to C) 5.1 Definition 5.2 Priority between operators 5.3 Using actions as operators 5.4 Operators", " Chapter 5 Operators (B to C) This file is automatically generated from java files. Do Not Edit It. 5.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 5.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 5.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 5.4 Operators 5.4.1 BDIPlan 5.4.1.1 Possible use: BDIPlan (any) —&gt; BDIPlan 5.4.1.2 Result: Casts the operand into the type BDIPlan 5.4.2 before 5.4.2.1 Possible use: before (date) —&gt; bool any expression before date —&gt; bool before (any expression , date) —&gt; bool 5.4.2.2 Result: Returns true if the current_date of the model is strictly before the date passed in argument. Synonym of ‘current_date &lt; argument’ 5.4.2.3 Examples: reflex when: before(starting_date) {} // this reflex will never be run 5.4.3 beta 5.4.3.1 Possible use: float beta float —&gt; float beta (float , float) —&gt; float 5.4.3.2 Result: Returns the beta function with arguments a, b. 5.4.4 beta_index 5.4.4.1 Possible use: beta_index (graph) —&gt; float 5.4.4.2 Result: returns the beta index of the graph (Measures the level of connectivity in a graph and is expressed by the relationship between the number of links (e) over the number of nodes (v) : beta = e/v. 5.4.4.3 Examples: graph graphEpidemio &lt;- graph([]); float var1 &lt;- beta_index(graphEpidemio); // var1 equals the beta index of the graph 5.4.4.4 See also: alpha_index, gamma_index, nb_cycles, connectivity_index, 5.4.5 between 5.4.5.1 Possible use: date between date —&gt; bool between (date , date) —&gt; bool between (float, float, float) —&gt; bool between (date, date, date) —&gt; bool between (any expression, date, date) —&gt; bool between (int, int, int) —&gt; bool 5.4.5.2 Result: returns true if the first float operand is bigger than the second float operand and smaller than the third float operand returns true the first integer operand is bigger than the second integer operand and smaller than the third integer operand 5.4.5.3 Special cases: returns true if the first operand is between the two dates passed in arguments (both exclusive). The version with 2 arguments compares the current_date with the 2 others bool var0 &lt;- (date(&#39;2016-01-01&#39;) between(date(&#39;2000-01-01&#39;), date(&#39;2020-02-02&#39;))); // var0 equals true// // will return true if the current_date of the model is in_between the 2 between(date(&#39;2000-01-01&#39;), date(&#39;2020-02-02&#39;)) returns true if the first operand is between the two dates passed in arguments (both exclusive). Can be combined with ‘every’ to express a frequency between two dates bool var3 &lt;- (date(&#39;2016-01-01&#39;) between(date(&#39;2000-01-01&#39;), date(&#39;2020-02-02&#39;))); // var3 equals true// will return true every new day between these two dates, taking the first one as the starting point every(#day between(date(&#39;2000-01-01&#39;), date(&#39;2020-02-02&#39;))) 5.4.5.4 Examples: bool var6 &lt;- between(5.0, 1.0, 10.0); // var6 equals true bool var7 &lt;- between(5, 1, 10); // var7 equals true 5.4.6 betweenness_centrality 5.4.6.1 Possible use: betweenness_centrality (graph) —&gt; map 5.4.6.2 Result: returns a map containing for each vertex (key), its betweenness centrality (value): number of shortest paths passing through each vertex 5.4.6.3 Examples: graph graphEpidemio &lt;- graph([]); map var1 &lt;- betweenness_centrality(graphEpidemio); // var1 equals the betweenness centrality index of the graph 5.4.7 biggest_cliques_of 5.4.7.1 Possible use: biggest_cliques_of (graph) —&gt; list&lt;list&gt; 5.4.7.2 Result: returns the biggest cliques of a graph using the Bron-Kerbosch clique detection algorithm 5.4.7.3 Examples: graph my_graph &lt;- graph([]); list&lt;list&gt; var1 &lt;- biggest_cliques_of (my_graph); // var1 equals the list of the biggest cliques as list 5.4.7.4 See also: maximal_cliques_of, 5.4.8 binomial 5.4.8.1 Possible use: int binomial float —&gt; int binomial (int , float) —&gt; int 5.4.8.2 Result: A value from a random variable following a binomial distribution. The operands represent the number of experiments n and the success probability p. 5.4.8.3 Comment: The binomial distribution is the discrete probability distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields success with probability p, cf. Binomial distribution on Wikipedia. 5.4.8.4 Examples: int var0 &lt;- binomial(15,0.6); // var0 equals a random positive integer 5.4.8.5 See also: poisson, gauss, 5.4.9 binomial_coeff 5.4.9.1 Possible use: int binomial_coeff int —&gt; float binomial_coeff (int , int) —&gt; float 5.4.9.2 Result: Returns n choose k as a double. Note the integerization of the double return value. 5.4.10 binomial_complemented 5.4.10.1 Possible use: binomial_complemented (int, int, float) —&gt; float 5.4.10.2 Result: Returns the sum of the terms k+1 through n of the Binomial probability density, where n is the number of trials and P is the probability of success in the range 0 to 1. 5.4.11 binomial_sum 5.4.11.1 Possible use: binomial_sum (int, int, float) —&gt; float 5.4.11.2 Result: Returns the sum of the terms 0 through k of the Binomial probability density, where n is the number of trials and p is the probability of success in the range 0 to 1. 5.4.12 blend 5.4.12.1 Possible use: rgb blend rgb —&gt; rgb blend (rgb , rgb) —&gt; rgb blend (rgb, rgb, float) —&gt; rgb 5.4.12.2 Result: Blend two colors with an optional ratio (c1 * r + c2 * (1 - r)) between 0 and 1 5.4.12.3 Special cases: If the ratio is omitted, an even blend is done rgb var1 &lt;- blend(#red, #blue); // var1 equals to a color very close to the purple 5.4.12.4 Examples: rgb var3 &lt;- blend(#red, #blue, 0.3); // var3 equals to a color between the purple and the blue 5.4.12.5 See also: rgb, hsb, 5.4.13 bool 5.4.13.1 Possible use: bool (any) —&gt; bool 5.4.13.2 Result: Casts the operand into the type bool 5.4.14 box 5.4.14.1 Possible use: box (point) —&gt; geometry box (float, float, float) —&gt; geometry 5.4.14.2 Result: A box geometry which side sizes are given by the operands. 5.4.14.3 Comment: the center of the box is by default the location of the current agent in which has been called this operator.the center of the box is by default the location of the current agent in which has been called this operator. 5.4.14.4 Special cases: returns nil if the operand is nil. returns nil if the operand is nil. 5.4.14.5 Examples: geometry var0 &lt;- box(10, 5 , 5); // var0 equals a geometry as a rectangle with width = 10, height = 5 depth= 5. geometry var1 &lt;- box({10, 5 , 5}); // var1 equals a geometry as a rectangle with width = 10, height = 5 depth= 5. 5.4.14.6 See also: around, circle, sphere, cone, line, link, norm, point, polygon, polyline, square, cube, triangle, 5.4.15 brewer_colors 5.4.15.1 Possible use: brewer_colors (string) —&gt; list&lt;rgb&gt; string brewer_colors int —&gt; list&lt;rgb&gt; brewer_colors (string , int) —&gt; list&lt;rgb&gt; 5.4.15.2 Result: Build a list of colors of a given type (see website http://colorbrewer2.org/) with a given number of classes Build a list of colors of a given type (see website http://colorbrewer2.org/) 5.4.15.3 Examples: list&lt;rgb&gt; var0 &lt;- list&lt;rgb&gt; colors &lt;- brewer_colors(&quot;Pastel1&quot;, 10);; // var0 equals a list of 10 sequential colors list&lt;rgb&gt; var1 &lt;- list&lt;rgb&gt; colors &lt;- brewer_colors(&quot;OrRd&quot;);; // var1 equals a list of 6 blue colors 5.4.15.4 See also: brewer_palettes, 5.4.16 brewer_palettes 5.4.16.1 Possible use: brewer_palettes (int) —&gt; list&lt;string&gt; int brewer_palettes int —&gt; list&lt;string&gt; brewer_palettes (int , int) —&gt; list&lt;string&gt; 5.4.16.2 Result: returns the list a palette with a given min number of classes and max number of classes) returns the list a palette with a given min number of classes and max number of classes) 5.4.16.3 Examples: list&lt;string&gt; var0 &lt;- list&lt;rgb&gt; colors &lt;- brewer_palettes(5,10);; // var0 equals a list of palettes that are composed of a min of 5 colors and a max of 10 colors list&lt;string&gt; var1 &lt;- list&lt;rgb&gt; colors &lt;- brewer_palettes();; // var1 equals a list of palettes that are composed of a min of 5 colors 5.4.16.4 See also: brewer_colors, 5.4.17 buffer Same signification as + 5.4.18 build 5.4.18.1 Possible use: build (matrix&lt;float&gt;) —&gt; regression matrix&lt;float&gt; build string —&gt; regression build (matrix&lt;float&gt; , string) —&gt; regression 5.4.18.2 Result: returns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given method (“GLS” or “OLS”). Usage: build(data,method) returns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given ordinary least squares method. Usage: build(data) 5.4.18.3 Examples: build(matrix([[1,2,3,4],[2,3,4,2]]),&quot;GLS&quot;) matrix([[1,2,3,4],[2,3,4,2]]) 5.4.19 ceil 5.4.19.1 Possible use: ceil (float) —&gt; float 5.4.19.2 Result: Maps the operand to the smallest following integer, i.e. the smallest integer not less than x. 5.4.19.3 Examples: float var0 &lt;- ceil(3); // var0 equals 3.0 float var1 &lt;- ceil(3.5); // var1 equals 4.0 float var2 &lt;- ceil(-4.7); // var2 equals -4.0 5.4.19.4 See also: floor, round, 5.4.20 centroid 5.4.20.1 Possible use: centroid (geometry) —&gt; point 5.4.20.2 Result: Centroid (weighted sum of the centroids of a decomposition of the area into triangles) of the operand-geometry. Can be different to the location of the geometry 5.4.20.3 Examples: point var0 &lt;- centroid(world); // var0 equals the centroid of the square, for example : {50.0,50.0}. 5.4.20.4 See also: any_location_in, closest_points_with, farthest_point_to, points_at, 5.4.21 char 5.4.21.1 Possible use: char (int) —&gt; string 5.4.21.2 Special cases: converts ACSII integer value to character string var0 &lt;- char (34); // var0 equals &#39;&quot;&#39; 5.4.22 chi_square 5.4.22.1 Possible use: float chi_square float —&gt; float chi_square (float , float) —&gt; float 5.4.22.2 Result: Returns the area under the left hand tail (from 0 to x) of the Chi square probability density function with df degrees of freedom. 5.4.23 chi_square_complemented 5.4.23.1 Possible use: float chi_square_complemented float —&gt; float chi_square_complemented (float , float) —&gt; float 5.4.23.2 Result: Returns the area under the right hand tail (from x to infinity) of the Chi square probability density function with df degrees of freedom. 5.4.24 circle 5.4.24.1 Possible use: circle (float) —&gt; geometry float circle point —&gt; geometry circle (float , point) —&gt; geometry 5.4.24.2 Result: A circle geometry which radius is equal to the first operand, and the center has the location equal to the second operand. A circle geometry which radius is equal to the operand. 5.4.24.3 Comment: the center of the circle is by default the location of the current agent in which has been called this operator. 5.4.24.4 Special cases: returns a point if the operand is lower or equal to 0. returns a point if the operand is lower or equal to 0. 5.4.24.5 Examples: geometry var0 &lt;- circle(10,{80,30}); // var0 equals a geometry as a circle of radius 10, the center will be in the location {80,30}. geometry var1 &lt;- circle(10); // var1 equals a geometry as a circle of radius 10. 5.4.24.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 5.4.25 clean 5.4.25.1 Possible use: clean (geometry) —&gt; geometry 5.4.25.2 Result: A geometry corresponding to the cleaning of the operand (geometry, agent, point) 5.4.25.3 Comment: The cleaning corresponds to a buffer with a distance of 0.0 5.4.25.4 Examples: geometry var0 &lt;- clean(self); // var0 equals returns the geometry resulting from the cleaning of the geometry of the agent applying the operator. 5.4.26 clean_network 5.4.26.1 Possible use: clean_network (list&lt;geometry&gt;, float, bool, bool) —&gt; list&lt;geometry&gt; 5.4.26.2 Result: A list of polylines corresponding to the cleaning of the first operand (list of polyline geometry or agents), considering the tolerance distance given by the second operand; the third operator is used to define if the operator should as well split the lines at their intersections(true to split the lines); the last operandis used to specify if the operator should as well keep only the main connected component of the network. Usage: clean_network(lines:list of geometries or agents, tolerance: float, split_lines: bool, keepMainConnectedComponent: bool) 5.4.26.3 Comment: The cleaned set of polylines 5.4.26.4 Examples: list&lt;geometry&gt; var0 &lt;- clean_network(my_road_shapefile.contents, 1.0, true, false); // var0 equals returns the list of polulines resulting from the cleaning of the geometry of the agent applying the operator with a tolerance of 1m, and splitting the lines at their intersections. 5.4.27 closest_points_with 5.4.27.1 Possible use: geometry closest_points_with geometry —&gt; list&lt;point&gt; closest_points_with (geometry , geometry) —&gt; list&lt;point&gt; 5.4.27.2 Result: A list of two closest points between the two geometries. 5.4.27.3 Examples: list&lt;point&gt; var0 &lt;- geom1 closest_points_with(geom2); // var0 equals [pt1, pt2] with pt1 the closest point of geom1 to geom2 and pt1 the closest point of geom2 to geom1 5.4.27.4 See also: any_location_in, any_point_in, farthest_point_to, points_at, 5.4.28 closest_to 5.4.28.1 Possible use: container&lt;agent&gt; closest_to geometry —&gt; geometry closest_to (container&lt;agent&gt; , geometry) —&gt; geometry 5.4.28.2 Result: An agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the closest to the operand (casted as a geometry). 5.4.28.3 Comment: the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology. 5.4.28.4 Examples: geometry var0 &lt;- [ag1, ag2, ag3] closest_to(self); // var0 equals return the closest agent among ag1, ag2 and ag3 to the agent applying the operator.(species1 + species2) closest_to self 5.4.28.5 See also: neighbors_at, neighbors_of, inside, overlapping, agents_overlapping, agents_inside, agent_closest_to, 5.4.29 collect 5.4.29.1 Possible use: container collect any expression —&gt; list collect (container , any expression) —&gt; list 5.4.29.2 Result: returns a new list, in which each element is the evaluation of the right-hand operand. 5.4.29.3 Comment: collect is similar to accumulate except that accumulate always produces flat lists if the right-hand operand returns a list.In addition, collect can be applied to any container. 5.4.29.4 Special cases: if the left-hand operand is nil, collect throws an error 5.4.29.5 Examples: list var0 &lt;- [1,2,4] collect (each *2); // var0 equals [2,4,8] list var1 &lt;- [1,2,4] collect ([2,4]); // var1 equals [[2,4],[2,4],[2,4]] list var2 &lt;- [1::2, 3::4, 5::6] collect (each + 2); // var2 equals [4,6,8] list var3 &lt;- (list(node) collect (node(each).location.x * 2); // var3 equals the list of nodes with their x multiplied by 2 5.4.29.6 See also: accumulate, 5.4.30 column_at 5.4.30.1 Possible use: matrix column_at int —&gt; list column_at (matrix , int) —&gt; list 5.4.30.2 Result: returns the column at a num_col (right-hand operand) 5.4.30.3 Examples: list var0 &lt;- matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]) column_at 2; // var0 equals [&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;] 5.4.30.4 See also: row_at, rows_list, 5.4.31 columns_list 5.4.31.1 Possible use: columns_list (matrix) —&gt; list&lt;list&gt; 5.4.31.2 Result: returns a list of the columns of the matrix, with each column as a list of elements 5.4.31.3 Examples: list&lt;list&gt; var0 &lt;- columns_list(matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]])); // var0 equals [[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]] 5.4.31.4 See also: rows_list, 5.4.32 command 5.4.32.1 Possible use: command (string) —&gt; string string command string —&gt; string command (string , string) —&gt; string command (string, string, msi.gama.util.GamaMap&lt;java.lang.String,java.lang.String&gt;) —&gt; string 5.4.32.2 Result: command allows GAMA to issue a system command using the system terminal or shell and to receive a string containing the outcome of the command or script executed. By default, commands are blocking the agent calling them, unless the sequence ‘&amp;’ is used at the end. In this case, the result of the operator is an empty string. The basic form with only one string in argument uses the directory of the model and does not set any environment variables. Two other forms (with a directory and a map of environment variables) are available. command allows GAMA to issue a system command using the system terminal or shell and to receive a string containing the outcome of the command or script executed. By default, commands are blocking the agent calling them, unless the sequence ‘&amp;’ is used at the end. In this case, the result of the operator is an empty string command allows GAMA to issue a system command using the system terminal or shell and to receive a string containing the outcome of the command or script executed. By default, commands are blocking the agent calling them, unless the sequence ‘&amp;’ is used at the end. In this case, the result of the operator is an empty string. The basic form with only one string in argument uses the directory of the model and does not set any environment variables. Two other forms (with a directory and a map of environment variables) are available. 5.4.33 cone 5.4.33.1 Possible use: cone (point) —&gt; geometry int cone int —&gt; geometry cone (int , int) —&gt; geometry 5.4.33.2 Result: A cone geometry which min and max angles are given by the operands. A cone geometry which min and max angles are given by the operands. 5.4.33.3 Comment: the center of the cone is by default the location of the current agent in which has been called this operator.the center of the cone is by default the location of the current agent in which has been called this operator. 5.4.33.4 Special cases: returns nil if the operand is nil. returns nil if the operand is nil. 5.4.33.5 Examples: geometry var0 &lt;- cone({0, 45}); // var0 equals a geometry as a cone with min angle is 0 and max angle is 45. geometry var1 &lt;- cone(0, 45); // var1 equals a geometry as a cone with min angle is 0 and max angle is 45. 5.4.33.6 See also: around, circle, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 5.4.34 cone3D 5.4.34.1 Possible use: float cone3D float —&gt; geometry cone3D (float , float) —&gt; geometry 5.4.34.2 Result: A cone geometry which base radius size is equal to the first operand, and which the height is equal to the second operand. 5.4.34.3 Comment: the center of the cone is by default the location of the current agent in which has been called this operator. 5.4.34.4 Special cases: returns a point if the operand is lower or equal to 0. 5.4.34.5 Examples: geometry var0 &lt;- cone3D(10.0,5.0); // var0 equals a geometry as a cone with a base circle of radius 10 and a height of 5. 5.4.34.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 5.4.35 connected_components_of 5.4.35.1 Possible use: connected_components_of (graph) —&gt; list&lt;list&gt; graph connected_components_of bool —&gt; list&lt;list&gt; connected_components_of (graph , bool) —&gt; list&lt;list&gt; 5.4.35.2 Result: returns the connected components of a graph, i.e. the list of all vertices that are in the maximally connected component together with the specified vertex. returns the connected components of a graph, i.e. the list of all edges (if the boolean is true) or vertices (if the boolean is false) that are in the connected components. 5.4.35.3 Examples: graph my_graph &lt;- graph([]); list&lt;list&gt; var1 &lt;- connected_components_of (my_graph); // var1 equals the list of all the components as listgraph my_graph2 &lt;- graph([]); list&lt;list&gt; var3 &lt;- connected_components_of (my_graph2, true); // var3 equals the list of all the components as list 5.4.35.4 See also: alpha_index, connectivity_index, nb_cycles, 5.4.36 connectivity_index 5.4.36.1 Possible use: connectivity_index (graph) —&gt; float 5.4.36.2 Result: returns a simple connectivity index. This number is estimated through the number of nodes (v) and of sub-graphs (p) : IC = (v - p) /(v - 1). 5.4.36.3 Examples: graph graphEpidemio &lt;- graph([]); float var1 &lt;- connectivity_index(graphEpidemio); // var1 equals the connectivity index of the graph 5.4.36.4 See also: alpha_index, beta_index, gamma_index, nb_cycles, 5.4.37 container 5.4.37.1 Possible use: container (any) —&gt; container 5.4.37.2 Result: Casts the operand into the type container 5.4.38 contains 5.4.38.1 Possible use: container&lt;KeyType,ValueType&gt; contains unknown —&gt; bool contains (container&lt;KeyType,ValueType&gt; , unknown) —&gt; bool string contains string —&gt; bool contains (string , string) —&gt; bool 5.4.38.2 Result: true, if the container contains the right operand, false otherwise 5.4.38.3 Comment: the contains operator behavior depends on the nature of the operand 5.4.38.4 Special cases: if it is a map, contains returns true if the operand is a key of the map if it is a file, contains returns true it the operand is contained in the file content if it is a population, contains returns true if the operand is an agent of the population, false otherwise if it is a graph, contains returns true if the operand is a node or an edge of the graph, false otherwise if both operands are strings, returns true if the right-hand operand contains the right-hand pattern; if it is a list or a matrix, contains returns true if the list or matrix contains the right operand bool var0 &lt;- [1, 2, 3] contains 2; // var0 equals true bool var1 &lt;- [{1,2}, {3,4}, {5,6}] contains {3,4}; // var1 equals true 5.4.38.5 Examples: bool var2 &lt;- &#39;abcded&#39; contains &#39;bc&#39;; // var2 equals true 5.4.38.6 See also: contains_all, contains_any, 5.4.39 contains_all 5.4.39.1 Possible use: string contains_all list —&gt; bool contains_all (string , list) —&gt; bool container contains_all container —&gt; bool contains_all (container , container) —&gt; bool 5.4.39.2 Result: true if the left operand contains all the elements of the right operand, false otherwise 5.4.39.3 Comment: the definition of contains depends on the container 5.4.39.4 Special cases: if the right operand is nil or empty, contains_all returns true if the left-operand is a string, test whether the string contains all the element of the list; bool var0 &lt;- &quot;abcabcabc&quot; contains_all [&quot;ca&quot;,&quot;xy&quot;]; // var0 equals false 5.4.39.5 Examples: bool var1 &lt;- [1,2,3,4,5,6] contains_all [2,4]; // var1 equals true bool var2 &lt;- [1,2,3,4,5,6] contains_all [2,8]; // var2 equals false bool var3 &lt;- [1::2, 3::4, 5::6] contains_all [1,3]; // var3 equals false bool var4 &lt;- [1::2, 3::4, 5::6] contains_all [2,4]; // var4 equals true 5.4.39.6 See also: contains, contains_any, 5.4.40 contains_any 5.4.40.1 Possible use: string contains_any list —&gt; bool contains_any (string , list) —&gt; bool container contains_any container —&gt; bool contains_any (container , container) —&gt; bool 5.4.40.2 Result: true if the left operand contains one of the elements of the right operand, false otherwise 5.4.40.3 Comment: the definition of contains depends on the container 5.4.40.4 Special cases: if the right operand is nil or empty, contains_any returns false 5.4.40.5 Examples: bool var0 &lt;- &quot;abcabcabc&quot; contains_any [&quot;ca&quot;,&quot;xy&quot;]; // var0 equals true bool var1 &lt;- [1,2,3,4,5,6] contains_any [2,4]; // var1 equals true bool var2 &lt;- [1,2,3,4,5,6] contains_any [2,8]; // var2 equals true bool var3 &lt;- [1::2, 3::4, 5::6] contains_any [1,3]; // var3 equals false bool var4 &lt;- [1::2, 3::4, 5::6] contains_any [2,4]; // var4 equals true 5.4.40.6 See also: contains, contains_all, 5.4.41 contains_edge 5.4.41.1 Possible use: graph contains_edge pair —&gt; bool contains_edge (graph , pair) —&gt; bool graph contains_edge unknown —&gt; bool contains_edge (graph , unknown) —&gt; bool 5.4.41.2 Result: returns true if the graph(left-hand operand) contains the given edge (righ-hand operand), false otherwise 5.4.41.3 Special cases: if the left-hand operand is nil, returns false if the right-hand operand is a pair, returns true if it exists an edge between the two elements of the pair in the graph bool var0 &lt;- graphEpidemio contains_edge (node(0)::node(3)); // var0 equals true 5.4.41.4 Examples: graph graphFromMap &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); bool var2 &lt;- graphFromMap contains_edge link({1,5},{12,45}); // var2 equals true 5.4.41.5 See also: contains_vertex, 5.4.42 contains_vertex 5.4.42.1 Possible use: graph contains_vertex unknown —&gt; bool contains_vertex (graph , unknown) —&gt; bool 5.4.42.2 Result: returns true if the graph(left-hand operand) contains the given vertex (righ-hand operand), false otherwise 5.4.42.3 Special cases: if the left-hand operand is nil, returns false 5.4.42.4 Examples: graph graphFromMap&lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); bool var1 &lt;- graphFromMap contains_vertex {1,5}; // var1 equals true 5.4.42.5 See also: contains_edge, 5.4.43 conversation 5.4.43.1 Possible use: conversation (unknown) —&gt; conversation 5.4.44 convex_hull 5.4.44.1 Possible use: convex_hull (geometry) —&gt; geometry 5.4.44.2 Result: A geometry corresponding to the convex hull of the operand. 5.4.44.3 Examples: geometry var0 &lt;- convex_hull(self); // var0 equals the convex hull of the geometry of the agent applying the operator 5.4.45 copy 5.4.45.1 Possible use: copy (unknown) —&gt; unknown 5.4.45.2 Result: returns a copy of the operand. 5.4.46 copy_between 5.4.46.1 Possible use: copy_between (list, int, int) —&gt; list copy_between (string, int, int) —&gt; string 5.4.46.2 Result: Returns a copy of the first operand between the indexes determined by the second (inclusive) and third operands (exclusive) 5.4.46.3 Special cases: If the first operand is empty, returns an empty object of the same type If the second operand is greater than or equal to the third operand, return an empty object of the same type If the first operand is nil, raises an error 5.4.46.4 Examples: list var0 &lt;- copy_between ([4, 1, 6, 9 ,7], 1, 3); // var0 equals [1, 6] string var1 &lt;- copy_between(&quot;abcabcabc&quot;, 2,6); // var1 equals &quot;cabc&quot; 5.4.47 corR 5.4.47.1 Possible use: container corR container —&gt; unknown corR (container , container) —&gt; unknown 5.4.47.2 Result: returns the Pearson correlation coefficient of two given vectors (right-hand operands) in given variable (left-hand operand). 5.4.47.3 Special cases: if the lengths of two vectors in the right-hand aren’t equal, returns 0 5.4.47.4 Examples: list X &lt;- [1, 2, 3]; list Y &lt;- [1, 2, 4]; unknown var2 &lt;- corR(X, Y); // var2 equals 0.981980506061966 5.4.48 correlation 5.4.48.1 Possible use: container correlation container —&gt; float correlation (container , container) —&gt; float 5.4.48.2 Result: Returns the correlation of two data sequences 5.4.49 cos 5.4.49.1 Possible use: cos (float) —&gt; float cos (int) —&gt; float 5.4.49.2 Result: Returns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated. 5.4.49.3 Special cases: Operand values out of the range [0-359] are normalized. 5.4.49.4 Examples: float var0 &lt;- cos (0); // var0 equals 1.0 float var1 &lt;- cos(360); // var1 equals 1.0 float var2 &lt;- cos(-720); // var2 equals 1.0 5.4.49.5 See also: sin, tan, 5.4.50 cos_rad 5.4.50.1 Possible use: cos_rad (float) —&gt; float 5.4.50.2 Result: Returns the value (in [-1,1]) of the cosinus of the operand (in radians). 5.4.50.3 Special cases: Operand values out of the range [0-359] are normalized. 5.4.50.4 See also: sin, tan, 5.4.51 count 5.4.51.1 Possible use: container count any expression —&gt; int count (container , any expression) —&gt; int 5.4.51.2 Result: returns an int, equal to the number of elements of the left-hand operand that make the right-hand operand evaluate to true. 5.4.51.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the elements. 5.4.51.4 Special cases: if the left-hand operand is nil, count throws an error 5.4.51.5 Examples: int var0 &lt;- [1,2,3,4,5,6,7,8] count (each &gt; 3); // var0 equals 5// Number of nodes of graph g2 without any out edge graph g2 &lt;- graph([]); int var3 &lt;- g2 count (length(g2 out_edges_of each) = 0 ) ; // var3 equals the total number of out edges// Number of agents node with x &gt; 32 int n &lt;- (list(node) count (round(node(each).location.x) &gt; 32); int var6 &lt;- [1::2, 3::4, 5::6] count (each &gt; 4); // var6 equals 1 5.4.51.6 See also: group_by, 5.4.52 covariance 5.4.52.1 Possible use: container covariance container —&gt; float covariance (container , container) —&gt; float 5.4.52.2 Result: Returns the covariance of two data sequences 5.4.53 covers 5.4.53.1 Possible use: geometry covers geometry —&gt; bool covers (geometry , geometry) —&gt; bool 5.4.53.2 Result: A boolean, equal to true if the left-geometry (or agent/point) covers the right-geometry (or agent/point). 5.4.53.3 Special cases: if one of the operand is null, returns false. 5.4.53.4 Examples: bool var0 &lt;- square(5) covers square(2); // var0 equals true 5.4.53.5 See also: disjoint_from, crosses, overlaps, partially_overlaps, touches, 5.4.54 create_map 5.4.54.1 Possible use: list create_map list —&gt; map create_map (list , list) —&gt; map 5.4.54.2 Result: returns a new map using the left operand as keys for the right operand 5.4.54.3 Special cases: if the left operand contains duplicates, create_map throws an error. if both operands have different lengths, choose the minimum length between the two operandsfor the size of the map 5.4.54.4 Examples: map&lt;int,string&gt; var0 &lt;- create_map([0,1,2],[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]); // var0 equals [0::&#39;a&#39;,1::&#39;b&#39;,2::&#39;c&#39;] map&lt;int,float&gt; var1 &lt;- create_map([0,1],[0.1,0.2,0.3]); // var1 equals [0::0.1,1::0.2] map&lt;string,float&gt; var2 &lt;- create_map([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;],[1.0,2.0,3.0]); // var2 equals [&#39;a&#39;::1.0,&#39;b&#39;::2.0,&#39;c&#39;::3.0] 5.4.55 cross 5.4.55.1 Possible use: cross (float) —&gt; geometry float cross float —&gt; geometry cross (float , float) —&gt; geometry 5.4.55.2 Result: A cross, which radius is equal to the first operand and the width of the lines for the second A cross, which radius is equal to the first operand 5.4.55.3 Examples: geometry var0 &lt;- cross(10,2); // var0 equals a geometry as a cross of radius 10, and with a width of 2 for the lines geometry var1 &lt;- cross(10); // var1 equals a geometry as a cross of radius 10 5.4.55.4 See also: around, cone, line, link, norm, point, polygon, polyline, super_ellipse, rectangle, square, circle, ellipse, triangle, 5.4.56 crosses 5.4.56.1 Possible use: geometry crosses geometry —&gt; bool crosses (geometry , geometry) —&gt; bool 5.4.56.2 Result: A boolean, equal to true if the left-geometry (or agent/point) crosses the right-geometry (or agent/point). 5.4.56.3 Special cases: if one of the operand is null, returns false. if one operand is a point, returns false. 5.4.56.4 Examples: bool var0 &lt;- polyline([{10,10},{20,20}]) crosses polyline([{10,20},{20,10}]); // var0 equals true bool var1 &lt;- polyline([{10,10},{20,20}]) crosses {15,15}; // var1 equals true bool var2 &lt;- polyline([{0,0},{25,25}]) crosses polygon([{10,10},{10,20},{20,20},{20,10}]); // var2 equals true 5.4.56.5 See also: disjoint_from, intersects, overlaps, partially_overlaps, touches, 5.4.57 crs 5.4.57.1 Possible use: crs (file) —&gt; string 5.4.57.2 Result: the Coordinate Reference System (CRS) of the GIS file 5.4.57.3 Examples: string var0 &lt;- crs(my_shapefile); // var0 equals the crs of the shapefile 5.4.58 CRS_transform 5.4.58.1 Possible use: CRS_transform (geometry) —&gt; geometry geometry CRS_transform string —&gt; geometry CRS_transform (geometry , string) —&gt; geometry 5.4.58.2 Special cases: returns the geometry corresponding to the transformation of the given geometry by the current CRS (Coordinate Reference System), the one corresponding to the world’s agent one geometry var0 &lt;- CRS_transform(shape); // var0 equals a geometry corresponding to the agent geometry transformed into the current CRS returns the geometry corresponding to the transformation of the given geometry by the left operand CRS (Coordinate Reference System) geometry var1 &lt;- shape CRS_transform(&quot;EPSG:4326&quot;); // var1 equals a geometry corresponding to the agent geometry transformed into the EPSG:4326 CRS 5.4.59 csv_file 5.4.59.1 Possible use: csv_file (string) —&gt; file 5.4.59.2 Result: Constructs a file of type csv. Allowed extensions are limited to csv, tsv 5.4.60 cube 5.4.60.1 Possible use: cube (float) —&gt; geometry 5.4.60.2 Result: A cube geometry which side size is equal to the operand. 5.4.60.3 Comment: the center of the cube is by default the location of the current agent in which has been called this operator. 5.4.60.4 Special cases: returns nil if the operand is nil. 5.4.60.5 Examples: geometry var0 &lt;- cube(10); // var0 equals a geometry as a square of side size 10. 5.4.60.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, rectangle, triangle, 5.4.61 curve 5.4.61.1 Possible use: curve (point, point, float) —&gt; geometry curve (point, point, point) —&gt; geometry curve (point, point, point, int) —&gt; geometry curve (point, point, float, bool) —&gt; geometry curve (point, point, float, float) —&gt; geometry curve (point, point, point, point) —&gt; geometry curve (point, point, float, int, float) —&gt; geometry curve (point, point, point, point, int) —&gt; geometry curve (point, point, float, bool, int) —&gt; geometry curve (point, point, float, bool, int, float) —&gt; geometry curve (point, point, float, int, float, float) —&gt; geometry 5.4.61.2 Result: A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of the given number of points, considering the given rotation angle (90 = along the z axis). A cubic Bezier curve geometry built from the four given points composed of a given number of points. A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of 10 points. A quadratic Bezier curve geometry built from the three given points composed of a given numnber of points. A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of 10 points - the last boolean is used to specified if it is the right side. A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius considering the given rotation angle (90 = along the z axis). A quadratic Bezier curve geometry built from the three given points composed of 10 points. A cubic Bezier curve geometry built from the four given points composed of 10 points. A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of the given number of points - the boolean is used to specified if it is the right side and the last value to indicate where is the inflection point (between 0.0 and 1.0 - default 0.5). A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of the given number of points, considering the given inflection point (between 0.0 and 1.0 - default 0.5), and the given rotation angle (90 = along the z axis). A cubic Bezier curve geometry built from the two given points with the given coefficient for the radius and composed of the given number of points - the boolean is used to specified if it is the right side. 5.4.61.3 Special cases: if the operand is nil, returns nil if the operand is nil, returns nil if the last operand (number of points) is inferior to 2, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the last operand (number of points) is inferior to 2, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the operand is nil, returns nil if the operand is nil, returns nil 5.4.61.4 Examples: geometry var0 &lt;- curve({0,0},{10,10}, 0.5, 100, 90); // var0 equals a cubic Bezier curve geometry composed of 100 points from p0 to p1 at the right side. geometry var1 &lt;- curve({0,0}, {0,10}, {10,10}); // var1 equals a cubic Bezier curve geometry composed of 10 points from p0 to p3. geometry var2 &lt;- curve({0,0},{10,10}, 0.5); // var2 equals a cubic Bezier curve geometry composed of 10 points from p0 to p1. geometry var3 &lt;- curve({0,0}, {0,10}, {10,10}, 20); // var3 equals a quadratic Bezier curve geometry composed of 20 points from p0 to p2. geometry var4 &lt;- curve({0,0},{10,10}, 0.5, false); // var4 equals a cubic Bezier curve geometry composed of 10 points from p0 to p1 at the left side. geometry var5 &lt;- curve({0,0},{10,10}, 0.5, 90); // var5 equals a cubic Bezier curve geometry composed of 100 points from p0 to p1 at the right side. geometry var6 &lt;- curve({0,0}, {0,10}, {10,10}); // var6 equals a quadratic Bezier curve geometry composed of 10 points from p0 to p2. geometry var7 &lt;- curve({0,0}, {0,10}, {10,10}); // var7 equals a cubic Bezier curve geometry composed of 10 points from p0 to p3. geometry var8 &lt;- curve({0,0},{10,10}, 0.5, false, 100, 0.8); // var8 equals a cubic Bezier curve geometry composed of 100 points from p0 to p1 at the right side. geometry var9 &lt;- curve({0,0},{10,10}, 0.5, 100, 0.8, 90); // var9 equals a cubic Bezier curve geometry composed of 100 points from p0 to p1 at the right side. geometry var10 &lt;- curve({0,0},{10,10}, 0.5, false, 100); // var10 equals a cubic Bezier curve geometry composed of 100 points from p0 to p1 at the right side. 5.4.61.5 See also: around, circle, cone, link, norm, point, polygone, rectangle, square, triangle, line, 5.4.62 cylinder 5.4.62.1 Possible use: float cylinder float —&gt; geometry cylinder (float , float) —&gt; geometry 5.4.62.2 Result: A cylinder geometry which radius is equal to the operand. 5.4.62.3 Comment: the center of the cylinder is by default the location of the current agent in which has been called this operator. 5.4.62.4 Special cases: returns a point if the operand is lower or equal to 0. 5.4.62.5 Examples: geometry var0 &lt;- cylinder(10,10); // var0 equals a geometry as a circle of radius 10. 5.4.62.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, "],
["operators-d-to-h.html", "Chapter 6 Operators (D to H) 6.1 Definition 6.2 Priority between operators 6.3 Using actions as operators 6.4 Operators", " Chapter 6 Operators (D to H) This file is automatically generated from java files. Do Not Edit It. 6.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 6.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 6.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 6.4 Operators 6.4.1 date 6.4.1.1 Possible use: string date string —&gt; date date (string , string) —&gt; date date (string, string, string) —&gt; date 6.4.1.2 Result: converts a string to a date following a custom pattern and a specific locale (e.g. ‘fr’, ‘en’…). The pattern can use “%Y %M %N %D %E %h %m %s %z” for parsing years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date &amp; time formats (similar to date(‘…’) in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences converts a string to a date following a custom pattern. The pattern can use “%Y %M %N %D %E %h %m %s %z” for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date &amp; time formats (similar to date(‘…’) in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences 6.4.1.3 Examples: date d &lt;- date(&quot;1999-january-30&quot;, &#39;yyyy-MMMM-dd&#39;, &#39;en&#39;); date den &lt;- date(&quot;1999-12-30&quot;, &#39;yyyy-MM-dd&#39;); 6.4.2 dbscan 6.4.2.1 Possible use: dbscan (list, float, int) —&gt; list&lt;list&gt; 6.4.2.2 Result: returns the list of clusters (list of instance indices) computed with the dbscan (density-based spatial clustering of applications with noise) algorithm from the first operand data according to the maximum radius of the neighborhood to be considered (eps) and the minimum number of points needed for a cluster (minPts). Usage: dbscan(data,eps,minPoints) 6.4.2.3 Special cases: if the lengths of two vectors in the right-hand aren’t equal, returns 0 6.4.2.4 Examples: list&lt;list&gt; var0 &lt;- dbscan ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],10,2); // var0 equals [] 6.4.3 dead 6.4.3.1 Possible use: dead (agent) —&gt; bool 6.4.3.2 Result: true if the agent is dead (or null), false otherwise. 6.4.3.3 Examples: bool var0 &lt;- dead(agent_A); // var0 equals true or false 6.4.4 degree_of 6.4.4.1 Possible use: graph degree_of unknown —&gt; int degree_of (graph , unknown) —&gt; int 6.4.4.2 Result: returns the degree (in+out) of a vertex (right-hand operand) in the graph given as left-hand operand. 6.4.4.3 Examples: int var1 &lt;- graphFromMap degree_of (node(3)); // var1 equals 3 6.4.4.4 See also: in_degree_of, out_degree_of, 6.4.5 dem 6.4.5.1 Possible use: dem (file) —&gt; geometry file dem file —&gt; geometry dem (file , file) —&gt; geometry file dem float —&gt; geometry dem (file , float) —&gt; geometry dem (file, file, float) —&gt; geometry 6.4.5.2 Result: A polygon that is equivalent to the surface of the texture 6.4.5.3 Examples: geometry var0 &lt;- dem(dem,texture); // var0 equals a geometry as a rectangle of weight and height equal to the texture. geometry var1 &lt;- dem(dem); // var1 equals returns a geometry as a rectangle of width and height equal to the texture. geometry var2 &lt;- dem(dem,texture,z_factor); // var2 equals a geometry as a rectangle of width and height equal to the texture. geometry var3 &lt;- dem(dem,z_factor); // var3 equals a geometry as a rectangle of weight and height equal to the texture. 6.4.6 det Same signification as determinant 6.4.7 determinant 6.4.7.1 Possible use: determinant (matrix) —&gt; float 6.4.7.2 Result: The determinant of the given matrix 6.4.7.3 Examples: float var0 &lt;- determinant(matrix([[1,2],[3,4]])); // var0 equals -2 6.4.8 diff 6.4.8.1 Possible use: float diff float —&gt; float diff (float , float) —&gt; float 6.4.8.2 Result: A placeholder function for expressing equations 6.4.9 diff2 6.4.9.1 Possible use: float diff2 float —&gt; float diff2 (float , float) —&gt; float 6.4.9.2 Result: A placeholder function for expressing equations 6.4.10 directed 6.4.10.1 Possible use: directed (graph) —&gt; graph 6.4.10.2 Result: the operand graph becomes a directed graph. 6.4.10.3 Comment: the operator alters the operand graph, it does not create a new one. 6.4.10.4 See also: undirected, 6.4.11 direction_between 6.4.11.1 Possible use: topology direction_between container&lt;geometry&gt; —&gt; float direction_between (topology , container&lt;geometry&gt;) —&gt; float 6.4.11.2 Result: A direction (in degree) between a list of two geometries (geometries, agents, points) considering a topology. 6.4.11.3 Examples: float var0 &lt;- my_topology direction_between [ag1, ag2]; // var0 equals the direction between ag1 and ag2 considering the topology my_topology 6.4.11.4 See also: towards, direction_to, distance_to, distance_between, path_between, path_to, 6.4.12 direction_to Same signification as towards 6.4.13 disjoint_from 6.4.13.1 Possible use: geometry disjoint_from geometry —&gt; bool disjoint_from (geometry , geometry) —&gt; bool 6.4.13.2 Result: A boolean, equal to true if the left-geometry (or agent/point) is disjoints from the right-geometry (or agent/point). 6.4.13.3 Special cases: if one of the operand is null, returns true. if one operand is a point, returns false if the point is included in the geometry. 6.4.13.4 Examples: bool var0 &lt;- polyline([{10,10},{20,20}]) disjoint_from polyline([{15,15},{25,25}]); // var0 equals false bool var1 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{15,15},{15,25},{25,25},{25,15}]); // var1 equals false bool var2 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {15,15}; // var2 equals false bool var3 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {25,25}; // var3 equals true bool var4 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{35,35},{35,45},{45,45},{45,35}]); // var4 equals true 6.4.13.5 See also: intersects, crosses, overlaps, partially_overlaps, touches, 6.4.14 distance_between 6.4.14.1 Possible use: topology distance_between container&lt;geometry&gt; —&gt; float distance_between (topology , container&lt;geometry&gt;) —&gt; float 6.4.14.2 Result: A distance between a list of geometries (geometries, agents, points) considering a topology. 6.4.14.3 Examples: float var0 &lt;- my_topology distance_between [ag1, ag2, ag3]; // var0 equals the distance between ag1, ag2 and ag3 considering the topology my_topology 6.4.14.4 See also: towards, direction_to, distance_to, direction_between, path_between, path_to, 6.4.15 distance_to 6.4.15.1 Possible use: geometry distance_to geometry —&gt; float distance_to (geometry , geometry) —&gt; float point distance_to point —&gt; float distance_to (point , point) —&gt; float 6.4.15.2 Result: A distance between two geometries (geometries, agents or points) considering the topology of the agent applying the operator. 6.4.15.3 Examples: float var0 &lt;- ag1 distance_to ag2; // var0 equals the distance between ag1 and ag2 considering the topology of the agent applying the operator 6.4.15.4 See also: towards, direction_to, distance_between, direction_between, path_between, path_to, 6.4.16 distinct 6.4.16.1 Possible use: distinct (container) —&gt; list 6.4.16.2 Result: produces a set from the elements of the operand (i.e. a list without duplicated elements) 6.4.16.3 Special cases: if the operand is nil, remove_duplicates returns nil if the operand is a graph, remove_duplicates returns the set of nodes if the operand is a matrix, remove_duplicates returns a matrix without duplicated row if the operand is a map, remove_duplicates returns the set of values without duplicate list var1 &lt;- remove_duplicates([1::3,2::4,3::3,5::7]); // var1 equals [3,4,7] 6.4.16.4 Examples: list var0 &lt;- remove_duplicates([3,2,5,1,2,3,5,5,5]); // var0 equals [3,2,5,1] 6.4.17 distribution_of 6.4.17.1 Possible use: distribution_of (container) —&gt; map container distribution_of int —&gt; map distribution_of (container , int) —&gt; map distribution_of (container, int, float, float) —&gt; map 6.4.17.2 Result: Discretize a list of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax) 6.4.17.3 Examples: map var0 &lt;- distribution_of([1,1,2,12.5]); // var0 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) map var1 &lt;- distribution_of([1,1,2,12.5]); // var1 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) map var2 &lt;- distribution_of([1,1,2,12.5],10); // var2 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) 6.4.17.4 See also: as_map, 6.4.18 distribution2d_of 6.4.18.1 Possible use: container distribution2d_of container —&gt; map distribution2d_of (container , container) —&gt; map distribution2d_of (container, container, int, int) —&gt; map distribution2d_of (container, container, int, float, float, int, float, float) —&gt; map 6.4.18.2 Result: Discretize two lists of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax) 6.4.18.3 Examples: map var0 &lt;- distribution_of([1,1,2,12.5],10); // var0 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) map var1 &lt;- distribution2d_of([1,1,2,12.5]); // var1 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) map var2 &lt;- distribution_of([1,1,2,12.5],10); // var2 equals map([&#39;values&#39;::[2,1,0,0,0,0,1,0,0,0],&#39;legend&#39;::[&#39;[0.0:2.0]&#39;,&#39;[2.0:4.0]&#39;,&#39;[4.0:6.0]&#39;,&#39;[6.0:8.0]&#39;,&#39;[8.0:10.0]&#39;,&#39;[10.0:12.0]&#39;,&#39;[12.0:14.0]&#39;,&#39;[14.0:16.0]&#39;,&#39;[16.0:18.0]&#39;,&#39;[18.0:20.0]&#39;],&#39;parlist&#39;::[1,0]]) 6.4.18.4 See also: as_map, 6.4.19 div 6.4.19.1 Possible use: int div float —&gt; int div (int , float) —&gt; int float div float —&gt; int div (float , float) —&gt; int float div int —&gt; int div (float , int) —&gt; int int div int —&gt; int div (int , int) —&gt; int 6.4.19.2 Result: Returns the truncation of the division of the left-hand operand by the right-hand operand. 6.4.19.3 Special cases: if the right-hand operand is equal to zero, raises an exception. if the right-hand operand is equal to zero, raises an exception. if the right-hand operand is equal to zero, raises an exception. 6.4.19.4 Examples: int var0 &lt;- 40 div 4.1; // var0 equals 9 int var1 &lt;- 40.1 div 4.5; // var1 equals 8 int var2 &lt;- 40.5 div 3; // var2 equals 13 int var3 &lt;- 40 div 3; // var3 equals 13 6.4.19.5 See also: mod, 6.4.20 dnorm Same signification as normal_density 6.4.21 dtw 6.4.21.1 Possible use: list dtw list —&gt; float dtw (list , list) —&gt; float dtw (list, list, int) —&gt; float 6.4.21.2 Result: returns the dynamic time warping between the two series of value with Sakoe-Chiba band (radius: the window width of Sakoe-Chiba band) returns the dynamic time warping between the two series of value 6.4.21.3 Examples: float var0 &lt;- dtw([10.0,5.0,1.0, 3.0],[1.0,10.0,5.0,1.0], 2); // var0 equals 2.0 float var1 &lt;- dtw([10.0,5.0,1.0, 3.0],[1.0,10.0,5.0,1.0]); // var1 equals 2 6.4.22 durbin_watson 6.4.22.1 Possible use: durbin_watson (container) —&gt; float 6.4.22.2 Result: Durbin-Watson computation 6.4.23 dxf_file 6.4.23.1 Possible use: dxf_file (string) —&gt; file 6.4.23.2 Result: Constructs a file of type dxf. Allowed extensions are limited to dxf 6.4.24 edge 6.4.24.1 Possible use: edge (unknown) —&gt; unknown edge (pair) —&gt; unknown pair edge float —&gt; unknown edge (pair , float) —&gt; unknown unknown edge unknown —&gt; unknown edge (unknown , unknown) —&gt; unknown unknown edge float —&gt; unknown edge (unknown , float) —&gt; unknown edge (unknown, unknown, unknown) —&gt; unknown edge (pair, unknown, float) —&gt; unknown edge (unknown, unknown, float) —&gt; unknown edge (unknown, unknown, unknown, float) —&gt; unknown 6.4.25 edge_between 6.4.25.1 Possible use: graph edge_between pair —&gt; unknown edge_between (graph , pair) —&gt; unknown 6.4.25.2 Result: returns the edge linking two nodes 6.4.25.3 Examples: unknown var0 &lt;- graphFromMap edge_between node1::node2; // var0 equals edge1 6.4.25.4 See also: out_edges_of, in_edges_of, 6.4.26 edge_betweenness 6.4.26.1 Possible use: edge_betweenness (graph) —&gt; map 6.4.26.2 Result: returns a map containing for each edge (key), its betweenness centrality (value): number of shortest paths passing through each edge 6.4.26.3 Examples: graph graphEpidemio &lt;- graph([]); map var1 &lt;- edge_betweenness(graphEpidemio); // var1 equals the edge betweenness index of the graph 6.4.27 edges 6.4.27.1 Possible use: edges (container) —&gt; container 6.4.28 eigenvalues 6.4.28.1 Possible use: eigenvalues (matrix) —&gt; list&lt;float&gt; 6.4.28.2 Result: The eigen values (matrix) of the given matrix 6.4.28.3 Examples: list&lt;float&gt; var0 &lt;- eigenvalues(matrix([[5,-3],[6,-4]])); // var0 equals [2.0000000000000004,-0.9999999999999998] 6.4.29 electre_DM 6.4.29.1 Possible use: electre_DM (msi.gama.util.IList&lt;java.util.List&gt;, msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;, float) —&gt; int 6.4.29.2 Result: The index of the best candidate according to a method based on the ELECTRE methods. The principle of the ELECTRE methods is to compare the possible candidates by pair. These methods analyses the possible outranking relation existing between two candidates. An candidate outranks another if this one is at least as good as the other one. The ELECTRE methods are based on two concepts: the concordance and the discordance. The concordance characterizes the fact that, for an outranking relation to be validated, a sufficient majority of criteria should be in favor of this assertion. The discordance characterizes the fact that, for an outranking relation to be validated, none of the criteria in the minority should oppose too strongly this assertion. These two conditions must be true for validating the outranking assertion. More information about the ELECTRE methods can be found in [http://www.springerlink.com/content/g367r44322876223/ Figueira, J., Mousseau, V., Roy, B.: ELECTRE Methods. In: Figueira, J., Greco, S., and Ehrgott, M., (Eds.), Multiple Criteria Decision Analysis: State of the Art Surveys, Springer, New York, 133–162 (2005)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fives elements: a name, a weight, a preference value (p), an indifference value (q) and a veto value (v). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. The veto value represents the threshold from which the difference between two criterion values disqualifies the candidate that obtained the smaller value; the last operand is the fuzzy cut. 6.4.29.3 Special cases: returns -1 is the list of candidates is nil or empty 6.4.29.4 Examples: int var0 &lt;- electre_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: false]],0.7); // var0 equals 0 6.4.29.5 See also: weighted_means_DM, promethee_DM, evidence_theory_DM, 6.4.30 ellipse 6.4.30.1 Possible use: float ellipse float —&gt; geometry ellipse (float , float) —&gt; geometry 6.4.30.2 Result: An ellipse geometry which x-radius is equal to the first operand and y-radius is equal to the second operand 6.4.30.3 Comment: the center of the ellipse is by default the location of the current agent in which has been called this operator. 6.4.30.4 Special cases: returns a point if both operands are lower or equal to 0, a line if only one is. 6.4.30.5 Examples: geometry var0 &lt;- ellipse(10, 10); // var0 equals a geometry as an ellipse of width 10 and height 10. 6.4.30.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, circle, squircle, triangle, 6.4.31 emotion 6.4.31.1 Possible use: emotion (any) —&gt; emotion 6.4.31.2 Result: Casts the operand into the type emotion 6.4.32 empty 6.4.32.1 Possible use: empty (string) —&gt; bool empty (container&lt;KeyType,ValueType&gt;) —&gt; bool 6.4.32.2 Result: true if the operand is empty, false otherwise. 6.4.32.3 Comment: the empty operator behavior depends on the nature of the operand 6.4.32.4 Special cases: if it is a map, empty returns true if the map contains no key-value mappings, and false otherwise if it is a file, empty returns true if the content of the file (that is also a container) is empty, and false otherwise if it is a population, empty returns true if there is no agent in the population, and false otherwise if it is a graph, empty returns true if it contains no vertex and no edge, and false otherwise if it is a matrix of int, float or object, it will return true if all elements are respectively 0, 0.0 or null, and false otherwise if it is a matrix of geometry, it will return true if the matrix contains no cell, and false otherwise if it is a string, empty returns true if the string does not contain any character, and false otherwise bool var0 &lt;- empty (&#39;abced&#39;); // var0 equals false if it is a list, empty returns true if there is no element in the list, and false otherwise bool var1 &lt;- empty([]); // var1 equals true 6.4.33 enlarged_by Same signification as + 6.4.34 envelope 6.4.34.1 Possible use: envelope (unknown) —&gt; geometry 6.4.34.2 Result: A 3D geometry that represents the box that surrounds the geometries or the surface described by the arguments. More general than geometry(arguments).envelope, as it allows to pass int, double, point, image files, shape files, asc files, or any list combining these arguments, in which case the envelope will be correctly expanded. If an envelope cannot be determined from the arguments, a default one of dimensions (0,100, 0, 100, 0, 100) is returned 6.4.35 eval_gaml 6.4.35.1 Possible use: eval_gaml (string) —&gt; unknown 6.4.35.2 Result: evaluates the given GAML string. 6.4.35.3 Examples: unknown var0 &lt;- eval_gaml(&quot;2+3&quot;); // var0 equals 5 6.4.36 eval_when 6.4.36.1 Possible use: eval_when (BDIPlan) —&gt; bool 6.4.36.2 Result: evaluate the facet when of a given plan 6.4.36.3 Examples: eval_when(plan1) 6.4.37 evaluate_sub_model 6.4.37.1 Possible use: msi.gama.kernel.experiment.IExperimentAgent evaluate_sub_model string —&gt; unknown evaluate_sub_model (msi.gama.kernel.experiment.IExperimentAgent , string) —&gt; unknown 6.4.37.2 Result: Load a submodel 6.4.37.3 Comment: loaded submodel 6.4.38 even 6.4.38.1 Possible use: even (int) —&gt; bool 6.4.38.2 Result: Returns true if the operand is even and false if it is odd. 6.4.38.3 Special cases: if the operand is equal to 0, it returns true. if the operand is a float, it is truncated before 6.4.38.4 Examples: bool var0 &lt;- even (3); // var0 equals false bool var1 &lt;- even(-12); // var1 equals true 6.4.39 every 6.4.39.1 Possible use: every (int) —&gt; bool every (any expression) —&gt; bool list every int —&gt; list every (list , int) —&gt; list msi.gama.util.GamaDateInterval every any expression —&gt; msi.gama.util.IList&lt;msi.gama.util.GamaDate&gt; every (msi.gama.util.GamaDateInterval , any expression) —&gt; msi.gama.util.IList&lt;msi.gama.util.GamaDate&gt; 6.4.39.2 Result: true every operand * cycle, false otherwise Retrieves elements from the first argument every step (second argument) elements. Raises an error if the step is negative or equal to zero expects a frequency (expressed in seconds of simulated time) as argument. Will return true every time the current_date matches with this frequency applies a step to an interval of dates defined by ‘date1 to date2’ 6.4.39.3 Comment: the value of the every operator depends on the cycle. It can be used to do something every x cycle.Used to do something at regular intervals of time. Can be used in conjunction with ‘since’, ‘after’, ‘before’, ‘until’ or ‘between’, so that this computation only takes place in the temporal segment defined by these operators. In all cases, the starting_date of the model is used as a reference starting point 6.4.39.4 Examples: if every(2#cycle) {write &quot;the cycle number is even&quot;;} else {write &quot;the cycle number is odd&quot;;} reflex when: every(2#days) since date(&#39;2000-01-01&#39;) { .. } state a { transition to: b when: every(2#mn);} state b { transition to: a when: every(30#s);} // This oscillatory behavior will use the starting_date of the model as its starting point in time (date(&#39;2000-01-01&#39;) to date(&#39;2010-01-01&#39;)) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval 6.4.39.5 See also: since, after, to, 6.4.40 every_cycle Same signification as every 6.4.41 evidence_theory_DM 6.4.41.1 Possible use: msi.gama.util.IList&lt;java.util.List&gt; evidence_theory_DM msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt; —&gt; int evidence_theory_DM (msi.gama.util.IList&lt;java.util.List&gt; , msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;) —&gt; int evidence_theory_DM (msi.gama.util.IList&lt;java.util.List&gt;, msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;, bool) —&gt; int 6.4.41.2 Result: The index of the best candidate according to a method based on the Evidence theory. This theory, which was proposed by Shafer ([http://www.glennshafer.com/books/amte.html Shafer G (1976) A mathematical theory of evidence, Princeton University Press]), is based on the work of Dempster ([http://projecteuclid.org/DPubS?service=UI&amp;version=1.0&amp;verb=Display&amp;handle=euclid.aoms/1177698950 Dempster A (1967) Upper and lower probabilities induced by multivalued mapping. Annals of Mathematical Statistics, vol. 38, pp. 325–339]) on lower and upper probability distributions. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains seven elements: a name, a first threshold s1, a second threshold s2, a value for the assertion “this candidate is the best” at threshold s1 (v1p), a value for the assertion “this candidate is the best” at threshold s2 (v2p), a value for the assertion “this candidate is not the best” at threshold s1 (v1c), a value for the assertion “this candidate is not the best” at threshold s2 (v2c). v1p, v2p, v1c and v2c have to been defined in order that: v1p + v1c &lt;= 1.0; v2p + v2c &lt;= 1.0.; the last operand allows to use a simple version of this multi-criteria decision making method (simple if true) 6.4.41.3 Special cases: if the operator is used with only 2 operands (the candidates and the criteria), the last parameter (use simple method) is set to true returns -1 is the list of candidates is nil or empty 6.4.41.4 Examples: int var0 &lt;- evidence_theory_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;s1&quot; :: 0.0,&quot;s2&quot;::1.0, &quot;v1p&quot;::0.0, &quot;v2p&quot;::1.0, &quot;v1c&quot;::0.0, &quot;v2c&quot;::0.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;, &quot;s1&quot; :: 0.0,&quot;s2&quot;::1.0, &quot;v1p&quot;::0.0, &quot;v2p&quot;::1.0, &quot;v1c&quot;::0.0, &quot;v2c&quot;::0.0, &quot;maximize&quot; :: true]], true); // var0 equals 0 6.4.41.5 See also: weighted_means_DM, electre_DM, 6.4.42 exp 6.4.42.1 Possible use: exp (float) —&gt; float exp (int) —&gt; float 6.4.42.2 Result: Returns Euler’s number e raised to the power of the operand. 6.4.42.3 Special cases: the operand is casted to a float before being evaluated. the operand is casted to a float before being evaluated. 6.4.42.4 Examples: float var0 &lt;- exp (0); // var0 equals 1.0 6.4.42.5 See also: ln, 6.4.43 fact 6.4.43.1 Possible use: fact (int) —&gt; float 6.4.43.2 Result: Returns the factorial of the operand. 6.4.43.3 Special cases: if the operand is less than 0, fact returns 0. 6.4.43.4 Examples: float var0 &lt;- fact(4); // var0 equals 24 6.4.44 farthest_point_to 6.4.44.1 Possible use: geometry farthest_point_to point —&gt; point farthest_point_to (geometry , point) —&gt; point 6.4.44.2 Result: the farthest point of the left-operand to the left-point. 6.4.44.3 Examples: point var0 &lt;- geom farthest_point_to(pt); // var0 equals the farthest point of geom to pt 6.4.44.4 See also: any_location_in, any_point_in, closest_points_with, points_at, 6.4.45 farthest_to 6.4.45.1 Possible use: container&lt;agent&gt; farthest_to geometry —&gt; geometry farthest_to (container&lt;agent&gt; , geometry) —&gt; geometry 6.4.45.2 Result: An agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the farthest to the operand (casted as a geometry). 6.4.45.3 Comment: the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology. 6.4.45.4 Examples: geometry var0 &lt;- [ag1, ag2, ag3] closest_to(self); // var0 equals return the farthest agent among ag1, ag2 and ag3 to the agent applying the operator.(species1 + species2) closest_to self 6.4.45.5 See also: neighbors_at, neighbors_of, inside, overlapping, agents_overlapping, agents_inside, agent_closest_to, closest_to, agent_farthest_to, 6.4.46 file 6.4.46.1 Possible use: file (string) —&gt; file string file container —&gt; file file (string , container) —&gt; file 6.4.46.2 Result: Creates a file in read/write mode, setting its contents to the container passed in parameter opens a file in read only mode, creates a GAML file object, and tries to determine and store the file content in the contents attribute. 6.4.46.3 Comment: The type of container to pass will depend on the type of file (see the management of files in the documentation). Can be used to copy files since files are considered as containers. For example: save file(‘image_copy.png’, file(‘image.png’)); will copy image.png to image_copy.pngThe file should have a supported extension, see file type definition for supported file extensions. 6.4.46.4 Special cases: If the specified string does not refer to an existing file, an exception is risen when the variable is used. 6.4.46.5 Examples: let fileT type: file value: file(&quot;../includes/Stupid_Cell.Data&quot;); // fileT represents the file &quot;../includes/Stupid_Cell.Data&quot; // fileT.contents here contains a matrix storing all the data of the text file 6.4.46.6 See also: folder, new_folder, 6.4.47 file 6.4.47.1 Possible use: file (any) —&gt; file 6.4.47.2 Result: Casts the operand into the type file 6.4.48 file_exists 6.4.48.1 Possible use: file_exists (string) —&gt; bool 6.4.48.2 Result: Test whether the parameter is the path to an existing file. 6.4.49 first 6.4.49.1 Possible use: first (container&lt;KeyType,ValueType&gt;) —&gt; ValueType first (string) —&gt; string int first container —&gt; list first (int , container) —&gt; list 6.4.49.2 Result: the first value of the operand 6.4.49.3 Comment: the first operator behavior depends on the nature of the operand 6.4.49.4 Special cases: if it is a map, first returns the first value of the first pair (in insertion order) if it is a file, first returns the first element of the content of the file (that is also a container) if it is a population, first returns the first agent of the population if it is a graph, first returns the first edge (in creation order) if it is a matrix, first returns the element at {0,0} in the matrix for a matrix of int or float, it will return 0 if the matrix is empty for a matrix of object or geometry, it will return nil if the matrix is empty if it is a list, first returns the first element of the list, or nil if the list is empty int var0 &lt;- first ([1, 2, 3]); // var0 equals 1 if it is a string, first returns a string composed of its first character string var1 &lt;- first (&#39;abce&#39;); // var1 equals &#39;a&#39; 6.4.49.5 See also: last, 6.4.50 first_of Same signification as first 6.4.51 first_with 6.4.51.1 Possible use: container first_with any expression —&gt; unknown first_with (container , any expression) —&gt; unknown 6.4.51.2 Result: the first element of the left-hand operand that makes the right-hand operand evaluate to true. 6.4.51.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 6.4.51.4 Special cases: if the left-hand operand is nil, first_with throws an error. If there is no element that satisfies the condition, it returns nil if the left-operand is a map, the keyword each will contain each value unknown var4 &lt;- [1::2, 3::4, 5::6] first_with (each &gt;= 4); // var4 equals 4 unknown var5 &lt;- [1::2, 3::4, 5::6].pairs first_with (each.value &gt;= 4); // var5 equals (3::4) 6.4.51.5 Examples: unknown var0 &lt;- [1,2,3,4,5,6,7,8] first_with (each &gt; 3); // var0 equals 4 unknown var2 &lt;- g2 first_with (length(g2 out_edges_of each) = 0); // var2 equals node9 unknown var3 &lt;- (list(node) first_with (round(node(each).location.x) &gt; 32); // var3 equals node2 6.4.51.6 See also: group_by, last_with, where, 6.4.52 flip 6.4.52.1 Possible use: flip (float) —&gt; bool 6.4.52.2 Result: true or false given the probability represented by the operand 6.4.52.3 Special cases: flip 0 always returns false, flip 1 true 6.4.52.4 Examples: bool var0 &lt;- flip (0.66666); // var0 equals 2/3 chances to return true. 6.4.52.5 See also: rnd, 6.4.53 float 6.4.53.1 Possible use: float (any) —&gt; float 6.4.53.2 Result: Casts the operand into the type float 6.4.54 floor 6.4.54.1 Possible use: floor (float) —&gt; float 6.4.54.2 Result: Maps the operand to the largest previous following integer, i.e. the largest integer not greater than x. 6.4.54.3 Examples: float var0 &lt;- floor(3); // var0 equals 3.0 float var1 &lt;- floor(3.5); // var1 equals 3.0 float var2 &lt;- floor(-4.7); // var2 equals -5.0 6.4.54.4 See also: ceil, round, 6.4.55 folder 6.4.55.1 Possible use: folder (string) —&gt; file 6.4.55.2 Result: opens an existing repository 6.4.55.3 Special cases: If the specified string does not refer to an existing repository, an exception is risen. 6.4.55.4 Examples: file dirT &lt;- folder(&quot;../includes/&quot;); // dirT represents the repository &quot;../includes/&quot; // dirT.contents here contains the list of the names of included files 6.4.55.5 See also: file, new_folder, 6.4.56 font 6.4.56.1 Possible use: font (string, int, int) —&gt; font 6.4.56.2 Result: Creates a new font, by specifying its name (either a font face name like ‘Lucida Grande Bold’ or ‘Helvetica’, or a logical name like ‘Dialog’, ‘SansSerif’, ‘Serif’, etc.), a size in points and a style, either #bold, #italic or #plain or a combination (addition) of them. 6.4.56.3 Examples: font var0 &lt;- font (&#39;Helvetica Neue&#39;,12, #bold + #italic); // var0 equals a bold and italic face of the Helvetica Neue family 6.4.57 frequency_of 6.4.57.1 Possible use: container frequency_of any expression —&gt; map frequency_of (container , any expression) —&gt; map 6.4.57.2 Result: Returns a map with keys equal to the application of the right-hand argument (like collect) and values equal to the frequency of this key (i.e. how many times it has been obtained) 6.4.57.3 Examples: map var0 &lt;- [ag1, ag2, ag3, ag4] frequency_of each.size; // var0 equals the different sizes as keys and the number of agents of this size as values 6.4.57.4 See also: as_map, 6.4.58 from Same signification as since 6.4.59 fuzzy_choquet_DM 6.4.59.1 Possible use: fuzzy_choquet_DM (msi.gama.util.IList&lt;java.util.List&gt;, list&lt;string&gt;, map) —&gt; int 6.4.59.2 Result: The index of the candidate that maximizes the Fuzzy Choquet Integral value. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of string); the third operand the weights of each sub-set of criteria (map with list for key and float for value) 6.4.59.3 Special cases: returns -1 is the list of candidates is nil or empty 6.4.59.4 Examples: int var0 &lt;- fuzzy_choquet_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [&quot;utility&quot;, &quot;price&quot;, &quot;size&quot;],[[&quot;utility&quot;]::0.5,[&quot;size&quot;]::0.1,[&quot;price&quot;]::0.4,[&quot;utility&quot;, &quot;price&quot;]::0.55]); // var0 equals 0 6.4.59.5 See also: promethee_DM, electre_DM, evidence_theory_DM, 6.4.60 fuzzy_kappa 6.4.60.1 Possible use: fuzzy_kappa (list&lt;agent&gt;, list, list, list&lt;float&gt;, list, matrix&lt;float&gt;, float) —&gt; float fuzzy_kappa (list&lt;agent&gt;, list, list, list&lt;float&gt;, list, matrix&lt;float&gt;, float, list) —&gt; float 6.4.60.2 Result: fuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling &amp; Software, 21 fuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling &amp; Software, 21 6.4.60.3 Examples: fuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2) fuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0]) 6.4.61 fuzzy_kappa_sim 6.4.61.1 Possible use: fuzzy_kappa_sim (list&lt;agent&gt;, list, list, list, list&lt;float&gt;, list, matrix&lt;float&gt;, float) —&gt; float fuzzy_kappa_sim (list&lt;agent&gt;, list, list, list, list&lt;float&gt;, list, matrix&lt;float&gt;, float, list) —&gt; float 6.4.61.2 Result: fuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, fuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, 6.4.61.3 Examples: fuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2) fuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0]) 6.4.62 gaml_file 6.4.62.1 Possible use: gaml_file (string) —&gt; file 6.4.62.2 Result: Constructs a file of type gaml. Allowed extensions are limited to gaml, experiment 6.4.63 gaml_type 6.4.63.1 Possible use: gaml_type (any) —&gt; gaml_type 6.4.63.2 Result: Casts the operand into the type gaml_type 6.4.64 gamma 6.4.64.1 Possible use: gamma (float) —&gt; float 6.4.64.2 Result: Returns the value of the Gamma function at x. 6.4.65 gamma_distribution 6.4.65.1 Possible use: gamma_distribution (float, float, float) —&gt; float 6.4.65.2 Result: Returns the integral from zero to x of the gamma probability density function. 6.4.65.3 Comment: incomplete_gamma(a,x) is equal to pgamma(a,1,x). 6.4.66 gamma_distribution_complemented 6.4.66.1 Possible use: gamma_distribution_complemented (float, float, float) —&gt; float 6.4.66.2 Result: Returns the integral from x to infinity of the gamma probability density function. 6.4.67 gamma_index 6.4.67.1 Possible use: gamma_index (graph) —&gt; float 6.4.67.2 Result: returns the gamma index of the graph (A measure of connectivity that considers the relationship between the number of observed links and the number of possible links: gamma = e/(3 * (v - 2)) - for planar graph. 6.4.67.3 Examples: graph graphEpidemio &lt;- graph([]); float var1 &lt;- gamma_index(graphEpidemio); // var1 equals the gamma index of the graph 6.4.67.4 See also: alpha_index, beta_index, nb_cycles, connectivity_index, 6.4.68 gamma_rnd 6.4.68.1 Possible use: float gamma_rnd float —&gt; float gamma_rnd (float , float) —&gt; float 6.4.68.2 Result: returns a random value from a gamma distribution with specified values of the shape and scale parameters 6.4.68.3 Examples: gamma_rnd(10.0,5.0) 6.4.69 gauss 6.4.69.1 Possible use: gauss (point) —&gt; float float gauss float —&gt; float gauss (float , float) —&gt; float 6.4.69.2 Result: A value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian. A value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian. 6.4.69.3 Special cases: when the operand is a point, it is read as {mean, standardDeviation} when standardDeviation value is 0.0, it always returns the mean value when the operand is a point, it is read as {mean, standardDeviation} when standardDeviation value is 0.0, it always returns the mean value 6.4.69.4 Examples: float var0 &lt;- gauss({0,0.3}); // var0 equals 0.22354 float var1 &lt;- gauss({0,0.3}); // var1 equals -0.1357 float var2 &lt;- gauss(0,0.3); // var2 equals 0.22354 float var3 &lt;- gauss(0,0.3); // var3 equals -0.1357 6.4.69.5 See also: truncated_gauss, poisson, skew_gauss, 6.4.70 generate_barabasi_albert 6.4.70.1 Possible use: generate_barabasi_albert (container&lt;agent&gt;, species, int, bool) —&gt; graph generate_barabasi_albert (species, species, int, int, bool) —&gt; graph 6.4.70.2 Result: returns a random scale-free network (following Barabasi-Albert (BA) model). returns a random scale-free network (following Barabasi-Albert (BA) model). 6.4.70.3 Comment: The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements: 6.4.70.4 Special cases: “agents”: list of existing node agents “edges_species”: the species of edges “size”: the graph will contain (size + 1) nodes “m”: the number of edges added per novel node “synchronized”: is the graph and the species of vertices and edges synchronized? “vertices_specy”: the species of vertices “edges_species”: the species of edges “size”: the graph will contain (size + 1) nodes “m”: the number of edges added per novel node “synchronized”: is the graph and the species of vertices and edges synchronized? 6.4.70.5 Examples: graph&lt;yourNodeSpecy,yourEdgeSpecy&gt; graphEpidemio &lt;- generate_barabasi_albert( yourListOfNodes, yourEdgeSpecy, 3, 5, true); graph&lt;yourNodeSpecy,yourEdgeSpecy&gt; graphEpidemio &lt;- generate_barabasi_albert( yourNodeSpecy, yourEdgeSpecy, 3, 5, true); 6.4.70.6 See also: generate_watts_strogatz, 6.4.71 generate_complete_graph 6.4.71.1 Possible use: generate_complete_graph (container&lt;agent&gt;, species, bool) —&gt; graph generate_complete_graph (species, species, int, bool) —&gt; graph generate_complete_graph (container&lt;agent&gt;, species, float, bool) —&gt; graph generate_complete_graph (species, species, int, float, bool) —&gt; graph 6.4.71.2 Result: returns a fully connected graph. returns a fully connected graph. returns a fully connected graph. returns a fully connected graph. 6.4.71.3 Comment: Arguments should include following elements:Arguments should include following elements:Arguments should include following elements:Arguments should include following elements: 6.4.71.4 Special cases: “vertices_specy”: the species of vertices “edges_species”: the species of edges “size”: the graph will contain size nodes. “synchronized”: is the graph and the species of vertices and edges synchronized? “vertices_specy”: the species of vertices “edges_species”: the species of edges “size”: the graph will contain size nodes. “layoutRadius”: nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment. “synchronized”: is the graph and the species of vertices and edges synchronized? “agents”: list of existing node agents “edges_species”: the species of edges “synchronized”: is the graph and the species of vertices and edges synchronized? “agents”: list of existing node agents “edges_species”: the species of edges “layoutRadius”: nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment. “synchronized”: is the graph and the species of vertices and edges synchronized? 6.4.71.5 Examples: graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph( myVertexSpecy, myEdgeSpecy, 10, true); graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph( myVertexSpecy, myEdgeSpecy, 10, 25, true); graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph( myListOfNodes, myEdgeSpecy, true); graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_complete_graph( myListOfNodes, myEdgeSpecy, 25, true); 6.4.71.6 See also: generate_barabasi_albert, generate_watts_strogatz, 6.4.72 generate_watts_strogatz 6.4.72.1 Possible use: generate_watts_strogatz (container&lt;agent&gt;, species, float, int, bool) —&gt; graph generate_watts_strogatz (species, species, int, float, int, bool) —&gt; graph 6.4.72.2 Result: returns a random small-world network (following Watts-Strogatz model). returns a random small-world network (following Watts-Strogatz model). 6.4.72.3 Comment: The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements: 6.4.72.4 Special cases: “agents”: list of existing node agents “edges_species”: the species of edges “p”: probability to “rewire” an edge. So it must be between 0 and 1. The parameter is often called beta in the literature. “k”: the base degree of each node. k must be greater than 2 and even. “synchronized”: is the graph and the species of vertices and edges synchronized? “vertices_specy”: the species of vertices “edges_species”: the species of edges “size”: the graph will contain (size + 1) nodes. Size must be greater than k. “p”: probability to “rewire” an edge. So it must be between 0 and 1. The parameter is often called beta in the literature. “k”: the base degree of each node. k must be greater than 2 and even. “synchronized”: is the graph and the species of vertices and edges synchronized? 6.4.72.5 Examples: graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_watts_strogatz( myListOfNodes, myEdgeSpecy, 0.3, 2, true); graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- generate_watts_strogatz( myVertexSpecy, myEdgeSpecy, 2, 0.3, 2, true); 6.4.72.6 See also: generate_barabasi_albert, 6.4.73 geojson_file 6.4.73.1 Possible use: geojson_file (string) —&gt; file 6.4.73.2 Result: Constructs a file of type geojson. Allowed extensions are limited to json, geojson, geo.json 6.4.74 geometric_mean 6.4.74.1 Possible use: geometric_mean (container) —&gt; float 6.4.74.2 Result: the geometric mean of the elements of the operand. See Geometric_mean for more details. 6.4.74.3 Comment: The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded. 6.4.74.4 Examples: float var0 &lt;- geometric_mean ([4.5, 3.5, 5.5, 7.0]); // var0 equals 4.962326343467649 6.4.74.5 See also: mean, median, harmonic_mean, 6.4.75 geometry 6.4.75.1 Possible use: geometry (any) —&gt; geometry 6.4.75.2 Result: Casts the operand into the type geometry 6.4.76 geometry_collection 6.4.76.1 Possible use: geometry_collection (container&lt;geometry&gt;) —&gt; geometry 6.4.76.2 Result: A geometry collection (multi-geometry) composed of the given list of geometries. 6.4.76.3 Special cases: if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single geometry, returns a copy of the geometry. 6.4.76.4 Examples: geometry var0 &lt;- geometry_collection([{0,0}, {0,10}, {10,10}, {10,0}]); // var0 equals a geometry composed of the 4 points (multi-point). 6.4.76.5 See also: around, circle, cone, link, norm, point, polygone, rectangle, square, triangle, line, 6.4.77 get Same signification as read 6.4.77.1 Possible use: agent get string —&gt; unknown get (agent , string) —&gt; unknown geometry get string —&gt; unknown get (geometry , string) —&gt; unknown 6.4.77.2 Result: Reads an attribute of the specified agent (left operand). The attribute name is specified by the right operand. Reads an attribute of the specified geometry (left operand). The attribute name is specified by the right operand. 6.4.77.3 Special cases: Reading the attribute of another agent string agent_name &lt;- an_agent get(&#39;name&#39;); // reads then &#39;name&#39; attribute of an_agent then assigns the returned value to the agent_name variable Reading the attribute of a geometry string geom_area &lt;- a_geometry get(&#39;area&#39;); // reads then &#39;area&#39; attribute of &#39;a_geometry&#39; variable then assigns the returned value to the geom_area variable 6.4.78 get_about 6.4.78.1 Possible use: get_about (emotion) —&gt; predicate 6.4.78.2 Result: get the about value of the given emotion 6.4.78.3 Examples: get_about(emotion) 6.4.79 get_agent 6.4.79.1 Possible use: get_agent (msi.gaml.architecture.simplebdi.SocialLink) —&gt; agent 6.4.79.2 Result: get the agent value of the given social link 6.4.79.3 Examples: get_agent(social_link1) 6.4.80 get_agent_cause 6.4.80.1 Possible use: get_agent_cause (predicate) —&gt; agent get_agent_cause (emotion) —&gt; agent 6.4.80.2 Result: get the agent cause value of the given emotion 6.4.80.3 Examples: get_agent_cause(emotion) 6.4.81 get_belief_op 6.4.81.1 Possible use: agent get_belief_op predicate —&gt; mental_state get_belief_op (agent , predicate) —&gt; mental_state 6.4.81.2 Result: get the belief in the belief base with the given predicate. 6.4.81.3 Examples: get_belief_op(self,has_water) 6.4.82 get_belief_with_name_op 6.4.82.1 Possible use: agent get_belief_with_name_op string —&gt; mental_state get_belief_with_name_op (agent , string) —&gt; mental_state 6.4.82.2 Result: get the belief in the belief base with the given name. 6.4.82.3 Examples: get_belief_with_name_op(self,&quot;has_water&quot;) 6.4.83 get_beliefs_op 6.4.83.1 Possible use: agent get_beliefs_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_beliefs_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.83.2 Result: get the beliefs in the belief base with the given predicate. 6.4.83.3 Examples: get_beliefs_op(self,has_water) 6.4.84 get_beliefs_with_name_op 6.4.84.1 Possible use: agent get_beliefs_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_beliefs_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.84.2 Result: get the list of beliefs in the belief base which predicate has the given name. 6.4.84.3 Examples: get_beliefs_with_name_op(self,&quot;has_water&quot;) 6.4.85 get_current_intention_op 6.4.85.1 Possible use: get_current_intention_op (agent) —&gt; mental_state 6.4.85.2 Result: get the current intention. 6.4.85.3 Examples: get_current_intention_op(self,has_water) 6.4.86 get_decay 6.4.86.1 Possible use: get_decay (emotion) —&gt; float 6.4.86.2 Result: get the decay value of the given emotion 6.4.86.3 Examples: get_decay(emotion) 6.4.87 get_desire_op 6.4.87.1 Possible use: agent get_desire_op predicate —&gt; mental_state get_desire_op (agent , predicate) —&gt; mental_state 6.4.87.2 Result: get the desire in the desire base with the given predicate. 6.4.87.3 Examples: get_belief_op(self,has_water) 6.4.88 get_desire_with_name_op 6.4.88.1 Possible use: agent get_desire_with_name_op string —&gt; mental_state get_desire_with_name_op (agent , string) —&gt; mental_state 6.4.88.2 Result: get the desire in the desire base with the given name. 6.4.88.3 Examples: mental_state var0 &lt;- get_desire_with_name_op(self,&quot;has_water&quot;); // var0 equals nil 6.4.89 get_desires_op 6.4.89.1 Possible use: agent get_desires_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_desires_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.89.2 Result: get the desires in the desire base with the given predicate. 6.4.89.3 Examples: get_desires_op(self,has_water) 6.4.90 get_desires_with_name_op 6.4.90.1 Possible use: agent get_desires_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_desires_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.90.2 Result: get the list of desires in the desire base which predicate has the given name. 6.4.90.3 Examples: get_desires_with_name_op(self,&quot;has_water&quot;) 6.4.91 get_dominance 6.4.91.1 Possible use: get_dominance (msi.gaml.architecture.simplebdi.SocialLink) —&gt; float 6.4.91.2 Result: get the dominance value of the given social link 6.4.91.3 Examples: get_dominance(social_link1) 6.4.92 get_familiarity 6.4.92.1 Possible use: get_familiarity (msi.gaml.architecture.simplebdi.SocialLink) —&gt; float 6.4.92.2 Result: get the familiarity value of the given social link 6.4.92.3 Examples: get_familiarity(social_link1) 6.4.93 get_ideal_op 6.4.93.1 Possible use: agent get_ideal_op predicate —&gt; mental_state get_ideal_op (agent , predicate) —&gt; mental_state 6.4.93.2 Result: get the ideal in the ideal base with the given name. 6.4.93.3 Examples: get_ideal_op(self,has_water) 6.4.94 get_ideal_with_name_op 6.4.94.1 Possible use: agent get_ideal_with_name_op string —&gt; mental_state get_ideal_with_name_op (agent , string) —&gt; mental_state 6.4.94.2 Result: get the ideal in the ideal base with the given name. 6.4.94.3 Examples: get_ideal_with_name_op(self,&quot;has_water&quot;) 6.4.95 get_ideals_op 6.4.95.1 Possible use: agent get_ideals_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_ideals_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.95.2 Result: get the ideal in the ideal base with the given name. 6.4.95.3 Examples: get_ideals_op(self,has_water) 6.4.96 get_ideals_with_name_op 6.4.96.1 Possible use: agent get_ideals_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_ideals_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.96.2 Result: get the list of ideals in the ideal base which predicate has the given name. 6.4.96.3 Examples: get_ideals_with_name_op(self,&quot;has_water&quot;) 6.4.97 get_intensity 6.4.97.1 Possible use: get_intensity (emotion) —&gt; float 6.4.97.2 Result: get the intensity value of the given emotion 6.4.97.3 Examples: emotion set_intensity 12 6.4.98 get_intention_op 6.4.98.1 Possible use: agent get_intention_op predicate —&gt; mental_state get_intention_op (agent , predicate) —&gt; mental_state 6.4.98.2 Result: get the intention in the intention base with the given predicate. 6.4.98.3 Examples: get_intention_op(self,has_water) 6.4.99 get_intention_with_name_op 6.4.99.1 Possible use: agent get_intention_with_name_op string —&gt; mental_state get_intention_with_name_op (agent , string) —&gt; mental_state 6.4.99.2 Result: get the intention in the intention base with the given name. 6.4.99.3 Examples: get_intention_with_name_op(self,&quot;has_water&quot;) 6.4.100 get_intentions_op 6.4.100.1 Possible use: agent get_intentions_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_intentions_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.100.2 Result: get the intentions in the intention base with the given predicate. 6.4.100.3 Examples: get_intentions_op(self,has_water) 6.4.101 get_intentions_with_name_op 6.4.101.1 Possible use: agent get_intentions_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_intentions_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.101.2 Result: get the list of intentions in the intention base which predicate has the given name. 6.4.101.3 Examples: get_intentions_with_name_op(self,&quot;has_water&quot;) 6.4.102 get_lifetime 6.4.102.1 Possible use: get_lifetime (predicate) —&gt; int get_lifetime (mental_state) —&gt; int 6.4.102.2 Result: get the lifetime value of the given mental state 6.4.102.3 Examples: get_lifetime(mental_state1) 6.4.103 get_liking 6.4.103.1 Possible use: get_liking (msi.gaml.architecture.simplebdi.SocialLink) —&gt; float 6.4.103.2 Result: get the liking value of the given social link 6.4.103.3 Examples: get_liking(social_link1) 6.4.104 get_modality 6.4.104.1 Possible use: get_modality (mental_state) —&gt; string 6.4.104.2 Result: get the modality value of the given mental state 6.4.104.3 Examples: get_modality(mental_state1) 6.4.105 get_obligation_op 6.4.105.1 Possible use: agent get_obligation_op predicate —&gt; mental_state get_obligation_op (agent , predicate) —&gt; mental_state 6.4.105.2 Result: get the obligation in the obligation base with the given predicate. 6.4.105.3 Examples: get_obligation_op(self,has_water) 6.4.106 get_obligation_with_name_op 6.4.106.1 Possible use: agent get_obligation_with_name_op string —&gt; mental_state get_obligation_with_name_op (agent , string) —&gt; mental_state 6.4.106.2 Result: get the obligation in the obligation base with the given name. 6.4.106.3 Examples: get_obligation_with_name_op(self,&quot;has_water&quot;) 6.4.107 get_obligations_op 6.4.107.1 Possible use: agent get_obligations_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_obligations_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.107.2 Result: get the obligations in the obligation base with the given predicate. 6.4.107.3 Examples: get_obligations_op(self,has_water) 6.4.108 get_obligations_with_name_op 6.4.108.1 Possible use: agent get_obligations_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_obligations_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.108.2 Result: get the list of obligations in the obligation base which predicate has the given name. 6.4.108.3 Examples: get_obligations_with_name_op(self,&quot;has_water&quot;) 6.4.109 get_plan_name 6.4.109.1 Possible use: get_plan_name (BDIPlan) —&gt; string 6.4.109.2 Result: get the name of a given plan 6.4.109.3 Examples: get_plan_name(agent.current_plan) 6.4.110 get_predicate 6.4.110.1 Possible use: get_predicate (mental_state) —&gt; predicate 6.4.110.2 Result: get the predicate value of the given mental state 6.4.110.3 Examples: get_predicate(mental_state1) 6.4.111 get_solidarity 6.4.111.1 Possible use: get_solidarity (msi.gaml.architecture.simplebdi.SocialLink) —&gt; float 6.4.111.2 Result: get the solidarity value of the given social link 6.4.111.3 Examples: get_solidarity(social_link1) 6.4.112 get_strength 6.4.112.1 Possible use: get_strength (mental_state) —&gt; float 6.4.112.2 Result: get the strength value of the given mental state 6.4.112.3 Examples: get_strength(mental_state1) 6.4.113 get_super_intention 6.4.113.1 Possible use: get_super_intention (predicate) —&gt; mental_state 6.4.114 get_trust 6.4.114.1 Possible use: get_trust (msi.gaml.architecture.simplebdi.SocialLink) —&gt; float 6.4.114.2 Result: get the familiarity value of the given social link 6.4.114.3 Examples: get_familiarity(social_link1) 6.4.115 get_truth 6.4.115.1 Possible use: get_truth (predicate) —&gt; bool 6.4.116 get_uncertainties_op 6.4.116.1 Possible use: agent get_uncertainties_op predicate —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_uncertainties_op (agent , predicate) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.116.2 Result: get the uncertainties in the uncertainty base with the given predicate. 6.4.116.3 Examples: get_uncertinties_op(self,has_water) 6.4.117 get_uncertainties_with_name_op 6.4.117.1 Possible use: agent get_uncertainties_with_name_op string —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; get_uncertainties_with_name_op (agent , string) —&gt; msi.gama.util.IList&lt;msi.gaml.architecture.simplebdi.MentalState&gt; 6.4.117.2 Result: get the list of uncertainties in the uncertainty base which predicate has the given name. 6.4.117.3 Examples: get_uncertainties_with_name_op(self,&quot;has_water&quot;) 6.4.118 get_uncertainty_op 6.4.118.1 Possible use: agent get_uncertainty_op predicate —&gt; mental_state get_uncertainty_op (agent , predicate) —&gt; mental_state 6.4.118.2 Result: get the uncertainty in the uncertainty base with the given predicate. 6.4.118.3 Examples: get_uncertainty_op(self,has_water) 6.4.119 get_uncertainty_with_name_op 6.4.119.1 Possible use: agent get_uncertainty_with_name_op string —&gt; mental_state get_uncertainty_with_name_op (agent , string) —&gt; mental_state 6.4.119.2 Result: get the uncertainty in the uncertainty base with the given name. 6.4.119.3 Examples: get_uncertainty_with_name_op(self,&quot;has_water&quot;) 6.4.120 gif_file 6.4.120.1 Possible use: gif_file (string) —&gt; file 6.4.120.2 Result: Constructs a file of type gif. Allowed extensions are limited to gif 6.4.121 gini 6.4.121.1 Possible use: gini (list&lt;float&gt;) —&gt; float 6.4.121.2 Special cases: return the Gini Index of the given list of values (list of floats) float var0 &lt;- gini([1.0, 0.5, 2.0]); // var0 equals the gini index computed 6.4.122 gml_file 6.4.122.1 Possible use: gml_file (string) —&gt; file 6.4.122.2 Result: Constructs a file of type gml. Allowed extensions are limited to gml 6.4.123 graph 6.4.123.1 Possible use: graph (any) —&gt; graph 6.4.123.2 Result: Casts the operand into the type graph 6.4.124 grayscale 6.4.124.1 Possible use: grayscale (rgb) —&gt; rgb 6.4.124.2 Result: Converts rgb color to grayscale value 6.4.124.3 Comment: r=red, g=green, b=blue. Between 0 and 255 and gray = 0.299 * red + 0.587 * green + 0.114 * blue (Photoshop value) 6.4.124.4 Examples: rgb var0 &lt;- grayscale (rgb(255,0,0)); // var0 equals to a dark grey 6.4.124.5 See also: rgb, hsb, 6.4.125 grid_at 6.4.125.1 Possible use: species grid_at point —&gt; agent grid_at (species , point) —&gt; agent 6.4.125.2 Result: returns the cell of the grid (right-hand operand) at the position given by the right-hand operand 6.4.125.3 Comment: If the left-hand operand is a point of floats, it is used as a point of ints. 6.4.125.4 Special cases: if the left-hand operand is not a grid cell species, returns nil 6.4.125.5 Examples: agent var0 &lt;- grid_cell grid_at {1,2}; // var0 equals the agent grid_cell with grid_x=1 and grid_y = 2 6.4.126 grid_cells_to_graph 6.4.126.1 Possible use: grid_cells_to_graph (container) —&gt; graph 6.4.126.2 Result: creates a graph from a list of cells (operand). An edge is created between neighbors. 6.4.126.3 Examples: my_cell_graph&lt;-grid_cells_to_graph(cells_list) 6.4.127 grid_file 6.4.127.1 Possible use: grid_file (string) —&gt; file 6.4.127.2 Result: Constructs a file of type grid. Allowed extensions are limited to asc, tif 6.4.128 group_by 6.4.128.1 Possible use: container group_by any expression —&gt; map group_by (container , any expression) —&gt; map 6.4.128.2 Result: Returns a map, where the keys take the possible values of the right-hand operand and the map values are the list of elements of the left-hand operand associated to the key value 6.4.128.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 6.4.128.4 Special cases: if the left-hand operand is nil, group_by throws an error 6.4.128.5 Examples: map var0 &lt;- [1,2,3,4,5,6,7,8] group_by (each &gt; 3); // var0 equals [false::[1, 2, 3], true::[4, 5, 6, 7, 8]] map var1 &lt;- g2 group_by (length(g2 out_edges_of each) ); // var1 equals [ 0::[node9, node7, node10, node8, node11], 1::[node6], 2::[node5], 3::[node4]] map var2 &lt;- (list(node) group_by (round(node(each).location.x)); // var2 equals [32::[node5], 21::[node1], 4::[node0], 66::[node2], 96::[node3]] map&lt;bool,list&gt; var3 &lt;- [1::2, 3::4, 5::6] group_by (each &gt; 4); // var3 equals [false::[2, 4], true::[6]] 6.4.128.6 See also: first_with, last_with, where, 6.4.129 harmonic_mean 6.4.129.1 Possible use: harmonic_mean (container) —&gt; float 6.4.129.2 Result: the harmonic mean of the elements of the operand. See Harmonic_mean for more details. 6.4.129.3 Comment: The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded. 6.4.129.4 Examples: float var0 &lt;- harmonic_mean ([4.5, 3.5, 5.5, 7.0]); // var0 equals 4.804159445407279 6.4.129.5 See also: mean, median, geometric_mean, 6.4.130 has_belief_op 6.4.130.1 Possible use: agent has_belief_op predicate —&gt; bool has_belief_op (agent , predicate) —&gt; bool 6.4.130.2 Result: indicates if there already is a belief about the given predicate. 6.4.130.3 Examples: has_belief_op(self,has_water) 6.4.131 has_belief_with_name_op 6.4.131.1 Possible use: agent has_belief_with_name_op string —&gt; bool has_belief_with_name_op (agent , string) —&gt; bool 6.4.131.2 Result: indicates if there already is a belief about the given name. 6.4.131.3 Examples: has_belief_with_name_op(self,&quot;has_water&quot;) 6.4.132 has_desire_op 6.4.132.1 Possible use: agent has_desire_op predicate —&gt; bool has_desire_op (agent , predicate) —&gt; bool 6.4.132.2 Result: indicates if there already is a desire about the given predicate. 6.4.132.3 Examples: has_desire_op(self,has_water) 6.4.133 has_desire_with_name_op 6.4.133.1 Possible use: agent has_desire_with_name_op string —&gt; bool has_desire_with_name_op (agent , string) —&gt; bool 6.4.133.2 Result: indicates if there already is a desire about the given name. 6.4.133.3 Examples: has_desire_with_name_op(self,&quot;has_water&quot;) 6.4.134 has_ideal_op 6.4.134.1 Possible use: agent has_ideal_op predicate —&gt; bool has_ideal_op (agent , predicate) —&gt; bool 6.4.134.2 Result: indicates if there already is an ideal about the given predicate. 6.4.134.3 Examples: has_ideal_op(self,has_water) 6.4.135 has_ideal_with_name_op 6.4.135.1 Possible use: agent has_ideal_with_name_op string —&gt; bool has_ideal_with_name_op (agent , string) —&gt; bool 6.4.135.2 Result: indicates if there already is an ideal about the given name. 6.4.135.3 Examples: has_ideal_with_name_op(self,&quot;has_water&quot;) 6.4.136 has_intention_op 6.4.136.1 Possible use: agent has_intention_op predicate —&gt; bool has_intention_op (agent , predicate) —&gt; bool 6.4.136.2 Result: indicates if there already is an intention about the given predicate. 6.4.136.3 Examples: has_intention_op(self,has_water) 6.4.137 has_intention_with_name_op 6.4.137.1 Possible use: agent has_intention_with_name_op string —&gt; bool has_intention_with_name_op (agent , string) —&gt; bool 6.4.137.2 Result: indicates if there already is an intention about the given name. 6.4.137.3 Examples: has_intention_with_name_op(self,&quot;has_water&quot;) 6.4.138 has_obligation_op 6.4.138.1 Possible use: agent has_obligation_op predicate —&gt; bool has_obligation_op (agent , predicate) —&gt; bool 6.4.138.2 Result: indicates if there already is an obligation about the given predicate. 6.4.138.3 Examples: has_obligation_op(self,has_water) 6.4.139 has_obligation_with_name_op 6.4.139.1 Possible use: agent has_obligation_with_name_op string —&gt; bool has_obligation_with_name_op (agent , string) —&gt; bool 6.4.139.2 Result: indicates if there already is an obligation about the given name. 6.4.139.3 Examples: has_obligation_with_name_op(self,&quot;has_water&quot;) 6.4.140 has_uncertainty_op 6.4.140.1 Possible use: agent has_uncertainty_op predicate —&gt; bool has_uncertainty_op (agent , predicate) —&gt; bool 6.4.140.2 Result: indicates if there already is an uncertainty about the given predicate. 6.4.140.3 Examples: has_uncertainty_op(self,has_water) 6.4.141 has_uncertainty_with_name_op 6.4.141.1 Possible use: agent has_uncertainty_with_name_op string —&gt; bool has_uncertainty_with_name_op (agent , string) —&gt; bool 6.4.141.2 Result: indicates if there already is an uncertainty about the given name. 6.4.141.3 Examples: has_uncertainty_with_name_op(self,&quot;has_water&quot;) 6.4.142 hexagon 6.4.142.1 Possible use: hexagon (point) —&gt; geometry hexagon (float) —&gt; geometry float hexagon float —&gt; geometry hexagon (float , float) —&gt; geometry 6.4.142.2 Result: A hexagon geometry which the given with and height 6.4.142.3 Comment: the center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator. 6.4.142.4 Special cases: returns nil if the operand is nil. returns nil if the operand is nil. returns nil if the operand is nil. 6.4.142.5 Examples: geometry var0 &lt;- hexagon({10,5}); // var0 equals a geometry as a hexagon of width of 10 and height of 5. geometry var1 &lt;- hexagon(10); // var1 equals a geometry as a hexagon of width of 10 and height of 10. geometry var2 &lt;- hexagon(10,5); // var2 equals a geometry as a hexagon of width of 10 and height of 5. 6.4.142.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, rectangle, triangle, 6.4.143 hierarchical_clustering 6.4.143.1 Possible use: container&lt;agent&gt; hierarchical_clustering float —&gt; list hierarchical_clustering (container&lt;agent&gt; , float) —&gt; list 6.4.143.2 Result: A tree (list of list) contained groups of agents clustered by distance considering a distance min between two groups. 6.4.143.3 Comment: use of hierarchical clustering with Minimum for linkage criterion between two groups of agents. 6.4.143.4 Examples: list var0 &lt;- [ag1, ag2, ag3, ag4, ag5] hierarchical_clustering 20.0; // var0 equals for example, can return [[[ag1],[ag3]], [ag2], [[[ag4],[ag5]],[ag6]] 6.4.143.5 See also: simple_clustering_by_distance, 6.4.144 horizontal 6.4.144.1 Possible use: horizontal (msi.gama.util.GamaMap&lt;java.lang.Object,java.lang.Integer&gt;) —&gt; msi.gama.util.tree.GamaNode&lt;java.lang.String&gt; 6.4.145 hsb 6.4.145.1 Possible use: hsb (float, float, float) —&gt; rgb hsb (float, float, float, int) —&gt; rgb hsb (float, float, float, float) —&gt; rgb 6.4.145.2 Result: Converts hsb (h=hue, s=saturation, b=brightness) value to Gama color 6.4.145.3 Comment: h,s and b components should be floating-point values between 0.0 and 1.0 and when used alpha should be an integer (between 0 and 255) or a float (between 0 and 1) . Examples: Red=(0.0,1.0,1.0), Yellow=(0.16,1.0,1.0), Green=(0.33,1.0,1.0), Cyan=(0.5,1.0,1.0), Blue=(0.66,1.0,1.0), Magenta=(0.83,1.0,1.0) 6.4.145.4 Examples: rgb var0 &lt;- hsb (0.5,1.0,1.0,0.0); // var0 equals rgb(&quot;cyan&quot;,0) rgb var1 &lt;- hsb (0.0,1.0,1.0); // var1 equals rgb(&quot;red&quot;) 6.4.145.5 See also: rgb, 6.4.146 hypot 6.4.146.1 Possible use: hypot (float, float, float, float) —&gt; float 6.4.146.2 Result: Returns sqrt(x2 +y2) without intermediate overflow or underflow. 6.4.146.3 Special cases: If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN. 6.4.146.4 Examples: float var0 &lt;- hypot(0,1,0,1); // var0 equals sqrt(2) "],
["operators-i-to-m.html", "Chapter 7 Operators (I to M) 7.1 Definition 7.2 Priority between operators 7.3 Using actions as operators 7.4 Operators", " Chapter 7 Operators (I to M) This file is automatically generated from java files. Do Not Edit It. 7.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 7.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 7.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 7.4 Operators 7.4.1 IDW 7.4.1.1 Possible use: IDW (container&lt;agent&gt;, map&lt;point,float&gt;, int) —&gt; map&lt;agent,float&gt; 7.4.1.2 Result: Inverse Distance Weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to each geometry are calculated with a weighted average of the values available at the known points. See: http://en.wikipedia.org/wiki/Inverse_distance_weighting Usage: IDW (list of geometries, map of points (key: point, value: value), power parameter) 7.4.1.3 Examples: map&lt;agent,float&gt; var0 &lt;- IDW([ag1, ag2, ag3, ag4, ag5],[{10,10}::25.0, {10,80}::10.0, {100,10}::15.0], 2); // var0 equals for example, can return [ag1::12.0, ag2::23.0,ag3::12.0,ag4::14.0,ag5::17.0] 7.4.2 image_file 7.4.2.1 Possible use: image_file (string) —&gt; file 7.4.2.2 Result: Constructs a file of type image. Allowed extensions are limited to tiff, jpg, jpeg, png, pict, bmp 7.4.3 improved_generator 7.4.3.1 Possible use: improved_generator (float, float, float, float) —&gt; float 7.4.3.2 Result: take a x, y, z and a bias parameters and gives a value 7.4.3.3 Examples: float var0 &lt;- improved_generator(2,3,4,253); // var0 equals 10.2 7.4.4 in 7.4.4.1 Possible use: string in string —&gt; bool in (string , string) —&gt; bool unknown in container —&gt; bool in (unknown , container) —&gt; bool 7.4.4.2 Result: true if the right operand contains the left operand, false otherwise 7.4.4.3 Comment: the definition of in depends on the container 7.4.4.4 Special cases: if both operands are strings, returns true if the left-hand operand patterns is included in to the right-hand string; if the right operand is nil or empty, in returns false 7.4.4.5 Examples: bool var0 &lt;- &#39;bc&#39; in &#39;abcded&#39;; // var0 equals true bool var1 &lt;- 2 in [1,2,3,4,5,6]; // var1 equals true bool var2 &lt;- 7 in [1,2,3,4,5,6]; // var2 equals false bool var3 &lt;- 3 in [1::2, 3::4, 5::6]; // var3 equals false bool var4 &lt;- 6 in [1::2, 3::4, 5::6]; // var4 equals true 7.4.4.6 See also: contains, 7.4.5 in_degree_of 7.4.5.1 Possible use: graph in_degree_of unknown —&gt; int in_degree_of (graph , unknown) —&gt; int 7.4.5.2 Result: returns the in degree of a vertex (right-hand operand) in the graph given as left-hand operand. 7.4.5.3 Examples: int var1 &lt;- graphFromMap in_degree_of (node(3)); // var1 equals 2 7.4.5.4 See also: out_degree_of, degree_of, 7.4.6 in_edges_of 7.4.6.1 Possible use: graph in_edges_of unknown —&gt; list in_edges_of (graph , unknown) —&gt; list 7.4.6.2 Result: returns the list of the in-edges of a vertex (right-hand operand) in the graph given as left-hand operand. 7.4.6.3 Examples: list var1 &lt;- graphFromMap in_edges_of node({12,45}); // var1 equals [LineString] 7.4.6.4 See also: out_edges_of, 7.4.7 incomplete_beta 7.4.7.1 Possible use: incomplete_beta (float, float, float) —&gt; float 7.4.7.2 Result: Returns the regularized integral of the beta function with arguments a and b, from zero to x. 7.4.8 incomplete_gamma 7.4.8.1 Possible use: float incomplete_gamma float —&gt; float incomplete_gamma (float , float) —&gt; float 7.4.8.2 Result: Returns the regularized integral of the Gamma function with argument a to the integration end point x. 7.4.9 incomplete_gamma_complement 7.4.9.1 Possible use: float incomplete_gamma_complement float —&gt; float incomplete_gamma_complement (float , float) —&gt; float 7.4.9.2 Result: Returns the complemented regularized incomplete Gamma function of the argument a and integration start point x. 7.4.10 indented_by 7.4.10.1 Possible use: string indented_by int —&gt; string indented_by (string , int) —&gt; string 7.4.10.2 Result: Converts a (possibly multiline) string by indenting it by a number – specified by the second operand – of tabulations to the right 7.4.11 index_by 7.4.11.1 Possible use: container index_by any expression —&gt; map index_by (container , any expression) —&gt; map 7.4.11.2 Result: produces a new map from the evaluation of the right-hand operand for each element of the left-hand operand 7.4.11.3 Special cases: if the left-hand operand is nil, index_by throws an error. If the operation results in duplicate keys, only the first value corresponding to the key is kept 7.4.11.4 Examples: map var0 &lt;- [1,2,3,4,5,6,7,8] index_by (each - 1); // var0 equals [0::1, 1::2, 2::3, 3::4, 4::5, 5::6, 6::7, 7::8] 7.4.12 index_of 7.4.12.1 Possible use: map index_of unknown —&gt; unknown index_of (map , unknown) —&gt; unknown matrix index_of unknown —&gt; point index_of (matrix , unknown) —&gt; point list index_of unknown —&gt; int index_of (list , unknown) —&gt; int string index_of string —&gt; int index_of (string , string) —&gt; int species index_of unknown —&gt; int index_of (species , unknown) —&gt; int 7.4.12.2 Result: the index of the first occurence of the right operand in the left operand container the index of the first occurence of the right operand in the left operand container 7.4.12.3 Comment: The definition of index_of and the type of the index depend on the container 7.4.12.4 Special cases: if the left operand is a map, index_of returns the index of a value or nil if the value is not mapped if the left operator is a species, returns the index of an agent in a species. If the argument is not an agent of this species, returns -1. Use int(agent) instead if the left operand is a matrix, index_of returns the index as a point point var1 &lt;- matrix([[1,2,3],[4,5,6]]) index_of 4; // var1 equals {1.0,0.0} if the left operand is a list, index_of returns the index as an integer int var2 &lt;- [1,2,3,4,5,6] index_of 4; // var2 equals 3 int var3 &lt;- [4,2,3,4,5,4] index_of 4; // var3 equals 0 if both operands are strings, returns the index within the left-hand string of the first occurrence of the given right-hand string int var4 &lt;- &quot;abcabcabc&quot; index_of &quot;ca&quot;; // var4 equals 2 7.4.12.5 Examples: unknown var0 &lt;- [1::2, 3::4, 5::6] index_of 4; // var0 equals 3 7.4.12.6 See also: at, last_index_of, 7.4.13 inside 7.4.13.1 Possible use: container&lt;agent&gt; inside geometry —&gt; list&lt;geometry&gt; inside (container&lt;agent&gt; , geometry) —&gt; list&lt;geometry&gt; 7.4.13.2 Result: A list of agents or geometries among the left-operand list, species or meta-population (addition of species), covered by the operand (casted as a geometry). 7.4.13.3 Examples: list&lt;geometry&gt; var0 &lt;- [ag1, ag2, ag3] inside(self); // var0 equals the agents among ag1, ag2 and ag3 that are covered by the shape of the right-hand argument. list&lt;geometry&gt; var1 &lt;- (species1 + species2) inside (self); // var1 equals the agents among species species1 and species2 that are covered by the shape of the right-hand argument. 7.4.13.4 See also: neighbors_at, neighbors_of, closest_to, overlapping, agents_overlapping, agents_inside, agent_closest_to, 7.4.14 int 7.4.14.1 Possible use: int (any) —&gt; int 7.4.14.2 Result: Casts the operand into the type int 7.4.15 inter 7.4.15.1 Possible use: container inter container —&gt; list inter (container , container) —&gt; list geometry inter geometry —&gt; geometry inter (geometry , geometry) —&gt; geometry 7.4.15.2 Result: the intersection of the two operands A geometry resulting from the intersection between the two geometries 7.4.15.3 Comment: both containers are transformed into sets (so without duplicated element, cf. remove_deplicates operator) before the set intersection is computed. 7.4.15.4 Special cases: if an operand is a graph, it will be transformed into the set of its nodes returns nil if one of the operands is nil if an operand is a map, it will be transformed into the set of its values list var0 &lt;- [1::2, 3::4, 5::6] inter [2,4]; // var0 equals [2,4] list var1 &lt;- [1::2, 3::4, 5::6] inter [1,3]; // var1 equals [] if an operand is a matrix, it will be transformed into the set of the lines list var2 &lt;- matrix([[3,2,1],[4,5,4]]) inter [3,4]; // var2 equals [3,4] 7.4.15.5 Examples: list var3 &lt;- [1,2,3,4,5,6] inter [2,4]; // var3 equals [2,4] list var4 &lt;- [1,2,3,4,5,6] inter [0,8]; // var4 equals [] geometry var5 &lt;- square(10) inter circle(5); // var5 equals circle(5) 7.4.15.6 See also: remove_duplicates, union, +, -, 7.4.16 interleave 7.4.16.1 Possible use: interleave (container) —&gt; list 7.4.16.2 Result: a new list containing the interleaved elements of the containers contained in the operand 7.4.16.3 Comment: the operand should be a list of lists of elements. The result is a list of elements. 7.4.16.4 Examples: list var0 &lt;- interleave([1,2,4,3,5,7,6,8]); // var0 equals [1,2,4,3,5,7,6,8] list var1 &lt;- interleave([[&#39;e11&#39;,&#39;e12&#39;,&#39;e13&#39;],[&#39;e21&#39;,&#39;e22&#39;,&#39;e23&#39;],[&#39;e31&#39;,&#39;e32&#39;,&#39;e33&#39;]]); // var1 equals [&#39;e11&#39;,&#39;e21&#39;,&#39;e31&#39;,&#39;e12&#39;,&#39;e22&#39;,&#39;e32&#39;,&#39;e13&#39;,&#39;e23&#39;,&#39;e33&#39;] 7.4.17 internal_at 7.4.17.1 Possible use: container&lt;KeyType,ValueType&gt; internal_at list&lt;KeyType&gt; —&gt; ValueType internal_at (container&lt;KeyType,ValueType&gt; , list&lt;KeyType&gt;) —&gt; ValueType agent internal_at list —&gt; unknown internal_at (agent , list) —&gt; unknown geometry internal_at list —&gt; unknown internal_at (geometry , list) —&gt; unknown 7.4.17.2 Result: For internal use only. Corresponds to the implementation of the access to containers with [index] For internal use only. Corresponds to the implementation, for agents, of the access to containers with [index] For internal use only. Corresponds to the implementation, for geometries, of the access to containers with [index] 7.4.17.3 See also: at, 7.4.18 internal_integrated_value 7.4.18.1 Possible use: any expression internal_integrated_value any expression —&gt; list internal_integrated_value (any expression , any expression) —&gt; list 7.4.18.2 Result: For internal use only. Corresponds to the implementation, for agents, of the access to containers with [index] 7.4.19 internal_zero_order_equation 7.4.19.1 Possible use: internal_zero_order_equation (any expression) —&gt; float 7.4.19.2 Result: An internal placeholder function 7.4.20 intersection Same signification as inter 7.4.21 intersects 7.4.21.1 Possible use: geometry intersects geometry —&gt; bool intersects (geometry , geometry) —&gt; bool 7.4.21.2 Result: A boolean, equal to true if the left-geometry (or agent/point) intersects the right-geometry (or agent/point). 7.4.21.3 Special cases: if one of the operand is null, returns false. 7.4.21.4 Examples: bool var0 &lt;- square(5) intersects {10,10}; // var0 equals false 7.4.21.5 See also: disjoint_from, crosses, overlaps, partially_overlaps, touches, 7.4.22 inverse 7.4.22.1 Possible use: inverse (matrix) —&gt; matrix&lt;float&gt; 7.4.22.2 Result: The inverse matrix of the given matrix. If no inverse exists, returns a matrix that has properties that resemble that of an inverse. 7.4.22.3 Examples: matrix&lt;float&gt; var0 &lt;- inverse(matrix([[4,3],[3,2]])); // var0 equals matrix([[-2.0,3.0],[3.0,-4.0]]) 7.4.23 inverse_distance_weighting Same signification as IDW 7.4.24 is 7.4.24.1 Possible use: unknown is any expression —&gt; bool is (unknown , any expression) —&gt; bool 7.4.24.2 Result: returns true if the left operand is of the right operand type, false otherwise 7.4.24.3 Examples: bool var0 &lt;- 0 is int; // var0 equals true bool var1 &lt;- an_agent is node; // var1 equals true bool var2 &lt;- 1 is float; // var2 equals false 7.4.25 is_csv 7.4.25.1 Possible use: is_csv (any) —&gt; bool 7.4.25.2 Result: Tests whether the operand is a csv file. 7.4.26 is_dxf 7.4.26.1 Possible use: is_dxf (any) —&gt; bool 7.4.26.2 Result: Tests whether the operand is a dxf file. 7.4.27 is_error 7.4.27.1 Possible use: is_error (any expression) —&gt; bool 7.4.27.2 Result: Returns whether or not the argument raises an error when evaluated 7.4.28 is_finite 7.4.28.1 Possible use: is_finite (float) —&gt; bool 7.4.28.2 Result: Returns whether the argument is a finite number or not 7.4.28.3 Examples: bool var0 &lt;- is_finite(4.66); // var0 equals true bool var1 &lt;- is_finite(#infinity); // var1 equals false 7.4.29 is_gaml 7.4.29.1 Possible use: is_gaml (any) —&gt; bool 7.4.29.2 Result: Tests whether the operand is a gaml file. 7.4.30 is_geojson 7.4.30.1 Possible use: is_geojson (any) —&gt; bool 7.4.30.2 Result: Tests whether the operand is a geojson file. 7.4.31 is_gif 7.4.31.1 Possible use: is_gif (any) —&gt; bool 7.4.31.2 Result: Tests whether the operand is a gif file. 7.4.32 is_gml 7.4.32.1 Possible use: is_gml (any) —&gt; bool 7.4.32.2 Result: Tests whether the operand is a gml file. 7.4.33 is_grid 7.4.33.1 Possible use: is_grid (any) —&gt; bool 7.4.33.2 Result: Tests whether the operand is a grid file. 7.4.34 is_image 7.4.34.1 Possible use: is_image (any) —&gt; bool 7.4.34.2 Result: Tests whether the operand is a image file. 7.4.35 is_json 7.4.35.1 Possible use: is_json (any) —&gt; bool 7.4.35.2 Result: Tests whether the operand is a json file. 7.4.36 is_number 7.4.36.1 Possible use: is_number (string) —&gt; bool is_number (float) —&gt; bool 7.4.36.2 Result: tests whether the operand represents a numerical value Returns whether the argument is a real number or not 7.4.36.3 Comment: Note that the symbol . should be used for a float value (a string with , will not be considered as a numeric value). Symbols e and E are also accepted. A hexadecimal value should begin with #. 7.4.36.4 Examples: bool var0 &lt;- is_number(&quot;test&quot;); // var0 equals false bool var1 &lt;- is_number(&quot;123.56&quot;); // var1 equals true bool var2 &lt;- is_number(&quot;-1.2e5&quot;); // var2 equals true bool var3 &lt;- is_number(&quot;1,2&quot;); // var3 equals false bool var4 &lt;- is_number(&quot;#12FA&quot;); // var4 equals true bool var5 &lt;- is_number(4.66); // var5 equals true bool var6 &lt;- is_number(#infinity); // var6 equals true bool var7 &lt;- is_number(#nan); // var7 equals false 7.4.37 is_obj 7.4.37.1 Possible use: is_obj (any) —&gt; bool 7.4.37.2 Result: Tests whether the operand is a obj file. 7.4.38 is_osm 7.4.38.1 Possible use: is_osm (any) —&gt; bool 7.4.38.2 Result: Tests whether the operand is a osm file. 7.4.39 is_pgm 7.4.39.1 Possible use: is_pgm (any) —&gt; bool 7.4.39.2 Result: Tests whether the operand is a pgm file. 7.4.40 is_property 7.4.40.1 Possible use: is_property (any) —&gt; bool 7.4.40.2 Result: Tests whether the operand is a property file. 7.4.41 is_R 7.4.41.1 Possible use: is_R (any) —&gt; bool 7.4.41.2 Result: Tests whether the operand is a R file. 7.4.42 is_shape 7.4.42.1 Possible use: is_shape (any) —&gt; bool 7.4.42.2 Result: Tests whether the operand is a shape file. 7.4.43 is_skill 7.4.43.1 Possible use: unknown is_skill string —&gt; bool is_skill (unknown , string) —&gt; bool 7.4.43.2 Result: returns true if the left operand is an agent whose species implements the right-hand skill name 7.4.43.3 Examples: bool var0 &lt;- agentA is_skill &#39;moving&#39;; // var0 equals true 7.4.44 is_svg 7.4.44.1 Possible use: is_svg (any) —&gt; bool 7.4.44.2 Result: Tests whether the operand is a svg file. 7.4.45 is_text 7.4.45.1 Possible use: is_text (any) —&gt; bool 7.4.45.2 Result: Tests whether the operand is a text file. 7.4.46 is_threeds 7.4.46.1 Possible use: is_threeds (any) —&gt; bool 7.4.46.2 Result: Tests whether the operand is a threeds file. 7.4.47 is_URL 7.4.47.1 Possible use: is_URL (any) —&gt; bool 7.4.47.2 Result: Tests whether the operand is a URL file. 7.4.48 is_warning 7.4.48.1 Possible use: is_warning (any expression) —&gt; bool 7.4.48.2 Result: Returns whether or not the argument raises a warning when evaluated 7.4.49 is_xml 7.4.49.1 Possible use: is_xml (any) —&gt; bool 7.4.49.2 Result: Tests whether the operand is a xml file. 7.4.50 json_file 7.4.50.1 Possible use: json_file (string) —&gt; file 7.4.50.2 Result: Constructs a file of type json. Allowed extensions are limited to json 7.4.51 kappa 7.4.51.1 Possible use: kappa (list, list, list) —&gt; float kappa (list, list, list, list) —&gt; float 7.4.51.2 Result: kappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20. kappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories, weights). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20. 7.4.51.3 Examples: kappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3]) float var1 &lt;- kappa([1,3,5,1,5],[1,1,1,1,5],[1,3,5]); // var1 equals the similarity between 0 and 1 float var2 &lt;- kappa([1,1,1,1,5],[1,1,1,1,5],[1,3,5]); // var2 equals 1.0kappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3], [1.0, 2.0, 3.0, 1.0, 5.0]) 7.4.52 kappa_sim 7.4.52.1 Possible use: kappa_sim (list, list, list, list) —&gt; float kappa_sim (list, list, list, list, list) —&gt; float 7.4.52.2 Result: kappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories, weights). Reference: van Vliet, J., Bregt, A.K. &amp; Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8) kappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories). Reference: van Vliet, J., Bregt, A.K. &amp; Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8). 7.4.52.3 Examples: kappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3],[1.0, 2.0, 3.0, 1.0, 5.0]) kappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3]) 7.4.53 kmeans 7.4.53.1 Possible use: list kmeans int —&gt; list&lt;list&gt; kmeans (list , int) —&gt; list&lt;list&gt; kmeans (list, int, int) —&gt; list&lt;list&gt; 7.4.53.2 Result: returns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k) and the maximum number of iterations to run the algorithm for (If negative, no maximum will be used) (maxIt). Usage: kmeans(data,k,maxit) returns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k). Usage: kmeans(data,k) 7.4.53.3 Special cases: if the lengths of two vectors in the right-hand aren’t equal, returns 0 if the lengths of two vectors in the right-hand aren’t equal, returns 0 7.4.53.4 Examples: kmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2,10) list&lt;list&gt; var1 &lt;- kmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2); // var1 equals [] 7.4.54 kurtosis 7.4.54.1 Possible use: kurtosis (list) —&gt; float 7.4.54.2 Result: returns kurtosis value computed from the operand list of values 7.4.54.3 Special cases: if the length of the list is lower than 3, returns NaN 7.4.54.4 Examples: float var0 &lt;- kurtosis ([1,2,3,4,5]); // var0 equals 1.0 7.4.55 kurtosis 7.4.55.1 Possible use: kurtosis (container) —&gt; float float kurtosis float —&gt; float kurtosis (float , float) —&gt; float 7.4.55.2 Result: Returns the kurtosis (aka excess) of a data sequence Returns the kurtosis (aka excess) of a data sequence 7.4.56 last 7.4.56.1 Possible use: last (string) —&gt; string last (container&lt;KeyType,ValueType&gt;) —&gt; ValueType int last container —&gt; list last (int , container) —&gt; list 7.4.56.2 Result: the last element of the operand 7.4.56.3 Comment: the last operator behavior depends on the nature of the operand 7.4.56.4 Special cases: if it is a map, last returns the value of the last pair (in insertion order) if it is a file, last returns the last element of the content of the file (that is also a container) if it is a population, last returns the last agent of the population if it is a graph, last returns a list containing the last edge created if it is a matrix, last returns the element at {length-1,length-1} in the matrix for a matrix of int or float, it will return 0 if the matrix is empty for a matrix of object or geometry, it will return nil if the matrix is empty if it is a string, last returns a string composed of its last character, or an empty string if the operand is empty string var0 &lt;- last (&#39;abce&#39;); // var0 equals &#39;e&#39; if it is a list, last returns the last element of the list, or nil if the list is empty int var1 &lt;- last ([1, 2, 3]); // var1 equals 3 7.4.56.5 See also: first, 7.4.57 last_index_of 7.4.57.1 Possible use: species last_index_of unknown —&gt; int last_index_of (species , unknown) —&gt; int map last_index_of unknown —&gt; unknown last_index_of (map , unknown) —&gt; unknown list last_index_of unknown —&gt; int last_index_of (list , unknown) —&gt; int matrix last_index_of unknown —&gt; point last_index_of (matrix , unknown) —&gt; point string last_index_of string —&gt; int last_index_of (string , string) —&gt; int 7.4.57.2 Result: the index of the last occurence of the right operand in the left operand container 7.4.57.3 Comment: The definition of last_index_of and the type of the index depend on the container 7.4.57.4 Special cases: if the left operand is a species, the last index of an agent is the same as its index if the left operand is a map, last_index_of returns the index as an int (the key of the pair) unknown var0 &lt;- [1::2, 3::4, 5::4] last_index_of 4; // var0 equals 5 if the left operand is a list, last_index_of returns the index as an integer int var1 &lt;- [1,2,3,4,5,6] last_index_of 4; // var1 equals 3 int var2 &lt;- [4,2,3,4,5,4] last_index_of 4; // var2 equals 5 if the left operand is a matrix, last_index_of returns the index as a point point var3 &lt;- matrix([[1,2,3],[4,5,4]]) last_index_of 4; // var3 equals {1.0,2.0} if both operands are strings, returns the index within the left-hand string of the rightmost occurrence of the given right-hand string int var4 &lt;- &quot;abcabcabc&quot; last_index_of &quot;ca&quot;; // var4 equals 5 7.4.57.5 See also: at, index_of, last_index_of, 7.4.58 last_of Same signification as last 7.4.59 last_with 7.4.59.1 Possible use: container last_with any expression —&gt; unknown last_with (container , any expression) —&gt; unknown 7.4.59.2 Result: the last element of the left-hand operand that makes the right-hand operand evaluate to true. 7.4.59.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 7.4.59.4 Special cases: if the left-hand operand is nil, last_with throws an error. If there is no element that satisfies the condition, it returns nil if the left-operand is a map, the keyword each will contain each value unknown var4 &lt;- [1::2, 3::4, 5::6] last_with (each &gt;= 4); // var4 equals 6 unknown var5 &lt;- [1::2, 3::4, 5::6].pairs last_with (each.value &gt;= 4); // var5 equals (5::6) 7.4.59.5 Examples: unknown var0 &lt;- [1,2,3,4,5,6,7,8] last_with (each &gt; 3); // var0 equals 8 unknown var2 &lt;- g2 last_with (length(g2 out_edges_of each) = 0 ); // var2 equals node11 unknown var3 &lt;- (list(node) last_with (round(node(each).location.x) &gt; 32); // var3 equals node3 7.4.59.6 See also: group_by, first_with, where, 7.4.60 layout 7.4.60.1 Possible use: graph layout string —&gt; graph layout (graph , string) —&gt; graph layout (graph, string, int) —&gt; graph layout (graph, string, int, map&lt;string,unknown&gt;) —&gt; graph 7.4.60.2 Result: layouts a GAMA graph. 7.4.61 length 7.4.61.1 Possible use: length (container&lt;KeyType,ValueType&gt;) —&gt; int length (string) —&gt; int 7.4.61.2 Result: the number of elements contained in the operand 7.4.61.3 Comment: the length operator behavior depends on the nature of the operand 7.4.61.4 Special cases: if it is a population, length returns number of agents of the population if it is a graph, length returns the number of vertexes or of edges (depending on the way it was created) if it is a list or a map, length returns the number of elements in the list or map int var0 &lt;- length([12,13]); // var0 equals 2 int var1 &lt;- length([]); // var1 equals 0 if it is a matrix, length returns the number of cells int var2 &lt;- length(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]])); // var2 equals 6 if it is a string, length returns the number of characters int var3 &lt;- length (&#39;I am an agent&#39;); // var3 equals 13 7.4.62 lgamma Same signification as log_gamma 7.4.63 line 7.4.63.1 Possible use: line (container&lt;geometry&gt;) —&gt; geometry container&lt;geometry&gt; line float —&gt; geometry line (container&lt;geometry&gt; , float) —&gt; geometry 7.4.63.2 Result: A polyline geometry from the given list of points represented as a cylinder of radius r. A polyline geometry from the given list of points. 7.4.63.3 Special cases: if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single point, returns a point geometry. if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single point, returns a point geometry. if a radius is added, the given list of points represented as a cylinder of radius r geometry var0 &lt;- polyline([{0,0}, {0,10}, {10,10}, {10,0}],0.2); // var0 equals a polyline geometry composed of the 4 points. 7.4.63.4 Examples: geometry var1 &lt;- polyline([{0,0}, {0,10}, {10,10}, {10,0}]); // var1 equals a polyline geometry composed of the 4 points. 7.4.63.5 See also: around, circle, cone, link, norm, point, polygone, rectangle, square, triangle, 7.4.64 link 7.4.64.1 Possible use: geometry link geometry —&gt; geometry link (geometry , geometry) —&gt; geometry 7.4.64.2 Result: A dynamic line geometry between the location of the two operands 7.4.64.3 Comment: The geometry of the link is a line between the locations of the two operands, which is built and maintained dynamically 7.4.64.4 Special cases: if one of the operands is nil, link returns a point geometry at the location of the other. If both are null, it returns a point geometry at {0,0} 7.4.64.5 Examples: geometry var0 &lt;- link (geom1,geom2); // var0 equals a link geometry between geom1 and geom2. 7.4.64.6 See also: around, circle, cone, line, norm, point, polygon, polyline, rectangle, square, triangle, 7.4.65 list 7.4.65.1 Possible use: list (any) —&gt; list 7.4.65.2 Result: Casts the operand into the type list 7.4.66 list_with 7.4.66.1 Possible use: int list_with any expression —&gt; list list_with (int , any expression) —&gt; list 7.4.66.2 Result: creates a list with a size provided by the first operand, and filled with the second operand 7.4.66.3 Comment: Note that the right operand should be positive, and that the second one is evaluated for each position in the list. 7.4.66.4 See also: list, 7.4.67 ln 7.4.67.1 Possible use: ln (float) —&gt; float ln (int) —&gt; float 7.4.67.2 Result: Returns the natural logarithm (base e) of the operand. 7.4.67.3 Special cases: an exception is raised if the operand is less than zero. 7.4.67.4 Examples: float var0 &lt;- ln(exp(1)); // var0 equals 1.0 float var1 &lt;- ln(1); // var1 equals 0.0 7.4.67.5 See also: exp, 7.4.68 load_graph_from_file 7.4.68.1 Possible use: load_graph_from_file (string) —&gt; graph string load_graph_from_file file —&gt; graph load_graph_from_file (string , file) —&gt; graph string load_graph_from_file string —&gt; graph load_graph_from_file (string , string) —&gt; graph load_graph_from_file (string, species, species) —&gt; graph load_graph_from_file (string, file, species, species) —&gt; graph load_graph_from_file (string, string, species, species) —&gt; graph load_graph_from_file (string, string, species, species, bool) —&gt; graph 7.4.68.2 Result: returns a graph loaded from a given file encoded into a given format. The last boolean parameter indicates whether the resulting graph will be considered as spatial or not by GAMA loads a graph from a file 7.4.68.3 Comment: Available formats: “pajek”: Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.“lgl”: LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.“dot”: DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.“edge”: This format is a simple text file with numeric vertex ids defining the edges.“gexf”: GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.“graphml”: GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.“tlp” or “tulip”: TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. “ncol”: This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:Available formats: “pajek”: Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.“lgl”: LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.“dot”: DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.“edge”: This format is a simple text file with numeric vertex ids defining the edges.“gexf”: GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.“graphml”: GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.“tlp” or “tulip”: TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. “ncol”: This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements: 7.4.68.4 Special cases: “format”: the format of the file “filename”: the filename of the file containing the network “edges_species”: the species of edges “vertices_specy”: the species of vertices “format”: the format of the file “filename”: the filename of the file containing the network “edges_species”: the species of edges “vertices_specy”: the species of vertices “format”: the format of the file, “file”: the file containing the network graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;example_of_Pajek_file&quot;); “format”: the format of the file, “filename”: the filename of the file containing the network graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;example_of_Pajek_file&quot;); “filename”: the filename of the file containing the network, “edges_species”: the species of edges, “vertices_specy”: the species of vertices graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;./example_of_Pajek_file&quot;, myVertexSpecy, myEdgeSpecy ); “format”: the format of the file, “file”: the file containing the network, “edges_species”: the species of edges, “vertices_specy”: the species of vertices graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;example_of_Pajek_file&quot;, myVertexSpecy, myEdgeSpecy ); “file”: the file containing the network graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;example_of_Pajek_file&quot;); 7.4.68.5 Examples: graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;./example_of_Pajek_file&quot;, myVertexSpecy, myEdgeSpecy , true); graph&lt;myVertexSpecy,myEdgeSpecy&gt; myGraph &lt;- load_graph_from_file( &quot;pajek&quot;, &quot;./example_of_Pajek_file&quot;, myVertexSpecy, myEdgeSpecy); 7.4.69 load_shortest_paths 7.4.69.1 Possible use: graph load_shortest_paths matrix —&gt; graph load_shortest_paths (graph , matrix) —&gt; graph 7.4.69.2 Result: put in the graph cache the computed shortest paths contained in the matrix (rows: source, columns: target) 7.4.69.3 Examples: graph var0 &lt;- load_shortest_paths(shortest_paths_matrix); // var0 equals return my_graph with all the shortest paths computed 7.4.70 load_sub_model 7.4.70.1 Possible use: string load_sub_model string —&gt; msi.gama.kernel.experiment.IExperimentAgent load_sub_model (string , string) —&gt; msi.gama.kernel.experiment.IExperimentAgent 7.4.70.2 Result: Load a submodel 7.4.70.3 Comment: loaded submodel 7.4.71 log 7.4.71.1 Possible use: log (float) —&gt; float log (int) —&gt; float 7.4.71.2 Result: Returns the logarithm (base 10) of the operand. 7.4.71.3 Special cases: an exception is raised if the operand is equals or less than zero. 7.4.71.4 Examples: float var0 &lt;- log(10); // var0 equals 1.0 float var1 &lt;- log(1); // var1 equals 0.0 7.4.71.5 See also: ln, 7.4.72 log_gamma 7.4.72.1 Possible use: log_gamma (float) —&gt; float 7.4.72.2 Result: Returns the log of the value of the Gamma function at x. 7.4.73 lower_case 7.4.73.1 Possible use: lower_case (string) —&gt; string 7.4.73.2 Result: Converts all of the characters in the string operand to lower case 7.4.73.3 Examples: string var0 &lt;- lower_case(&quot;Abc&quot;); // var0 equals &#39;abc&#39; 7.4.73.4 See also: upper_case, 7.4.74 main_connected_component 7.4.74.1 Possible use: main_connected_component (graph) —&gt; graph 7.4.74.2 Result: returns the sub-graph corresponding to the main connected components of the graph 7.4.74.3 Examples: graph var0 &lt;- main_connected_component(my_graph); // var0 equals the sub-graph corresponding to the main connected components of the graph 7.4.74.4 See also: connected_components_of, 7.4.75 map 7.4.75.1 Possible use: map (any) —&gt; map 7.4.75.2 Result: Casts the operand into the type map 7.4.76 masked_by 7.4.76.1 Possible use: geometry masked_by container&lt;geometry&gt; —&gt; geometry masked_by (geometry , container&lt;geometry&gt;) —&gt; geometry masked_by (geometry, container&lt;geometry&gt;, int) —&gt; geometry 7.4.76.2 Examples: geometry var0 &lt;- perception_geom masked_by obstacle_list; // var0 equals the geometry representing the part of perception_geom visible from the agent position considering the list of obstacles obstacle_list. geometry var1 &lt;- perception_geom masked_by obstacle_list; // var1 equals the geometry representing the part of perception_geom visible from the agent position considering the list of obstacles obstacle_list. 7.4.77 material 7.4.77.1 Possible use: float material float —&gt; msi.gama.util.GamaMaterial material (float , float) —&gt; msi.gama.util.GamaMaterial 7.4.77.2 Result: Returns 7.4.77.3 Examples: 7.4.77.4 See also: , 7.4.78 material 7.4.78.1 Possible use: material (any) —&gt; material 7.4.78.2 Result: Casts the operand into the type material 7.4.79 matrix 7.4.79.1 Possible use: matrix (any) —&gt; matrix 7.4.79.2 Result: Casts the operand into the type matrix 7.4.80 matrix_with 7.4.80.1 Possible use: point matrix_with any expression —&gt; matrix matrix_with (point , any expression) —&gt; matrix 7.4.80.2 Result: creates a matrix with a size provided by the first operand, and filled with the second operand 7.4.80.3 Comment: Note that both components of the right operand point should be positive, otherwise an exception is raised. 7.4.80.4 See also: matrix, as_matrix, 7.4.81 max 7.4.81.1 Possible use: max (container) —&gt; unknown 7.4.81.2 Result: the maximum element found in the operand 7.4.81.3 Comment: the max operator behavior depends on the nature of the operand 7.4.81.4 Special cases: if it is a population of a list of other type: max transforms all elements into integer and returns the maximum of them if it is a map, max returns the maximum among the list of all elements value if it is a file, max returns the maximum of the content of the file (that is also a container) if it is a graph, max returns the maximum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph) if it is a matrix of int, float or object, max returns the maximum of all the numerical elements (thus all elements for integer and float matrices) if it is a matrix of geometry, max returns the maximum of the list of the geometries if it is a matrix of another type, max returns the maximum of the elements transformed into float if it is a list of int of float, max returns the maximum of all the elements unknown var0 &lt;- max ([100, 23.2, 34.5]); // var0 equals 100.0 if it is a list of points: max returns the maximum of all points as a point (i.e. the point with the greatest coordinate on the x-axis, in case of equality the point with the greatest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. ) unknown var1 &lt;- max([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}]); // var1 equals {9.0,1.0} 7.4.81.5 See also: min, 7.4.82 max_flow_between 7.4.82.1 Possible use: max_flow_between (graph, unknown, unknown) —&gt; msi.gama.util.GamaMap&lt;java.lang.Object,java.lang.Double&gt; 7.4.82.2 Result: The max flow (map in a graph between the source and the sink using Edmonds-Karp algorithm 7.4.82.3 Examples: max_flow_between(my_graph, vertice1, vertice2) 7.4.83 max_of 7.4.83.1 Possible use: container max_of any expression —&gt; unknown max_of (container , any expression) —&gt; unknown 7.4.83.2 Result: the maximum value of the right-hand expression evaluated on each of the elements of the left-hand operand 7.4.83.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 7.4.83.4 Special cases: As of GAMA 1.6, if the left-hand operand is nil or empty, max_of throws an error if the left-operand is a map, the keyword each will contain each value unknown var4 &lt;- [1::2, 3::4, 5::6] max_of (each + 3); // var4 equals 9 7.4.83.5 Examples: unknown var0 &lt;- [1,2,4,3,5,7,6,8] max_of (each * 100 ); // var0 equals 800graph g2 &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); unknown var2 &lt;- g2.vertices max_of (g2 degree_of( each )); // var2 equals 2 unknown var3 &lt;- (list(node) max_of (round(node(each).location.x)); // var3 equals 96 7.4.83.6 See also: min_of, 7.4.84 maximal_cliques_of 7.4.84.1 Possible use: maximal_cliques_of (graph) —&gt; list&lt;list&gt; 7.4.84.2 Result: returns the maximal cliques of a graph using the Bron-Kerbosch clique detection algorithm: A clique is maximal if it is impossible to enlarge it by adding another vertex from the graph. Note that a maximal clique is not necessarily the biggest clique in the graph. 7.4.84.3 Examples: graph my_graph &lt;- graph([]); list&lt;list&gt; var1 &lt;- maximal_cliques_of (my_graph); // var1 equals the list of all the maximal cliques as list 7.4.84.4 See also: biggest_cliques_of, 7.4.85 mean 7.4.85.1 Possible use: mean (container) —&gt; unknown 7.4.85.2 Result: the mean of all the elements of the operand 7.4.85.3 Comment: the elements of the operand are summed (see sum for more details about the sum of container elements ) and then the sum value is divided by the number of elements. 7.4.85.4 Special cases: if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color 7.4.85.5 Examples: unknown var0 &lt;- mean ([4.5, 3.5, 5.5, 7.0]); // var0 equals 5.125 7.4.85.6 See also: sum, 7.4.86 mean_deviation 7.4.86.1 Possible use: mean_deviation (container) —&gt; float 7.4.86.2 Result: the deviation from the mean of all the elements of the operand. See Mean_deviation for more details. 7.4.86.3 Comment: The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded. 7.4.86.4 Examples: float var0 &lt;- mean_deviation ([4.5, 3.5, 5.5, 7.0]); // var0 equals 1.125 7.4.86.5 See also: mean, standard_deviation, 7.4.87 mean_of 7.4.87.1 Possible use: container mean_of any expression —&gt; unknown mean_of (container , any expression) —&gt; unknown 7.4.87.2 Result: the mean of the right-hand expression evaluated on each of the elements of the left-hand operand 7.4.87.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 7.4.87.4 Special cases: if the left-operand is a map, the keyword each will contain each value unknown var1 &lt;- [1::2, 3::4, 5::6] mean_of (each); // var1 equals 4 7.4.87.5 Examples: unknown var0 &lt;- [1,2] mean_of (each * 10 ); // var0 equals 15 7.4.87.6 See also: min_of, max_of, sum_of, product_of, 7.4.88 meanR 7.4.88.1 Possible use: meanR (container) —&gt; unknown 7.4.88.2 Result: returns the mean value of given vector (right-hand operand) in given variable (left-hand operand). 7.4.88.3 Examples: list&lt;int&gt; X &lt;- [2, 3, 1]; int var1 &lt;- meanR(X); // var1 equals 2 7.4.89 median 7.4.89.1 Possible use: median (container) —&gt; unknown 7.4.89.2 Result: the median of all the elements of the operand. 7.4.89.3 Special cases: if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color 7.4.89.4 Examples: unknown var0 &lt;- median ([4.5, 3.5, 5.5, 3.4, 7.0]); // var0 equals 4.5 7.4.89.5 See also: mean, 7.4.90 mental_state 7.4.90.1 Possible use: mental_state (any) —&gt; mental_state 7.4.90.2 Result: Casts the operand into the type mental_state 7.4.91 message 7.4.91.1 Possible use: message (unknown) —&gt; msi.gama.extensions.messaging.GamaMessage 7.4.91.2 Result: to be added 7.4.92 milliseconds_between 7.4.92.1 Possible use: date milliseconds_between date —&gt; float milliseconds_between (date , date) —&gt; float 7.4.92.2 Result: Provide the exact number of milliseconds between two dates. This number can be positive or negative (if the second operand is smaller than the first one) 7.4.92.3 Examples: float var0 &lt;- milliseconds_between(date(&#39;2000-01-01&#39;), date(&#39;2000-02-01&#39;)); // var0 equals 2.6784E9 7.4.93 min 7.4.93.1 Possible use: min (container) —&gt; unknown 7.4.93.2 Result: the minimum element found in the operand. 7.4.93.3 Comment: the min operator behavior depends on the nature of the operand 7.4.93.4 Special cases: if it is a list of points: min returns the minimum of all points as a point (i.e. the point with the smallest coordinate on the x-axis, in case of equality the point with the smallest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. ) if it is a population of a list of other types: min transforms all elements into integer and returns the minimum of them if it is a map, min returns the minimum among the list of all elements value if it is a file, min returns the minimum of the content of the file (that is also a container) if it is a graph, min returns the minimum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph) if it is a matrix of int, float or object, min returns the minimum of all the numerical elements (thus all elements for integer and float matrices) if it is a matrix of geometry, min returns the minimum of the list of the geometries if it is a matrix of another type, min returns the minimum of the elements transformed into float if it is a list of int or float: min returns the minimum of all the elements unknown var0 &lt;- min ([100, 23.2, 34.5]); // var0 equals 23.2 7.4.93.5 See also: max, 7.4.94 min_of 7.4.94.1 Possible use: container min_of any expression —&gt; unknown min_of (container , any expression) —&gt; unknown 7.4.94.2 Result: the minimum value of the right-hand expression evaluated on each of the elements of the left-hand operand 7.4.94.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 7.4.94.4 Special cases: if the left-hand operand is nil or empty, min_of throws an error if the left-operand is a map, the keyword each will contain each value unknown var4 &lt;- [1::2, 3::4, 5::6] min_of (each + 3); // var4 equals 5 7.4.94.5 Examples: unknown var0 &lt;- [1,2,4,3,5,7,6,8] min_of (each * 100 ); // var0 equals 100graph g2 &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); unknown var2 &lt;- g2 min_of (length(g2 out_edges_of each) ); // var2 equals 0 unknown var3 &lt;- (list(node) min_of (round(node(each).location.x)); // var3 equals 4 7.4.94.6 See also: max_of, 7.4.95 minus_days 7.4.95.1 Possible use: date minus_days int —&gt; date minus_days (date , int) —&gt; date 7.4.95.2 Result: Subtract a given number of days from a date 7.4.95.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) minus_days 20; // var0 equals date(&#39;1999-12-12&#39;) 7.4.96 minus_hours 7.4.96.1 Possible use: date minus_hours int —&gt; date minus_hours (date , int) —&gt; date 7.4.96.2 Result: Remove a given number of hours from a date 7.4.96.3 Examples: // equivalent to date1 - 15 #h date var1 &lt;- date(&#39;2000-01-01&#39;) minus_hours 15 ; // var1 equals date(&#39;1999-12-31 09:00:00&#39;) 7.4.97 minus_minutes 7.4.97.1 Possible use: date minus_minutes int —&gt; date minus_minutes (date , int) —&gt; date 7.4.97.2 Result: Subtract a given number of minutes from a date 7.4.97.3 Examples: // date(&#39;2000-01-01&#39;) to date1 - 5#mn date var1 &lt;- date(&#39;2000-01-01&#39;) minus_minutes 5 ; // var1 equals date(&#39;1999-12-31 23:55:00&#39;) 7.4.98 minus_months 7.4.98.1 Possible use: date minus_months int —&gt; date minus_months (date , int) —&gt; date 7.4.98.2 Result: Subtract a given number of months from a date 7.4.98.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) minus_months 5; // var0 equals date(&#39;1999-08-01&#39;) 7.4.99 minus_ms 7.4.99.1 Possible use: date minus_ms int —&gt; date minus_ms (date , int) —&gt; date 7.4.99.2 Result: Remove a given number of milliseconds from a date 7.4.99.3 Examples: // equivalent to date1 - 15 #ms date var1 &lt;- date(&#39;2000-01-01&#39;) minus_ms 1000 ; // var1 equals date(&#39;1999-12-31 23:59:59&#39;) 7.4.100 minus_seconds Same signification as - 7.4.101 minus_weeks 7.4.101.1 Possible use: date minus_weeks int —&gt; date minus_weeks (date , int) —&gt; date 7.4.101.2 Result: Subtract a given number of weeks from a date 7.4.101.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) minus_weeks 15; // var0 equals date(&#39;1999-09-18&#39;) 7.4.102 minus_years 7.4.102.1 Possible use: date minus_years int —&gt; date minus_years (date , int) —&gt; date 7.4.102.2 Result: Subtract a given number of year from a date 7.4.102.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) minus_years 3; // var0 equals date(&#39;1997-01-01&#39;) 7.4.103 mod 7.4.103.1 Possible use: int mod int —&gt; int mod (int , int) —&gt; int 7.4.103.2 Result: Returns the remainder of the integer division of the left-hand operand by the right-hand operand. 7.4.103.3 Special cases: if operands are float, they are truncated if the right-hand operand is equal to zero, raises an exception. 7.4.103.4 Examples: int var0 &lt;- 40 mod 3; // var0 equals 1 7.4.103.5 See also: div, 7.4.104 moment 7.4.104.1 Possible use: moment (container, int, float) —&gt; float 7.4.104.2 Result: Returns the moment of k-th order with constant c of a data sequence 7.4.105 months_between 7.4.105.1 Possible use: date months_between date —&gt; int months_between (date , date) —&gt; int 7.4.105.2 Result: Provide the exact number of months between two dates. This number can be positive or negative (if the second operand is smaller than the first one) 7.4.105.3 Examples: int var0 &lt;- months_between(date(&#39;2000-01-01&#39;), date(&#39;2000-02-01&#39;)); // var0 equals 1 7.4.106 moran 7.4.106.1 Possible use: list&lt;float&gt; moran matrix&lt;float&gt; —&gt; float moran (list&lt;float&gt; , matrix&lt;float&gt;) —&gt; float 7.4.106.2 Special cases: return the Moran Index of the given list of interest points (list of floats) and the weight matrix (matrix of float) float var0 &lt;- moran([1.0, 0.5, 2.0], weight_matrix); // var0 equals the Moran index computed 7.4.107 mul 7.4.107.1 Possible use: mul (container) —&gt; unknown 7.4.107.2 Result: the product of all the elements of the operand 7.4.107.3 Comment: the mul operator behavior depends on the nature of the operand 7.4.107.4 Special cases: if it is a list of points: mul returns the product of all points as a point (each coordinate is the product of the corresponding coordinate of each element) if it is a list of other types: mul transforms all elements into integer and multiplies them if it is a map, mul returns the product of the value of all elements if it is a file, mul returns the product of the content of the file (that is also a container) if it is a graph, mul returns the product of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph) if it is a matrix of int, float or object, mul returns the product of all the numerical elements (thus all elements for integer and float matrices) if it is a matrix of geometry, mul returns the product of the list of the geometries if it is a matrix of other types: mul transforms all elements into float and multiplies them if it is a list of int or float: mul returns the product of all the elements unknown var0 &lt;- mul ([100, 23.2, 34.5]); // var0 equals 80040.0 7.4.107.5 See also: sum, "],
["operators-n-to-r.html", "Chapter 8 Operators (N to R) 8.1 Definition 8.2 Priority between operators 8.3 Using actions as operators 8.4 Operators", " Chapter 8 Operators (N to R) This file is automatically generated from java files. Do Not Edit It. 8.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 8.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 8.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 8.4 Operators 8.4.1 nb_cycles 8.4.1.1 Possible use: nb_cycles (graph) —&gt; int 8.4.1.2 Result: returns the maximum number of independent cycles in a graph. This number (u) is estimated through the number of nodes (v), links (e) and of sub-graphs (p): u = e - v + p. 8.4.1.3 Examples: graph graphEpidemio &lt;- graph([]); int var1 &lt;- nb_cycles(graphEpidemio); // var1 equals the number of cycles in the graph 8.4.1.4 See also: alpha_index, beta_index, gamma_index, connectivity_index, 8.4.2 neighbors_at 8.4.2.1 Possible use: geometry neighbors_at float —&gt; list neighbors_at (geometry , float) —&gt; list 8.4.2.2 Result: a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the right-hand operand to the left-hand operand (geometry, agent, point). 8.4.2.3 Comment: The topology used to compute the neighborhood is the one of the left-operand if this one is an agent; otherwise the one of the agent applying the operator. 8.4.2.4 Examples: list var0 &lt;- (self neighbors_at (10)); // var0 equals all the agents located at a distance lower or equal to 10 to the agent applying the operator. 8.4.2.5 See also: neighbors_of, closest_to, overlapping, agents_overlapping, agents_inside, agent_closest_to, at_distance, 8.4.3 neighbors_of 8.4.3.1 Possible use: graph neighbors_of unknown —&gt; list neighbors_of (graph , unknown) —&gt; list topology neighbors_of agent —&gt; list neighbors_of (topology , agent) —&gt; list neighbors_of (topology, geometry, float) —&gt; list 8.4.3.2 Result: a list, containing all the agents of the same species than the argument (if it is an agent) located at a distance inferior or equal to 1 to the right-hand operand agent considering the left-hand operand topology. 8.4.3.3 Special cases: a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the third argument to the second argument (agent, geometry or point) considering the first operand topology. list var3 &lt;- neighbors_of (topology(self), self,10); // var3 equals all the agents located at a distance lower or equal to 10 to the agent applying the operator considering its topology. 8.4.3.4 Examples: list var0 &lt;- graphEpidemio neighbors_of (node(3)); // var0 equals [node0,node2] list var1 &lt;- graphFromMap neighbors_of node({12,45}); // var1 equals [{1.0,5.0},{34.0,56.0}] list var2 &lt;- topology(self) neighbors_of self; // var2 equals returns all the agents located at a distance lower or equal to 1 to the agent applying the operator considering its topology. 8.4.3.5 See also: predecessors_of, successors_of, neighbors_at, closest_to, overlapping, agents_overlapping, agents_inside, agent_closest_to, 8.4.4 new_emotion 8.4.4.1 Possible use: new_emotion (string) —&gt; emotion string new_emotion predicate —&gt; emotion new_emotion (string , predicate) —&gt; emotion string new_emotion float —&gt; emotion new_emotion (string , float) —&gt; emotion string new_emotion agent —&gt; emotion new_emotion (string , agent) —&gt; emotion new_emotion (string, float, float) —&gt; emotion new_emotion (string, float, agent) —&gt; emotion new_emotion (string, float, predicate) —&gt; emotion new_emotion (string, predicate, agent) —&gt; emotion new_emotion (string, float, float, agent) —&gt; emotion new_emotion (string, float, predicate, agent) —&gt; emotion new_emotion (string, float, predicate, float) —&gt; emotion new_emotion (string, float, predicate, float, agent) —&gt; emotion 8.4.4.2 Result: a new emotion with the given properties (name) a new emotion with the given properties (name,intensity,decay) a new emotion with the given properties (name,about) a new emotion with the given properties (name) a new emotion with the given properties (name) a new emotion with the given properties (name,intensity,about) a new emotion with the given properties (name) a new emotion with the given properties (name) a new emotion with the given properties (name) a new emotion with the given properties (name, intensity) a new emotion with the given properties (name) a new emotion with the given properties (name) 8.4.4.3 Examples: emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;,12.3,4) emotion(&quot;joy&quot;,eatFood) emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;) emotion(&quot;joy&quot;,12.3,eatFood) emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;,12.3) emotion(&quot;joy&quot;,12.3,eatFood,4) emotion(&quot;joy&quot;,12.3,eatFood,4) 8.4.5 new_folder 8.4.5.1 Possible use: new_folder (string) —&gt; file 8.4.5.2 Result: opens an existing repository or create a new folder if it does not exist. 8.4.5.3 Special cases: If the specified string does not refer to an existing repository, the repository is created. If the string refers to an existing file, an exception is risen. 8.4.5.4 Examples: file dirNewT &lt;- new_folder(&quot;incl/&quot;); // dirNewT represents the repository &quot;../incl/&quot; // eventually creates the directory ../incl 8.4.5.5 See also: folder, file, 8.4.6 new_mental_state 8.4.6.1 Possible use: new_mental_state (string) —&gt; mental_state string new_mental_state predicate —&gt; mental_state new_mental_state (string , predicate) —&gt; mental_state string new_mental_state emotion —&gt; mental_state new_mental_state (string , emotion) —&gt; mental_state string new_mental_state mental_state —&gt; mental_state new_mental_state (string , mental_state) —&gt; mental_state new_mental_state (string, predicate, int) —&gt; mental_state new_mental_state (string, mental_state, agent) —&gt; mental_state new_mental_state (string, emotion, agent) —&gt; mental_state new_mental_state (string, emotion, float) —&gt; mental_state new_mental_state (string, mental_state, float) —&gt; mental_state new_mental_state (string, predicate, agent) —&gt; mental_state new_mental_state (string, mental_state, int) —&gt; mental_state new_mental_state (string, emotion, int) —&gt; mental_state new_mental_state (string, predicate, float) —&gt; mental_state new_mental_state (string, predicate, int, agent) —&gt; mental_state new_mental_state (string, emotion, float, int) —&gt; mental_state new_mental_state (string, predicate, float, int) —&gt; mental_state new_mental_state (string, mental_state, float, int) —&gt; mental_state new_mental_state (string, mental_state, float, agent) —&gt; mental_state new_mental_state (string, emotion, int, agent) —&gt; mental_state new_mental_state (string, mental_state, int, agent) —&gt; mental_state new_mental_state (string, emotion, float, agent) —&gt; mental_state new_mental_state (string, predicate, float, agent) —&gt; mental_state new_mental_state (string, emotion, float, int, agent) —&gt; mental_state new_mental_state (string, mental_state, float, int, agent) —&gt; mental_state new_mental_state (string, predicate, float, int, agent) —&gt; mental_state 8.4.6.2 Result: a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state a new mental state 8.4.6.3 Examples: new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) new_mental-state(belief) 8.4.7 new_predicate 8.4.7.1 Possible use: new_predicate (string) —&gt; predicate string new_predicate int —&gt; predicate new_predicate (string , int) —&gt; predicate string new_predicate map —&gt; predicate new_predicate (string , map) —&gt; predicate string new_predicate bool —&gt; predicate new_predicate (string , bool) —&gt; predicate string new_predicate agent —&gt; predicate new_predicate (string , agent) —&gt; predicate new_predicate (string, map, int) —&gt; predicate new_predicate (string, map, agent) —&gt; predicate new_predicate (string, map, bool) —&gt; predicate new_predicate (string, map, int, bool) —&gt; predicate new_predicate (string, map, int, agent) —&gt; predicate new_predicate (string, map, bool, agent) —&gt; predicate new_predicate (string, map, int, bool, agent) —&gt; predicate 8.4.7.2 Result: a new predicate with the given properties (name) a new predicate with the given is_true (name, lifetime) a new predicate with the given properties (name, values, lifetime) a new predicate with the given properties (name, values, agentCause) a new predicate with the given properties (name, values, lifetime, is_true) a new predicate with the given properties (name, values, is_true) a new predicate with the given properties (name, values) a new predicate with the given properties (name, values, lifetime, agentCause) a new predicate with the given properties (name, values, lifetime, is_true, agentCause) a new predicate with the given properties (name, values, is_true, agentCause) a new predicate with the given is_true (name, is_true) a new predicate with the given properties (name, values, lifetime) 8.4.7.3 Examples: predicate(&quot;people to meet&quot;) predicate(&quot;hasWater&quot;, 10 predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], true) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], agentA) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], 10,true) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], true) predicate(&quot;people to meet&quot;, people1 ) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], 10, agentA) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], 10, true, agentA) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], true, agentA) predicate(&quot;hasWater&quot;, true) predicate(&quot;people to meet&quot;, [&quot;time&quot;::10], true) 8.4.8 new_social_link 8.4.8.1 Possible use: new_social_link (agent) —&gt; msi.gaml.architecture.simplebdi.SocialLink new_social_link (agent, float, float, float, float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 8.4.8.2 Result: a new social link a new social link 8.4.8.3 Examples: new_social_link(agentA) new_social_link(agentA,0.0,-0.1,0.2,0.1) 8.4.9 node 8.4.9.1 Possible use: node (unknown) —&gt; unknown unknown node float —&gt; unknown node (unknown , float) —&gt; unknown 8.4.10 nodes 8.4.10.1 Possible use: nodes (container) —&gt; container 8.4.11 norm 8.4.11.1 Possible use: norm (point) —&gt; float 8.4.11.2 Result: the norm of the vector with the coordinates of the point operand. 8.4.11.3 Examples: float var0 &lt;- norm({3,4}); // var0 equals 5.0 8.4.12 Norm 8.4.12.1 Possible use: Norm (any) —&gt; Norm 8.4.12.2 Result: Casts the operand into the type Norm 8.4.13 normal_area 8.4.13.1 Possible use: normal_area (float, float, float) —&gt; float 8.4.13.2 Result: Returns the area to the left of x in the normal distribution with the given mean and standard deviation. 8.4.14 normal_density 8.4.14.1 Possible use: normal_density (float, float, float) —&gt; float 8.4.14.2 Result: Returns the probability of x in the normal distribution with the given mean and standard deviation. 8.4.15 normal_inverse 8.4.15.1 Possible use: normal_inverse (float, float, float) —&gt; float 8.4.15.2 Result: Returns the x in the normal distribution with the given mean and standard deviation, to the left of which lies the given area. normal.Inverse returns the value in terms of standard deviations from the mean, so we need to adjust it for the given mean and standard deviation. 8.4.16 not Same signification as ! 8.4.17 obj_file 8.4.17.1 Possible use: obj_file (string) —&gt; file 8.4.17.2 Result: Constructs a file of type obj. Allowed extensions are limited to obj, OBJ 8.4.18 of Same signification as . 8.4.19 of_generic_species 8.4.19.1 Possible use: container of_generic_species species —&gt; list of_generic_species (container , species) —&gt; list 8.4.19.2 Result: a list, containing the agents of the left-hand operand whose species is that denoted by the right-hand operand and whose species extends the right-hand operand species 8.4.19.3 Examples: // species test {} // species sous_test parent: test {} list var2 &lt;- [sous_test(0),sous_test(1),test(2),test(3)] of_generic_species test; // var2 equals [sous_test0,sous_test1,test2,test3] list var3 &lt;- [sous_test(0),sous_test(1),test(2),test(3)] of_generic_species sous_test; // var3 equals [sous_test0,sous_test1] list var4 &lt;- [sous_test(0),sous_test(1),test(2),test(3)] of_species test; // var4 equals [test2,test3] list var5 &lt;- [sous_test(0),sous_test(1),test(2),test(3)] of_species sous_test; // var5 equals [sous_test0,sous_test1] 8.4.19.4 See also: of_species, 8.4.20 of_species 8.4.20.1 Possible use: container of_species species —&gt; list of_species (container , species) —&gt; list 8.4.20.2 Result: a list, containing the agents of the left-hand operand whose species is the one denoted by the right-hand operand.The expression agents of_species (species self) is equivalent to agents where (species each = species self); however, the advantage of using the first syntax is that the resulting list is correctly typed with the right species, whereas, in the second syntax, the parser cannot determine the species of the agents within the list (resulting in the need to cast it explicitly if it is to be used in an ask statement, for instance). 8.4.20.3 Special cases: if the right operand is nil, of_species returns the right operand 8.4.20.4 Examples: list var0 &lt;- (self neighbors_at 10) of_species (species (self)); // var0 equals all the neighboring agents of the same species. list var1 &lt;- [test(0),test(1),node(1),node(2)] of_species test; // var1 equals [test0,test1] 8.4.20.5 See also: of_generic_species, 8.4.21 one_of 8.4.21.1 Possible use: one_of (container&lt;KeyType,ValueType&gt;) —&gt; ValueType 8.4.21.2 Result: one of the values stored in this container at a random key 8.4.21.3 Comment: the one_of operator behavior depends on the nature of the operand 8.4.21.4 Special cases: if it is a graph, one_of returns one of the lists of edges if it is a file, one_of returns one of the elements of the content of the file (that is also a container) if the operand is empty, one_of returns nil if it is a list or a matrix, one_of returns one of the values of the list or of the matrix int i &lt;- any ([1,2,3]); //i equals 1, 2 or 3string sMat &lt;- one_of(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]])); // sMat equals &quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;, &quot;c21&quot;,&quot;c22&quot; or &quot;c23&quot; if it is a map, one_of returns one the value of a random pair of the map int im &lt;- one_of ([2::3, 4::5, 6::7]); // im equals 3, 5 or 7 bool var6 &lt;- [2::3, 4::5, 6::7].values contains im; // var6 equals true if it is a population, one_of returns one of the agents of the population bug b &lt;- one_of(bug); // Given a previously defined species bug, b is one of the created bugs, e.g. bug3 8.4.21.5 See also: contains, 8.4.22 open_simplex_generator 8.4.22.1 Possible use: open_simplex_generator (float, float, float) —&gt; float 8.4.22.2 Result: take a x, y and a bias parameters and gives a value 8.4.22.3 Examples: float var0 &lt;- open_simplex_generator(2,3,253); // var0 equals 10.2 8.4.23 or 8.4.23.1 Possible use: bool or any expression —&gt; bool or (bool , any expression) —&gt; bool 8.4.23.2 Result: a bool value, equal to the logical or between the left-hand operand and the right-hand operand. 8.4.23.3 Comment: both operands are always casted to bool before applying the operator. Thus, an expression like 1 or 0 is accepted and returns true. 8.4.23.4 See also: bool, and, !, 8.4.24 or 8.4.24.1 Possible use: predicate or predicate —&gt; predicate or (predicate , predicate) —&gt; predicate 8.4.24.2 Result: create a new predicate from two others by including them as subintentions. It’s an exclusive “or” 8.4.24.3 Examples: predicate1 or predicate2 8.4.25 osm_file 8.4.25.1 Possible use: string osm_file map&lt;string,list&gt; —&gt; file osm_file (string , map&lt;string,list&gt;) —&gt; file osm_file (string, map&lt;string,list&gt;, int) —&gt; file 8.4.25.2 Result: opens a file that a is a kind of OSM file with some filtering, forcing the initial CRS to be the one indicated by the second int parameter (see http://spatialreference.org/ref/epsg/). If this int parameter is equal to 0, the data is considered as already projected. opens a file that a is a kind of OSM file with some filtering. 8.4.25.3 Comment: The file should have a OSM file extension, cf. file type definition for supported file extensions.The file should have a OSM file extension, cf. file type definition for supported file extensions. 8.4.25.4 Special cases: If the specified string does not refer to an existing OSM file, an exception is risen. If the specified string does not refer to an existing OSM file, an exception is risen. 8.4.25.5 Examples: file myOSMfile2 &lt;- osm_file(&quot;../includes/rouen.osm&quot;,[&quot;highway&quot;::[&quot;primary&quot;,&quot;motorway&quot;]], 0); file myOSMfile &lt;- osm_file(&quot;../includes/rouen.osm&quot;, [&quot;highway&quot;::[&quot;primary&quot;,&quot;motorway&quot;]]); 8.4.25.6 See also: file, 8.4.26 out_degree_of 8.4.26.1 Possible use: graph out_degree_of unknown —&gt; int out_degree_of (graph , unknown) —&gt; int 8.4.26.2 Result: returns the out degree of a vertex (right-hand operand) in the graph given as left-hand operand. 8.4.26.3 Examples: int var1 &lt;- graphFromMap out_degree_of (node(3)); // var1 equals 4 8.4.26.4 See also: in_degree_of, degree_of, 8.4.27 out_edges_of 8.4.27.1 Possible use: graph out_edges_of unknown —&gt; list out_edges_of (graph , unknown) —&gt; list 8.4.27.2 Result: returns the list of the out-edges of a vertex (right-hand operand) in the graph given as left-hand operand. 8.4.27.3 Examples: list var1 &lt;- graphFromMap out_edges_of (node(3)); // var1 equals 3 8.4.27.4 See also: in_edges_of, 8.4.28 overlapping 8.4.28.1 Possible use: container&lt;agent&gt; overlapping geometry —&gt; list&lt;geometry&gt; overlapping (container&lt;agent&gt; , geometry) —&gt; list&lt;geometry&gt; 8.4.28.2 Result: A list of agents or geometries among the left-operand list, species or meta-population (addition of species), overlapping the operand (casted as a geometry). 8.4.28.3 Examples: list&lt;geometry&gt; var0 &lt;- [ag1, ag2, ag3] overlapping(self); // var0 equals return the agents among ag1, ag2 and ag3 that overlap the shape of the agent applying the operator.(species1 + species2) overlapping self 8.4.28.4 See also: neighbors_at, neighbors_of, agent_closest_to, agents_inside, closest_to, inside, agents_overlapping, 8.4.29 overlaps 8.4.29.1 Possible use: geometry overlaps geometry —&gt; bool overlaps (geometry , geometry) —&gt; bool 8.4.29.2 Result: A boolean, equal to true if the left-geometry (or agent/point) overlaps the right-geometry (or agent/point). 8.4.29.3 Special cases: if one of the operand is null, returns false. if one operand is a point, returns true if the point is included in the geometry 8.4.29.4 Examples: bool var0 &lt;- polyline([{10,10},{20,20}]) overlaps polyline([{15,15},{25,25}]); // var0 equals true bool var1 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}]); // var1 equals true bool var2 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {25,25}; // var2 equals false bool var3 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{35,35},{35,45},{45,45},{45,35}]); // var3 equals false bool var4 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polyline([{10,10},{20,20}]); // var4 equals true bool var5 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {15,15}; // var5 equals true bool var6 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{0,0},{0,30},{30,30}, {30,0}]); // var6 equals true bool var7 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}]); // var7 equals true bool var8 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{10,20},{20,20},{20,30},{10,30}]); // var8 equals true 8.4.29.5 See also: disjoint_from, crosses, intersects, partially_overlaps, touches, 8.4.30 pair 8.4.30.1 Possible use: pair (any) —&gt; pair 8.4.30.2 Result: Casts the operand into the type pair 8.4.31 partially_overlaps 8.4.31.1 Possible use: geometry partially_overlaps geometry —&gt; bool partially_overlaps (geometry , geometry) —&gt; bool 8.4.31.2 Result: A boolean, equal to true if the left-geometry (or agent/point) partially overlaps the right-geometry (or agent/point). 8.4.31.3 Comment: if one geometry operand fully covers the other geometry operand, returns false (contrarily to the overlaps operator). 8.4.31.4 Special cases: if one of the operand is null, returns false. 8.4.31.5 Examples: bool var0 &lt;- polyline([{10,10},{20,20}]) partially_overlaps polyline([{15,15},{25,25}]); // var0 equals true bool var1 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}]); // var1 equals true bool var2 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {25,25}; // var2 equals false bool var3 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{35,35},{35,45},{45,45},{45,35}]); // var3 equals false bool var4 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polyline([{10,10},{20,20}]); // var4 equals false bool var5 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {15,15}; // var5 equals false bool var6 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{0,0},{0,30},{30,30}, {30,0}]); // var6 equals false bool var7 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}]); // var7 equals true bool var8 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{10,20},{20,20},{20,30},{10,30}]); // var8 equals false 8.4.31.6 See also: disjoint_from, crosses, overlaps, intersects, touches, 8.4.32 path 8.4.32.1 Possible use: path (any) —&gt; path 8.4.32.2 Result: Casts the operand into the type path 8.4.33 path_between 8.4.33.1 Possible use: list&lt;agent&gt; path_between container&lt;geometry&gt; —&gt; path path_between (list&lt;agent&gt; , container&lt;geometry&gt;) —&gt; path topology path_between container&lt;geometry&gt; —&gt; path path_between (topology , container&lt;geometry&gt;) —&gt; path msi.gama.util.GamaMap&lt;msi.gama.metamodel.agent.IAgent,java.lang.Object&gt; path_between container&lt;geometry&gt; —&gt; path path_between (msi.gama.util.GamaMap&lt;msi.gama.metamodel.agent.IAgent,java.lang.Object&gt; , container&lt;geometry&gt;) —&gt; path path_between (topology, geometry, geometry) —&gt; path path_between (msi.gama.util.GamaMap&lt;msi.gama.metamodel.agent.IAgent,java.lang.Object&gt;, geometry, geometry) —&gt; path path_between (list&lt;agent&gt;, geometry, geometry) —&gt; path path_between (graph, geometry, geometry) —&gt; path 8.4.33.2 Result: The shortest path between several objects according to set of cells The shortest path between two objects according to set of cells with corresponding weights The shortest path between two objects according to set of cells The shortest path between several objects according to set of cells with corresponding weights The shortest path between a list of two objects in a graph 8.4.33.3 Examples: path var0 &lt;- path_between (cell_grid where each.is_free, [ag1, ag2, ag3]); // var0 equals A path between ag1 and ag2 and ag3 passing through the given cell_grid agents path var1 &lt;- my_topology path_between (ag1, ag2); // var1 equals A path between ag1 and ag2 path var2 &lt;- path_between (cell_grid as_map (each::each.is_obstacle ? 9999.0 : 1.0), ag1, ag2); // var2 equals A path between ag1 and ag2 passing through the given cell_grid agents with a minimal cost path var3 &lt;- path_between (cell_grid where each.is_free, ag1, ag2); // var3 equals A path between ag1 and ag2 passing through the given cell_grid agents path var4 &lt;- my_topology path_between [ag1, ag2]; // var4 equals A path between ag1 and ag2 path var5 &lt;- path_between (cell_grid as_map (each::each.is_obstacle ? 9999.0 : 1.0), [ag1, ag2, ag3]); // var5 equals A path between ag1 and ag2 and ag3 passing through the given cell_grid agents with minimal cost path var6 &lt;- path_between (my_graph, ag1, ag2); // var6 equals A path between ag1 and ag2 8.4.33.4 See also: towards, direction_to, distance_between, direction_between, path_to, distance_to, 8.4.34 path_to 8.4.34.1 Possible use: geometry path_to geometry —&gt; path path_to (geometry , geometry) —&gt; path point path_to point —&gt; path path_to (point , point) —&gt; path 8.4.34.2 Result: A path between two geometries (geometries, agents or points) considering the topology of the agent applying the operator. 8.4.34.3 Examples: path var0 &lt;- ag1 path_to ag2; // var0 equals the path between ag1 and ag2 considering the topology of the agent applying the operator 8.4.34.4 See also: towards, direction_to, distance_between, direction_between, path_between, distance_to, 8.4.35 paths_between 8.4.35.1 Possible use: paths_between (graph, pair, int) —&gt; msi.gama.util.IList&lt;msi.gama.util.path.GamaSpatialPath&gt; 8.4.35.2 Result: The K shortest paths between a list of two objects in a graph 8.4.35.3 Examples: msi.gama.util.IList&lt;msi.gama.util.path.GamaSpatialPath&gt; var0 &lt;- paths_between(my_graph, ag1:: ag2, 2); // var0 equals the 2 shortest paths (ordered by length) between ag1 and ag2 8.4.36 pbinom Same signification as binomial_sum 8.4.37 pchisq Same signification as chi_square 8.4.38 percent_absolute_deviation 8.4.38.1 Possible use: list&lt;float&gt; percent_absolute_deviation list&lt;float&gt; —&gt; float percent_absolute_deviation (list&lt;float&gt; , list&lt;float&gt;) —&gt; float 8.4.38.2 Result: percent absolute deviation indicator for 2 series of values: percent_absolute_deviation(list_vals_observe,list_vals_sim) 8.4.38.3 Examples: percent_absolute_deviation([200,300,150,150,200],[250,250,100,200,200]) 8.4.39 percentile Same signification as quantile_inverse 8.4.40 pgamma Same signification as gamma_distribution 8.4.41 pgm_file 8.4.41.1 Possible use: pgm_file (string) —&gt; file 8.4.41.2 Result: Constructs a file of type pgm. Allowed extensions are limited to pgm 8.4.42 plan 8.4.42.1 Possible use: container&lt;geometry&gt; plan float —&gt; geometry plan (container&lt;geometry&gt; , float) —&gt; geometry 8.4.42.2 Result: A polyline geometry from the given list of points. 8.4.42.3 Special cases: if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single point, returns a point geometry. 8.4.42.4 Examples: geometry var0 &lt;- polyplan([{0,0}, {0,10}, {10,10}, {10,0}],10); // var0 equals a polyline geometry composed of the 4 points with a depth of 10. 8.4.42.5 See also: around, circle, cone, link, norm, point, polygone, rectangle, square, triangle, 8.4.43 plus_days 8.4.43.1 Possible use: date plus_days int —&gt; date plus_days (date , int) —&gt; date 8.4.43.2 Result: Add a given number of days to a date 8.4.43.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) plus_days 12; // var0 equals date(&#39;2000-01-13&#39;) 8.4.44 plus_hours 8.4.44.1 Possible use: date plus_hours int —&gt; date plus_hours (date , int) —&gt; date 8.4.44.2 Result: Add a given number of hours to a date 8.4.44.3 Examples: // equivalent to date1 + 15 #h date var1 &lt;- date(&#39;2000-01-01&#39;) plus_hours 24; // var1 equals date(&#39;2000-01-02&#39;) 8.4.45 plus_minutes 8.4.45.1 Possible use: date plus_minutes int —&gt; date plus_minutes (date , int) —&gt; date 8.4.45.2 Result: Add a given number of minutes to a date 8.4.45.3 Examples: // equivalent to date1 + 5 #mn date var1 &lt;- date(&#39;2000-01-01&#39;) plus_minutes 5 ; // var1 equals date(&#39;2000-01-01 00:05:00&#39;) 8.4.46 plus_months 8.4.46.1 Possible use: date plus_months int —&gt; date plus_months (date , int) —&gt; date 8.4.46.2 Result: Add a given number of months to a date 8.4.46.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) plus_months 5; // var0 equals date(&#39;2000-06-01&#39;) 8.4.47 plus_ms 8.4.47.1 Possible use: date plus_ms int —&gt; date plus_ms (date , int) —&gt; date 8.4.47.2 Result: Add a given number of milliseconds to a date 8.4.47.3 Examples: // equivalent to date(&#39;2000-01-01&#39;) + 15 #ms date var1 &lt;- date(&#39;2000-01-01&#39;) plus_ms 1000 ; // var1 equals date(&#39;2000-01-01 00:00:01&#39;) 8.4.48 plus_seconds Same signification as + 8.4.49 plus_weeks 8.4.49.1 Possible use: date plus_weeks int —&gt; date plus_weeks (date , int) —&gt; date 8.4.49.2 Result: Add a given number of weeks to a date 8.4.49.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) plus_weeks 15; // var0 equals date(&#39;2000-04-15&#39;) 8.4.50 plus_years 8.4.50.1 Possible use: date plus_years int —&gt; date plus_years (date , int) —&gt; date 8.4.50.2 Result: Add a given number of years to a date 8.4.50.3 Examples: date var0 &lt;- date(&#39;2000-01-01&#39;) plus_years 15; // var0 equals date(&#39;2015-01-01&#39;) 8.4.51 pnorm Same signification as normal_area 8.4.52 point 8.4.52.1 Possible use: float point float —&gt; point point (float , float) —&gt; point int point int —&gt; point point (int , int) —&gt; point float point int —&gt; point point (float , int) —&gt; point int point float —&gt; point point (int , float) —&gt; point point (float, int, float) —&gt; point point (float, float, float) —&gt; point point (int, int, int) —&gt; point point (int, float, float) —&gt; point point (int, int, float) —&gt; point point (float, float, int) —&gt; point point (float, int, int) —&gt; point 8.4.52.2 Result: internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y} instead. internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y} instead. internal use only. Use the standard construction {x,y} instead. internal use only. Use the standard construction {x,y} instead. internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y, z} instead. internal use only. Use the standard construction {x,y, z} instead. 8.4.53 points_along 8.4.53.1 Possible use: geometry points_along list&lt;float&gt; —&gt; list points_along (geometry , list&lt;float&gt;) —&gt; list 8.4.53.2 Result: A list of points along the operand-geometry given its location in terms of rate of distance from the starting points of the geometry. 8.4.53.3 Examples: list var0 &lt;- line([{10,10},{80,80}]) points_along ([0.3, 0.5, 0.9]); // var0 equals the list of following points: [{31.0,31.0,0.0},{45.0,45.0,0.0},{73.0,73.0,0.0}] 8.4.53.4 See also: closest_points_with, farthest_point_to, points_at, points_on, 8.4.54 points_at 8.4.54.1 Possible use: int points_at float —&gt; list&lt;point&gt; points_at (int , float) —&gt; list&lt;point&gt; 8.4.54.2 Result: A list of left-operand number of points located at a the right-operand distance to the agent location. 8.4.54.3 Examples: list&lt;point&gt; var0 &lt;- 3 points_at(20.0); // var0 equals returns [pt1, pt2, pt3] with pt1, pt2 and pt3 located at a distance of 20.0 to the agent location 8.4.54.4 See also: any_location_in, any_point_in, closest_points_with, farthest_point_to, 8.4.55 points_on 8.4.55.1 Possible use: geometry points_on float —&gt; list points_on (geometry , float) —&gt; list 8.4.55.2 Result: A list of points of the operand-geometry distant from each other to the float right-operand . 8.4.55.3 Examples: list var0 &lt;- square(5) points_on(2); // var0 equals a list of points belonging to the exterior ring of the square distant from each other of 2. 8.4.55.4 See also: closest_points_with, farthest_point_to, points_at, 8.4.56 poisson 8.4.56.1 Possible use: poisson (float) —&gt; int 8.4.56.2 Result: A value from a random variable following a Poisson distribution (with the positive expected number of occurence lambda as operand). 8.4.56.3 Comment: The Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time and/or space if these events occur with a known average rate and independently of the time since the last event, cf. Poisson distribution on Wikipedia. 8.4.56.4 Examples: int var0 &lt;- poisson(3.5); // var0 equals a random positive integer 8.4.56.5 See also: binomial, gauss, 8.4.57 polygon 8.4.57.1 Possible use: polygon (container&lt;agent&gt;) —&gt; geometry 8.4.57.2 Result: A polygon geometry from the given list of points. 8.4.57.3 Special cases: if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single point, returns a point geometry if the operand is composed of 2 points, returns a polyline geometry. 8.4.57.4 Examples: geometry var0 &lt;- polygon([{0,0}, {0,10}, {10,10}, {10,0}]); // var0 equals a polygon geometry composed of the 4 points. 8.4.57.5 See also: around, circle, cone, line, link, norm, point, polyline, rectangle, square, triangle, 8.4.58 polyhedron 8.4.58.1 Possible use: container&lt;geometry&gt; polyhedron float —&gt; geometry polyhedron (container&lt;geometry&gt; , float) —&gt; geometry 8.4.58.2 Result: A polyhedron geometry from the given list of points. 8.4.58.3 Special cases: if the operand is nil, returns the point geometry {0,0} if the operand is composed of a single point, returns a point geometry if the operand is composed of 2 points, returns a polyline geometry. 8.4.58.4 Examples: geometry var0 &lt;- polyhedron([{0,0}, {0,10}, {10,10}, {10,0}],10); // var0 equals a polygon geometry composed of the 4 points and of depth 10. 8.4.58.5 See also: around, circle, cone, line, link, norm, point, polyline, rectangle, square, triangle, 8.4.59 polyline Same signification as line 8.4.60 polyplan Same signification as plan 8.4.61 predecessors_of 8.4.61.1 Possible use: graph predecessors_of unknown —&gt; list predecessors_of (graph , unknown) —&gt; list 8.4.61.2 Result: returns the list of predecessors (i.e. sources of in edges) of the given vertex (right-hand operand) in the given graph (left-hand operand) 8.4.61.3 Examples: list var1 &lt;- graphEpidemio predecessors_of ({1,5}); // var1 equals [] list var2 &lt;- graphEpidemio predecessors_of node({34,56}); // var2 equals [{12;45}] 8.4.61.4 See also: neighbors_of, successors_of, 8.4.62 predicate 8.4.62.1 Possible use: predicate (any) —&gt; predicate 8.4.62.2 Result: Casts the operand into the type predicate 8.4.63 predict 8.4.63.1 Possible use: regression predict list&lt;float&gt; —&gt; float predict (regression , list&lt;float&gt;) —&gt; float 8.4.63.2 Result: returns the value predict by the regression parameters for a given instance. Usage: predict(regression, instance) 8.4.63.3 Examples: predict(my_regression, [1,2,3]) 8.4.64 product Same signification as mul 8.4.65 product_of 8.4.65.1 Possible use: container product_of any expression —&gt; unknown product_of (container , any expression) —&gt; unknown 8.4.65.2 Result: the product of the right-hand expression evaluated on each of the elements of the left-hand operand 8.4.65.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 8.4.65.4 Special cases: if the left-operand is a map, the keyword each will contain each value unknown var1 &lt;- [1::2, 3::4, 5::6] product_of (each); // var1 equals 48 8.4.65.5 Examples: unknown var0 &lt;- [1,2] product_of (each * 10 ); // var0 equals 200 8.4.65.6 See also: min_of, max_of, sum_of, mean_of, 8.4.66 promethee_DM 8.4.66.1 Possible use: msi.gama.util.IList&lt;java.util.List&gt; promethee_DM msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt; —&gt; int promethee_DM (msi.gama.util.IList&lt;java.util.List&gt; , msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;) —&gt; int 8.4.66.2 Result: The index of the best candidate according to the Promethee II method. This method is based on a comparison per pair of possible candidates along each criterion: all candidates are compared to each other by pair and ranked. More information about this method can be found in [http://www.sciencedirect.com/science?_ob=ArticleURL&amp;_udi=B6VCT-4VF56TV-1&amp;_user=10&amp;_coverDate=01%2F01%2F2010&amp;_rdoc=1&amp;_fmt=high&amp;_orig=search&amp;_sort=d&amp;_docanchor=&amp;view=c&amp;_searchStrId=1389284642&amp;_rerunOrigin=google&amp;_acct=C000050221&amp;_version=1&amp;_urlVersion=0&amp;_userid=10&amp;md5=d334de2a4e0d6281199a39857648cd36 Behzadian, M., Kazemzadeh, R., Albadvi, A., M., A.: PROMETHEE: A comprehensive literature review on methodologies and applications. European Journal of Operational Research(2009)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fours elements: a name, a weight, a preference value (p) and an indifference value (q). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. 8.4.66.3 Special cases: returns -1 is the list of candidates is nil or empty 8.4.66.4 Examples: int var0 &lt;- promethee_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: true],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0,&quot;p&quot;::0.5, &quot;q&quot;::0.0, &quot;s&quot;::1.0, &quot;maximize&quot; :: false]]); // var0 equals 1 8.4.66.5 See also: weighted_means_DM, electre_DM, evidence_theory_DM, 8.4.67 property_file 8.4.67.1 Possible use: property_file (string) —&gt; file 8.4.67.2 Result: Constructs a file of type property. Allowed extensions are limited to properties 8.4.68 pValue_for_fStat 8.4.68.1 Possible use: pValue_for_fStat (float, int, int) —&gt; float 8.4.68.2 Result: Returns the P value of F statistic fstat with numerator degrees of freedom dfn and denominator degress of freedom dfd. Uses the incomplete Beta function. 8.4.69 pValue_for_tStat 8.4.69.1 Possible use: float pValue_for_tStat int —&gt; float pValue_for_tStat (float , int) —&gt; float 8.4.69.2 Result: Returns the P value of the T statistic tstat with df degrees of freedom. This is a two-tailed test so we just double the right tail which is given by studentT of -|tstat|. 8.4.70 pyramid 8.4.70.1 Possible use: pyramid (float) —&gt; geometry 8.4.70.2 Result: A square geometry which side size is given by the operand. 8.4.70.3 Comment: the center of the pyramid is by default the location of the current agent in which has been called this operator. 8.4.70.4 Special cases: returns nil if the operand is nil. 8.4.70.5 Examples: geometry var0 &lt;- pyramid(5); // var0 equals a geometry as a square with side_size = 5. 8.4.70.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, rectangle, square, 8.4.71 quantile 8.4.71.1 Possible use: container quantile float —&gt; float quantile (container , float) —&gt; float 8.4.71.2 Result: Returns the phi-quantile; that is, an element elem for which holds that phi percent of data elements are less than elem. The quantile need not necessarily be contained in the data sequence, it can be a linear interpolation. 8.4.72 quantile_inverse 8.4.72.1 Possible use: container quantile_inverse float —&gt; float quantile_inverse (container , float) —&gt; float 8.4.72.2 Result: Returns how many percent of the elements contained in the receiver are &lt;= element. Does linear interpolation if the element is not contained but lies in between two contained elements. 8.4.73 R_correlation Same signification as corR 8.4.74 R_file 8.4.74.1 Possible use: R_file (string) —&gt; file 8.4.74.2 Result: Constructs a file of type R. Allowed extensions are limited to r 8.4.75 R_mean Same signification as meanR 8.4.76 range 8.4.76.1 Possible use: range (int) —&gt; list int range int —&gt; list range (int , int) —&gt; list range (int, int, int) —&gt; list 8.4.76.2 Result: Allows to build a list of int representing all contiguous values from the first to the second argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value Allows to build a list of int representing all contiguous values from zero to the argument. The range can be increasing or decreasing. Passing 0 will return a singleton list with 0 Allows to build a list of int representing all contiguous values from the first to the second argument, using the step represented by the third argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value. Passing a step of 0 will result in an exception. Attempting to build infinite ranges (e.g. end &gt; start with a negative step) will similarly not be accepted and yield an exception 8.4.77 rank_interpolated 8.4.77.1 Possible use: container rank_interpolated float —&gt; float rank_interpolated (container , float) —&gt; float 8.4.77.2 Result: Returns the linearly interpolated number of elements in a list less or equal to a given element. The rank is the number of elements &lt;= element. Ranks are of the form {0, 1, 2,…, sortedList.size()}. If no element is &lt;= element, then the rank is zero. If the element lies in between two contained elements, then linear interpolation is used and a non integer value is returned. 8.4.78 read 8.4.78.1 Possible use: read (string) —&gt; unknown 8.4.78.2 Result: Reads an attribute of the agent. The attribute’s name is specified by the operand. 8.4.78.3 Examples: unknown agent_name &lt;- read (&#39;name&#39;); //agent_name equals reads the &#39;name&#39; variable of agent then assigns the returned value to the &#39;agent_name&#39; variable. 8.4.79 rectangle 8.4.79.1 Possible use: rectangle (point) —&gt; geometry float rectangle float —&gt; geometry rectangle (float , float) —&gt; geometry point rectangle point —&gt; geometry rectangle (point , point) —&gt; geometry 8.4.79.2 Result: A rectangle geometry which side sizes are given by the operands. 8.4.79.3 Comment: the center of the rectangle is by default the location of the current agent in which has been called this operator.the center of the rectangle is by default the location of the current agent in which has been called this operator. 8.4.79.4 Special cases: returns nil if the operand is nil. returns nil if the operand is nil. returns nil if the operand is nil. 8.4.79.5 Examples: geometry var0 &lt;- rectangle(10, 5); // var0 equals a geometry as a rectangle with width = 10 and height = 5. geometry var1 &lt;- rectangle({10, 5}); // var1 equals a geometry as a rectangle with width = 10 and height = 5. geometry var2 &lt;- rectangle({2.0,6.0}, {6.0,20.0}); // var2 equals a geometry as a rectangle with {2.0,6.0} as the upper-left corner, {6.0,20.0} as the lower-right corner. 8.4.79.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, square, triangle, 8.4.80 reduced_by Same signification as - 8.4.81 regression 8.4.81.1 Possible use: regression (any) —&gt; regression 8.4.81.2 Result: Casts the operand into the type regression 8.4.82 remove_duplicates Same signification as distinct 8.4.83 remove_node_from 8.4.83.1 Possible use: geometry remove_node_from graph —&gt; graph remove_node_from (geometry , graph) —&gt; graph 8.4.83.2 Result: removes a node from a graph. 8.4.83.3 Comment: all the edges containing this node are also removed. 8.4.83.4 Examples: graph var0 &lt;- node(0) remove_node_from graphEpidemio; // var0 equals the graph without node(0) 8.4.84 replace 8.4.84.1 Possible use: replace (string, string, string) —&gt; string 8.4.84.2 Result: Returns the String resulting by replacing for the first operand all the sub-strings corresponding the second operand by the third operand 8.4.84.3 Examples: string var0 &lt;- replace(&#39;to be or not to be,that is the question&#39;,&#39;to&#39;, &#39;do&#39;); // var0 equals &#39;do be or not do be,that is the question&#39; 8.4.84.4 See also: replace_regex, 8.4.85 replace_regex 8.4.85.1 Possible use: replace_regex (string, string, string) —&gt; string 8.4.85.2 Result: Returns the String resulting by replacing for the first operand all the sub-strings corresponding to the regular expression given in the second operand by the third operand 8.4.85.3 Examples: string var0 &lt;- replace_regex(&quot;colour, color&quot;, &quot;colou?r&quot;, &quot;col&quot;); // var0 equals &#39;col, col&#39; 8.4.85.4 See also: replace, 8.4.86 reverse 8.4.86.1 Possible use: reverse (msi.gama.util.GamaMap&lt;K,V&gt;) —&gt; container reverse (container&lt;KeyType,ValueType&gt;) —&gt; container reverse (string) —&gt; string 8.4.86.2 Result: the operand elements in the reversed order in a copy of the operand. 8.4.86.3 Comment: the reverse operator behavior depends on the nature of the operand 8.4.86.4 Special cases: if it is a file, reverse returns a copy of the file with a reversed content if it is a population, reverse returns a copy of the population with elements in the reversed order if it is a graph, reverse returns a copy of the graph (with all edges and vertexes), with all of the edges reversed if it is a list, reverse returns a copy of the operand list with elements in the reversed order container var0 &lt;- reverse ([10,12,14]); // var0 equals [14, 12, 10] if it is a map, reverse returns a copy of the operand map with each pair in the reversed order (i.e. all keys become values and values become keys) map&lt;int,string&gt; var1 &lt;- reverse ([&#39;k1&#39;::44, &#39;k2&#39;::32, &#39;k3&#39;::12]); // var1 equals [44::&#39;k1&#39;, 32::&#39;k2&#39;, 12::&#39;k3&#39;] if it is a matrix, reverse returns a new matrix containing the transpose of the operand. container var2 &lt;- reverse(matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]])); // var2 equals matrix([[&quot;c11&quot;,&quot;c21&quot;],[&quot;c12&quot;,&quot;c22&quot;],[&quot;c13&quot;,&quot;c23&quot;]]) if it is a string, reverse returns a new string with characters in the reversed order string var3 &lt;- reverse (&#39;abcd&#39;); // var3 equals &#39;dcba&#39; 8.4.87 rewire_n 8.4.87.1 Possible use: graph rewire_n int —&gt; graph rewire_n (graph , int) —&gt; graph 8.4.87.2 Result: rewires the given count of edges. 8.4.87.3 Comment: If there are too many edges, all the edges will be rewired. 8.4.87.4 Examples: graph var1 &lt;- graphEpidemio rewire_n 10; // var1 equals the graph with 3 edges rewired 8.4.88 rgb 8.4.88.1 Possible use: rgb rgb int —&gt; rgb rgb (rgb , int) —&gt; rgb rgb rgb float —&gt; rgb rgb (rgb , float) —&gt; rgb string rgb int —&gt; rgb rgb (string , int) —&gt; rgb rgb (int, int, int) —&gt; rgb rgb (int, int, int, float) —&gt; rgb rgb (int, int, int, int) —&gt; rgb 8.4.88.2 Result: Returns a color defined by red, green, blue components and an alpha blending value. 8.4.88.3 Special cases: It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0.0 and 1.0) It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0 and 255) It can be used with r=red, g=green, b=blue, each between 0 and 255 It can be used with a color and an alpha between 0 and 255 It can be used with a color and an alpha between 0 and 1 It can be used with a name of color and alpha (between 0 and 255) 8.4.88.4 Examples: rgb var0 &lt;- rgb (255,0,0,0.5); // var0 equals a light red color rgb var1 &lt;- rgb (255,0,0,125); // var1 equals a light red color rgb var3 &lt;- rgb (255,0,0); // var3 equals #red rgb var4 &lt;- rgb(rgb(255,0,0),125); // var4 equals a light red color rgb var5 &lt;- rgb(rgb(255,0,0),0.5); // var5 equals a light red color rgb var6 &lt;- rgb (&quot;red&quot;); // var6 equals rgb(255,0,0) 8.4.88.5 See also: hsb, 8.4.89 rgb 8.4.89.1 Possible use: rgb (any) —&gt; rgb 8.4.89.2 Result: Casts the operand into the type rgb 8.4.90 rgb_to_xyz 8.4.90.1 Possible use: rgb_to_xyz (file) —&gt; list&lt;point&gt; 8.4.90.2 Result: A list of point corresponding to RGB value of an image (r:x , g:y, b:z) 8.4.90.3 Examples: list&lt;point&gt; var0 &lt;- rgb_to_xyz(texture); // var0 equals a list of points 8.4.91 rms 8.4.91.1 Possible use: int rms float —&gt; float rms (int , float) —&gt; float 8.4.91.2 Result: Returns the RMS (Root-Mean-Square) of a data sequence. The RMS of data sequence is the square-root of the mean of the squares of the elements in the data sequence. It is a measure of the average size of the elements of a data sequence. 8.4.92 rnd 8.4.92.1 Possible use: rnd (float) —&gt; float rnd (int) —&gt; int rnd (point) —&gt; point float rnd float —&gt; float rnd (float , float) —&gt; float point rnd point —&gt; point rnd (point , point) —&gt; point int rnd int —&gt; int rnd (int , int) —&gt; int rnd (float, float, float) —&gt; float rnd (point, point, float) —&gt; point rnd (int, int, int) —&gt; int 8.4.92.2 Result: a random integer in the interval [0, operand] 8.4.92.3 Comment: to obtain a probability between 0 and 1, use the expression (rnd n) / n, where n is used to indicate the precision 8.4.92.4 Special cases: if the operand is a float, returns an uniformly distributed float random number in [0.0, to] if the operand is a point, returns a point with three random float ordinates, each in the interval [0, ordinate of argument] 8.4.92.5 Examples: float var0 &lt;- rnd(3.4); // var0 equals a random float between 0.0 and 3.4 float var1 &lt;- rnd (2.0, 4.0); // var1 equals a float number between 2.0 and 4.0 float var2 &lt;- rnd (2.0, 4.0, 0.5); // var2 equals a float number between 2.0 and 4.0 every 0.5 int var3 &lt;- rnd (2); // var3 equals 0, 1 or 2 float var4 &lt;- rnd (1000) / 1000; // var4 equals a float between 0 and 1 with a precision of 0.001 point var5 &lt;- rnd ({2.5,3, 0.0}); // var5 equals {x,y} with x in [0.0,2.0], y in [0.0,3.0], z = 0.0 point var6 &lt;- rnd ({2.0, 4.0}, {2.0, 5.0, 10.0}); // var6 equals a point with x = 2.0, y between 2.0 and 4.0 and z between 0.0 and 10.0 int var7 &lt;- rnd (2, 4); // var7 equals 2, 3 or 4 point var8 &lt;- rnd ({2.0, 4.0}, {2.0, 5.0, 10.0}, 1); // var8 equals a point with x = 2.0, y equal to 2.0, 3.0 or 4.0 and z between 0.0 and 10.0 every 1.0 int var9 &lt;- rnd (2, 12, 4); // var9 equals 2, 6 or 10 8.4.92.6 See also: flip, 8.4.93 rnd_choice 8.4.93.1 Possible use: rnd_choice (list) —&gt; int 8.4.93.2 Result: returns an index of the given list with a probability following the (normalized) distribution described in the list (a form of lottery) 8.4.93.3 Examples: int var0 &lt;- rnd_choice([0.2,0.5,0.3]); // var0 equals 2/10 chances to return 0, 5/10 chances to return 1, 3/10 chances to return 2 8.4.93.4 See also: rnd, 8.4.94 rnd_color 8.4.94.1 Possible use: rnd_color (int) —&gt; rgb int rnd_color int —&gt; rgb rnd_color (int , int) —&gt; rgb 8.4.94.2 Result: rgb color rgb color 8.4.94.3 Comment: Return a random color equivalent to rgb(rnd(first_op, last_op),rnd(first_op, last_op),rnd(first_op, last_op))Return a random color equivalent to rgb(rnd(operand),rnd(operand),rnd(operand)) 8.4.94.4 Examples: rgb var0 &lt;- rnd_color(100, 200); // var0 equals a random color, equivalent to rgb(rnd(100, 200),rnd(100, 200),rnd(100, 200)) rgb var1 &lt;- rnd_color(255); // var1 equals a random color, equivalent to rgb(rnd(255),rnd(255),rnd(255)) 8.4.94.5 See also: rgb, hsb, 8.4.95 rotated_by 8.4.95.1 Possible use: geometry rotated_by float —&gt; geometry rotated_by (geometry , float) —&gt; geometry geometry rotated_by int —&gt; geometry rotated_by (geometry , int) —&gt; geometry rotated_by (geometry, float, point) —&gt; geometry 8.4.95.2 Result: A geometry resulting from the application of a rotation by the right-hand operand angle (degree) to the left-hand operand (geometry, agent, point) A geometry resulting from the application of a rotation by the right-hand operand angles (degree) along the three axis (x,y,z) to the left-hand operand (geometry, agent, point) 8.4.95.3 Comment: the right-hand operand can be a float or a int 8.4.95.4 Examples: geometry var0 &lt;- self rotated_by 45; // var0 equals the geometry resulting from a 45 degrees rotation to the geometry of the agent applying the operator. geometry var1 &lt;- rotated_by(pyramid(10),45, {1,0,0}); // var1 equals the geometry resulting from a 45 degrees rotation along the {1,0,0} vector to the geometry of the agent applying the operator. 8.4.95.5 See also: transformed_by, translated_by, 8.4.96 round 8.4.96.1 Possible use: round (int) —&gt; int round (point) —&gt; point round (float) —&gt; int 8.4.96.2 Result: Returns the rounded value of the operand. 8.4.96.3 Special cases: if the operand is an int, round returns it 8.4.96.4 Examples: point var0 &lt;- {12345.78943, 12345.78943, 12345.78943} with_precision 2; // var0 equals {12345.79,12345.79,12345.79} int var1 &lt;- round (0.51); // var1 equals 1 int var2 &lt;- round (100.2); // var2 equals 100 int var3 &lt;- round(-0.51); // var3 equals -1 8.4.96.5 See also: round, int, with_precision, 8.4.97 row_at 8.4.97.1 Possible use: matrix row_at int —&gt; list row_at (matrix , int) —&gt; list 8.4.97.2 Result: returns the row at a num_line (right-hand operand) 8.4.97.3 Examples: list var0 &lt;- matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]]) row_at 2; // var0 equals [&quot;el13&quot;,&quot;el23&quot;,&quot;el33&quot;] 8.4.97.4 See also: column_at, columns_list, 8.4.98 rows_list 8.4.98.1 Possible use: rows_list (matrix) —&gt; list&lt;list&gt; 8.4.98.2 Result: returns a list of the rows of the matrix, with each row as a list of elements 8.4.98.3 Examples: list&lt;list&gt; var0 &lt;- rows_list(matrix([[&quot;el11&quot;,&quot;el12&quot;,&quot;el13&quot;],[&quot;el21&quot;,&quot;el22&quot;,&quot;el23&quot;],[&quot;el31&quot;,&quot;el32&quot;,&quot;el33&quot;]])); // var0 equals [[&quot;el11&quot;,&quot;el21&quot;,&quot;el31&quot;],[&quot;el12&quot;,&quot;el22&quot;,&quot;el32&quot;],[&quot;el13&quot;,&quot;el23&quot;,&quot;el33&quot;]] 8.4.98.4 See also: columns_list, "],
["operators-s-to-z.html", "Chapter 9 Operators (S to Z) 9.1 Definition 9.2 Priority between operators 9.3 Using actions as operators 9.4 Operators", " Chapter 9 Operators (S to Z) This file is automatically generated from java files. Do Not Edit It. 9.1 Definition Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Most of them use a classical prefixed functional syntax (i.e. operator_name(operand1, operand2, operand3), see below), with the exception of arithmetic (e.g. +, /), logical (and, or), comparison (e.g. &gt;, &lt;), access (., [..]) and pair (::) operators, which require an infixed notation (i.e. operand1 operator_symbol operand1). The ternary functional if-else operator, ? :, uses a special infixed syntax composed with two symbols (e.g. operand1 ? operand2 : operand3). Two unary operators (- and !) use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. - 10, ! (operand1 or operand2)). Finally, special constructor operators ({...} for constructing points, [...] for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. {1,2,3}, [operand1, operand2, ..., operandn] or [key1::value1, key2::value2... keyn::valuen]). With the exception of these special cases above, the following rules apply to the syntax of operators: * if they only have one operand, the functional prefixed syntax is mandatory (e.g. operator_name(operand1)) * if they have two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2)) or the infixed syntax (e.g. operand1 operator_name operand2) can be used. * if they have more than two arguments, either the functional prefixed syntax (e.g. operator_name(operand1, operand2, ..., operand)) or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. operand1 operator_name(operand2, ..., operand)) can be used. All of these alternative syntaxes are completely equivalent. Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the shuffle operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list. 9.2 Priority between operators The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first. GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely: * the constructor operators, like ::, used to compose pairs of operands, have the lowest priority of all operators (e.g. a &gt; b :: b &gt; c will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, [a &gt; 10, b &gt; 5] will return a list of boolean values. * it is followed by the ?: operator, the functional if-else (e.g. a &gt; b ? a + 10 : a - 10 will return the result of the if-else). * next are the logical operators, and and or (e.g. a &gt; b or b &gt; c will return the value of the test) * next are the comparison operators (i.e. &gt;, &lt;, &lt;=, &gt;=, =, !=) * next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators) * next the unary operators - and ! * next the access operators . and [] (e.g. {1,2,3}.x &gt; 20 + {4,5,6}.y will return the result of the comparison between the x and y ordinates of the two points) * and finally the functional operators, which have the highest priority of all. 9.3 Using actions as operators Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand. For instance, if the following species is defined: species spec1 { int min(int x, int y) { return x &gt; y ? x : y; } } Any agent instance of spec1 can use min as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable: global { init { create spec1; spec1 my_agent &lt;- spec1[0]; int the_min &lt;- my_agent min(10,20); // or min(my_agent, 10, 20); } } If the action doesn’t have any operands, the syntax to use is my_agent the_action(). Finally, if it does not return a value, it might still be used but is considering as returning a value of type unknown (e.g. unknown result &lt;- my_agent the_action(op1, op2);). Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent). 9.4 Operators 9.4.1 sample 9.4.1.1 Possible use: sample (any expression) —&gt; string string sample any expression —&gt; string sample (string , any expression) —&gt; string sample (list, int, bool) —&gt; list sample (list, int, bool, list) —&gt; list 9.4.1.2 Result: takes a sample of the specified size from the elements of x using either with or without replacement with given weights takes a sample of the specified size from the elements of x using either with or without replacement 9.4.1.3 Examples: list var0 &lt;- sample([2,10,1],2,false,[0.1,0.7,0.2]); // var0 equals [10,2] list var1 &lt;- sample([2,10,1],2,false); // var1 equals [1,2] 9.4.2 Sanction 9.4.2.1 Possible use: Sanction (any) —&gt; Sanction 9.4.2.2 Result: Casts the operand into the type Sanction 9.4.3 saveSimulation 9.4.3.1 Possible use: saveSimulation (string) —&gt; int 9.4.4 scaled_by Same signification as * 9.4.5 scaled_to 9.4.5.1 Possible use: geometry scaled_to point —&gt; geometry scaled_to (geometry , point) —&gt; geometry 9.4.5.2 Result: allows to restrict the size of a geometry so that it fits in the envelope {width, height, depth} defined by the second operand 9.4.5.3 Examples: geometry var0 &lt;- shape scaled_to {10,10}; // var0 equals a geometry corresponding to the geometry of the agent applying the operator scaled so that it fits a square of 10x10 9.4.6 select Same signification as where 9.4.7 serialize 9.4.7.1 Possible use: serialize (unknown) —&gt; string 9.4.7.2 Result: It serializes any object, i.e. transform it into a string. 9.4.8 serializeAgent 9.4.8.1 Possible use: serializeAgent (agent) —&gt; string 9.4.9 set_about 9.4.9.1 Possible use: emotion set_about predicate —&gt; emotion set_about (emotion , predicate) —&gt; emotion 9.4.9.2 Result: change the about value of the given emotion 9.4.9.3 Examples: emotion set_about predicate1 9.4.10 set_agent 9.4.10.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_agent agent —&gt; msi.gaml.architecture.simplebdi.SocialLink set_agent (msi.gaml.architecture.simplebdi.SocialLink , agent) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.10.2 Result: change the agent value of the given social link 9.4.10.3 Examples: social_link set_agent agentA 9.4.11 set_agent_cause 9.4.11.1 Possible use: predicate set_agent_cause agent —&gt; predicate set_agent_cause (predicate , agent) —&gt; predicate emotion set_agent_cause agent —&gt; emotion set_agent_cause (emotion , agent) —&gt; emotion 9.4.11.2 Result: change the agentCause value of the given predicate change the agentCause value of the given emotion 9.4.11.3 Examples: predicate set_agent_cause agentA emotion set_agent_cause agentA 9.4.12 set_decay 9.4.12.1 Possible use: emotion set_decay float —&gt; emotion set_decay (emotion , float) —&gt; emotion 9.4.12.2 Result: change the decay value of the given emotion 9.4.12.3 Examples: emotion set_decay 12 9.4.13 set_dominance 9.4.13.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_dominance float —&gt; msi.gaml.architecture.simplebdi.SocialLink set_dominance (msi.gaml.architecture.simplebdi.SocialLink , float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.13.2 Result: change the dominance value of the given social link 9.4.13.3 Examples: social_link set_dominance 0.4 9.4.14 set_familiarity 9.4.14.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_familiarity float —&gt; msi.gaml.architecture.simplebdi.SocialLink set_familiarity (msi.gaml.architecture.simplebdi.SocialLink , float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.14.2 Result: change the familiarity value of the given social link 9.4.14.3 Examples: social_link set_familiarity 0.4 9.4.15 set_intensity 9.4.15.1 Possible use: emotion set_intensity float —&gt; emotion set_intensity (emotion , float) —&gt; emotion 9.4.15.2 Result: change the intensity value of the given emotion 9.4.15.3 Examples: emotion set_intensity 12 9.4.16 set_lifetime 9.4.16.1 Possible use: mental_state set_lifetime int —&gt; mental_state set_lifetime (mental_state , int) —&gt; mental_state 9.4.16.2 Result: change the lifetime value of the given mental state 9.4.16.3 Examples: mental state set_lifetime 1 9.4.17 set_liking 9.4.17.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_liking float —&gt; msi.gaml.architecture.simplebdi.SocialLink set_liking (msi.gaml.architecture.simplebdi.SocialLink , float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.17.2 Result: change the liking value of the given social link 9.4.17.3 Examples: social_link set_liking 0.4 9.4.18 set_modality 9.4.18.1 Possible use: mental_state set_modality string —&gt; mental_state set_modality (mental_state , string) —&gt; mental_state 9.4.18.2 Result: change the modality value of the given mental state 9.4.18.3 Examples: mental state set_modality belief 9.4.19 set_predicate 9.4.19.1 Possible use: mental_state set_predicate predicate —&gt; mental_state set_predicate (mental_state , predicate) —&gt; mental_state 9.4.19.2 Result: change the predicate value of the given mental state 9.4.19.3 Examples: mental state set_predicate pred1 9.4.20 set_solidarity 9.4.20.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_solidarity float —&gt; msi.gaml.architecture.simplebdi.SocialLink set_solidarity (msi.gaml.architecture.simplebdi.SocialLink , float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.20.2 Result: change the solidarity value of the given social link 9.4.20.3 Examples: social_link set_solidarity 0.4 9.4.21 set_strength 9.4.21.1 Possible use: mental_state set_strength float —&gt; mental_state set_strength (mental_state , float) —&gt; mental_state 9.4.21.2 Result: change the strength value of the given mental state 9.4.21.3 Examples: mental state set_strength 1.0 9.4.22 set_trust 9.4.22.1 Possible use: msi.gaml.architecture.simplebdi.SocialLink set_trust float —&gt; msi.gaml.architecture.simplebdi.SocialLink set_trust (msi.gaml.architecture.simplebdi.SocialLink , float) —&gt; msi.gaml.architecture.simplebdi.SocialLink 9.4.22.2 Result: change the trust value of the given social link 9.4.22.3 Examples: social_link set_familiarity 0.4 9.4.23 set_truth 9.4.23.1 Possible use: predicate set_truth bool —&gt; predicate set_truth (predicate , bool) —&gt; predicate 9.4.23.2 Result: change the is_true value of the given predicate 9.4.23.3 Examples: predicate set_truth false 9.4.24 set_z 9.4.24.1 Possible use: geometry set_z container&lt;float&gt; —&gt; geometry set_z (geometry , container&lt;float&gt;) —&gt; geometry set_z (geometry, int, float) —&gt; geometry 9.4.24.2 Result: Sets the z ordinate of the n-th point of a geometry to the value provided by the third argument 9.4.24.3 Examples: loop i from: 0 to: length(shape.points) - 1{set shape &lt;- set_z (shape, i, 3.0);} shape &lt;- triangle(3) set_z [5,10,14]; 9.4.25 shape_file 9.4.25.1 Possible use: shape_file (string) —&gt; file 9.4.25.2 Result: Constructs a file of type shape. Allowed extensions are limited to shp 9.4.26 shuffle 9.4.26.1 Possible use: shuffle (container) —&gt; list shuffle (matrix) —&gt; matrix shuffle (string) —&gt; string 9.4.26.2 Result: The elements of the operand in random order. 9.4.26.3 Special cases: if the operand is empty, returns an empty list (or string, matrix) 9.4.26.4 Examples: list var0 &lt;- shuffle ([12, 13, 14]); // var0 equals [14,12,13] (for example) matrix var1 &lt;- shuffle (matrix([[&quot;c11&quot;,&quot;c12&quot;,&quot;c13&quot;],[&quot;c21&quot;,&quot;c22&quot;,&quot;c23&quot;]])); // var1 equals matrix([[&quot;c12&quot;,&quot;c21&quot;,&quot;c11&quot;],[&quot;c13&quot;,&quot;c22&quot;,&quot;c23&quot;]]) (for example) string var2 &lt;- shuffle (&#39;abc&#39;); // var2 equals &#39;bac&#39; (for example) 9.4.26.5 See also: reverse, 9.4.27 signum 9.4.27.1 Possible use: signum (float) —&gt; int 9.4.27.2 Result: Returns -1 if the argument is negative, +1 if it is positive, 0 if it is equal to zero or not a number 9.4.27.3 Examples: int var0 &lt;- signum(-12); // var0 equals -1 int var1 &lt;- signum(14); // var1 equals 1 int var2 &lt;- signum(0); // var2 equals 0 9.4.28 simple_clustering_by_distance 9.4.28.1 Possible use: container&lt;agent&gt; simple_clustering_by_distance float —&gt; list&lt;list&lt;agent&gt;&gt; simple_clustering_by_distance (container&lt;agent&gt; , float) —&gt; list&lt;list&lt;agent&gt;&gt; 9.4.28.2 Result: A list of agent groups clustered by distance considering a distance min between two groups. 9.4.28.3 Examples: list&lt;list&lt;agent&gt;&gt; var0 &lt;- [ag1, ag2, ag3, ag4, ag5] simpleClusteringByDistance 20.0; // var0 equals for example, can return [[ag1, ag3], [ag2], [ag4, ag5]] 9.4.28.4 See also: hierarchical_clustering, 9.4.29 simple_clustering_by_envelope_distance Same signification as simple_clustering_by_distance 9.4.30 simplex_generator 9.4.30.1 Possible use: simplex_generator (float, float, float) —&gt; float 9.4.30.2 Result: take a x, y and a bias parameters and gives a value 9.4.30.3 Examples: float var0 &lt;- simplex_generator(2,3,253); // var0 equals 10.2 9.4.31 simplification 9.4.31.1 Possible use: geometry simplification float —&gt; geometry simplification (geometry , float) —&gt; geometry 9.4.31.2 Result: A geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance. 9.4.31.3 Comment: The algorithm used for the simplification is Douglas-Peucker 9.4.31.4 Examples: geometry var0 &lt;- self simplification 0.1; // var0 equals the geometry resulting from the application of the Douglas-Peuker algorithm on the geometry of the agent applying the operator with a tolerance distance of 0.1. 9.4.32 sin 9.4.32.1 Possible use: sin (int) —&gt; float sin (float) —&gt; float 9.4.32.2 Result: Returns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated. 9.4.32.3 Special cases: Operand values out of the range [0-359] are normalized. 9.4.32.4 Examples: float var0 &lt;- sin (0); // var0 equals 0.0 float var1 &lt;- sin(360) with_precision 10 with_precision 10; // var1 equals 0.0 9.4.32.5 See also: cos, tan, 9.4.33 sin_rad 9.4.33.1 Possible use: sin_rad (float) —&gt; float 9.4.33.2 Result: Returns the value (in [-1,1]) of the sinus of the operand (in radians). 9.4.33.3 Examples: float var0 &lt;- sin_rad(#pi); // var0 equals 0.0 9.4.33.4 See also: cos_rad, tan_rad, 9.4.34 since 9.4.34.1 Possible use: since (date) —&gt; bool any expression since date —&gt; bool since (any expression , date) —&gt; bool 9.4.34.2 Result: Returns true if the current_date of the model is after (or equal to) the date passed in argument. Synonym of ‘current_date &gt;= argument’. Can be used, like ‘after’, in its composed form with 2 arguments to express the lowest boundary of the computation of a frequency. However, contrary to ‘after’, there is a subtle difference: the lowest boundary will be tested against the frequency as well 9.4.34.3 Examples: reflex when: since(starting_date) {} // this reflex will always be run every(2#days) since (starting_date + 1#day) // the computation will return true 1 day after the starting date and every two days after this reference date 9.4.35 skeletonize 9.4.35.1 Possible use: skeletonize (geometry) —&gt; list&lt;geometry&gt; geometry skeletonize float —&gt; list&lt;geometry&gt; skeletonize (geometry , float) —&gt; list&lt;geometry&gt; skeletonize (geometry, float, float) —&gt; list&lt;geometry&gt; 9.4.35.2 Result: A list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) with the given tolerance for the clipping A list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) with the given tolerance for the clipping and for the triangulation A list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) 9.4.35.3 Examples: list&lt;geometry&gt; var0 &lt;- skeletonize(self); // var0 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. list&lt;geometry&gt; var1 &lt;- skeletonize(self); // var1 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. list&lt;geometry&gt; var2 &lt;- skeletonize(self); // var2 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. 9.4.36 skew 9.4.36.1 Possible use: skew (container) —&gt; float float skew float —&gt; float skew (float , float) —&gt; float 9.4.36.2 Result: Returns the skew of a data sequence. Returns the skew of a data sequence, which is moment(data,3,mean) / standardDeviation3 9.4.37 skew_gauss 9.4.37.1 Possible use: skew_gauss (float, float, float, float) —&gt; float 9.4.37.2 Result: A value from a skew normally distributed random variable with min value (the minimum skewed value possible), max value (the maximum skewed value possible), skew (the degree to which the values cluster around the mode of the distribution; higher values mean tighter clustering) and bias (the tendency of the mode to approach the min, max or midpoint value; positive values bias toward max, negative values toward min).The algorithm was taken from http://stackoverflow.com/questions/5853187/skewing-java-random-number-generation-toward-a-certain-number 9.4.37.3 Examples: float var0 &lt;- skew_gauss(0.0, 1.0, 0.7,0.1); // var0 equals 0.1729218460343077 9.4.37.4 See also: gauss, truncated_gauss, poisson, 9.4.38 skewness 9.4.38.1 Possible use: skewness (list) —&gt; float 9.4.38.2 Result: returns skewness value computed from the operand list of values 9.4.38.3 Special cases: if the length of the list is lower than 3, returns NaN 9.4.38.4 Examples: float var0 &lt;- skewness ([1,2,3,4,5]); // var0 equals 0.0 9.4.39 skill 9.4.39.1 Possible use: skill (any) —&gt; skill 9.4.39.2 Result: Casts the operand into the type skill 9.4.40 smooth 9.4.40.1 Possible use: geometry smooth float —&gt; geometry smooth (geometry , float) —&gt; geometry 9.4.40.2 Result: Returns a ‘smoothed’ geometry, where straight lines are replaces by polynomial (bicubic) curves. The first parameter is the original geometry, the second is the ‘fit’ parameter which can be in the range 0 (loose fit) to 1 (tightest fit). 9.4.40.3 Examples: geometry var0 &lt;- smooth(square(10), 0.0); // var0 equals a &#39;rounded&#39; square 9.4.41 social_link 9.4.41.1 Possible use: social_link (any) —&gt; social_link 9.4.41.2 Result: Casts the operand into the type social_link 9.4.42 solid Same signification as without_holes 9.4.43 sort Same signification as sort_by 9.4.44 sort_by 9.4.44.1 Possible use: container sort_by any expression —&gt; list sort_by (container , any expression) —&gt; list 9.4.44.2 Result: Returns a list, containing the elements of the left-hand operand sorted in ascending order by the value of the right-hand operand when it is evaluated on them. 9.4.44.3 Comment: the left-hand operand is casted to a list before applying the operator. In the right-hand operand, the keyword each can be used to represent, in turn, each of the elements. 9.4.44.4 Special cases: if the left-hand operand is nil, sort_by throws an error 9.4.44.5 Examples: list var0 &lt;- [1,2,4,3,5,7,6,8] sort_by (each); // var0 equals [1,2,3,4,5,6,7,8] list var2 &lt;- g2 sort_by (length(g2 out_edges_of each) ); // var2 equals [node9, node7, node10, node8, node11, node6, node5, node4] list var3 &lt;- (list(node) sort_by (round(node(each).location.x)); // var3 equals [node5, node1, node0, node2, node3] list var4 &lt;- [1::2, 5::6, 3::4] sort_by (each); // var4 equals [2, 4, 6] 9.4.44.6 See also: group_by, 9.4.45 source_of 9.4.45.1 Possible use: graph source_of unknown —&gt; unknown source_of (graph , unknown) —&gt; unknown 9.4.45.2 Result: returns the source of the edge (right-hand operand) contained in the graph given in left-hand operand. 9.4.45.3 Special cases: if the lef-hand operand (the graph) is nil, throws an Exception 9.4.45.4 Examples: graph graphEpidemio &lt;- generate_barabasi_albert( [&quot;edges_species&quot;::edge,&quot;vertices_specy&quot;::node,&quot;size&quot;::3,&quot;m&quot;::5] ); unknown var1 &lt;- graphEpidemio source_of(edge(3)); // var1 equals node1graph graphFromMap &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); point var3 &lt;- graphFromMap source_of(link({1,5},{12,45})); // var3 equals {1,5} 9.4.45.5 See also: target_of, 9.4.46 spatial_graph 9.4.46.1 Possible use: spatial_graph (container) —&gt; graph 9.4.46.2 Result: allows to create a spatial graph from a container of vertices, without trying to wire them. The container can be empty. Emits an error if the contents of the container are not geometries, points or agents 9.4.46.3 See also: graph, 9.4.47 species 9.4.47.1 Possible use: species (unknown) —&gt; species 9.4.47.2 Result: casting of the operand to a species. 9.4.47.3 Special cases: if the operand is nil, returns nil; if the operand is an agent, returns its species; if the operand is a string, returns the species with this name (nil if not found); otherwise, returns nil 9.4.47.4 Examples: species var0 &lt;- species(self); // var0 equals the species of the current agent species var1 &lt;- species(&#39;node&#39;); // var1 equals node species var2 &lt;- species([1,5,9,3]); // var2 equals nil species var3 &lt;- species(node1); // var3 equals node 9.4.48 species_of Same signification as species 9.4.49 sphere 9.4.49.1 Possible use: sphere (float) —&gt; geometry 9.4.49.2 Result: A sphere geometry which radius is equal to the operand. 9.4.49.3 Comment: the centre of the sphere is by default the location of the current agent in which has been called this operator. 9.4.49.4 Special cases: returns a point if the operand is lower or equal to 0. 9.4.49.5 Examples: geometry var0 &lt;- sphere(10); // var0 equals a geometry as a circle of radius 10 but displays a sphere. 9.4.49.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 9.4.50 split 9.4.50.1 Possible use: split (list) —&gt; list&lt;list&gt; 9.4.50.2 Result: Splits a list of numbers into n=(1+3.3*log10(elements)) bins. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound 9.4.50.3 See also: split_in, split_using, 9.4.51 split_at 9.4.51.1 Possible use: geometry split_at point —&gt; list&lt;geometry&gt; split_at (geometry , point) —&gt; list&lt;geometry&gt; 9.4.51.2 Result: The two part of the left-operand lines split at the given right-operand point 9.4.51.3 Special cases: if the left-operand is a point or a polygon, returns an empty list 9.4.51.4 Examples: list&lt;geometry&gt; var0 &lt;- polyline([{1,2},{4,6}]) split_at {7,6}; // var0 equals [polyline([{1.0,2.0},{7.0,6.0}]), polyline([{7.0,6.0},{4.0,6.0}])] 9.4.52 split_geometry 9.4.52.1 Possible use: geometry split_geometry float —&gt; list&lt;geometry&gt; split_geometry (geometry , float) —&gt; list&lt;geometry&gt; geometry split_geometry point —&gt; list&lt;geometry&gt; split_geometry (geometry , point) —&gt; list&lt;geometry&gt; split_geometry (geometry, int, int) —&gt; list&lt;geometry&gt; 9.4.52.2 Result: A list of geometries that result from the decomposition of the geometry by square cells of the given side size (geometry, size) A list of geometries that result from the decomposition of the geometry according to a grid with the given number of rows and columns (geometry, nb_cols, nb_rows) A list of geometries that result from the decomposition of the geometry by rectangle cells of the given dimension (geometry, {size_x, size_y}) 9.4.52.3 Examples: list&lt;geometry&gt; var0 &lt;- to_squares(self, 10.0); // var0 equals the list of the geometries corresponding to the decomposition of the geometry by squares of side size 10.0 list&lt;geometry&gt; var1 &lt;- to_rectangles(self, 10,20); // var1 equals the list of the geometries corresponding to the decomposition of the geometry of the agent applying the operator list&lt;geometry&gt; var2 &lt;- to_rectangles(self, {10.0, 15.0}); // var2 equals the list of the geometries corresponding to the decomposition of the geometry by rectangles of size 10.0, 15.0 9.4.53 split_in 9.4.53.1 Possible use: list split_in int —&gt; list&lt;list&gt; split_in (list , int) —&gt; list&lt;list&gt; split_in (list, int, bool) —&gt; list&lt;list&gt; 9.4.53.2 Result: Splits a list of numbers into n bins defined by n-1 bounds between the minimum and maximum values found in the first argument. The boolean argument controls whether or not the splitting is strict (if true, elements are in the ith bin if they are strictly smaller than the ith bound Splits a list of numbers into n bins defined by n-1 bounds between the minimum and maximum values found in the first argument. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound 9.4.53.3 See also: split, split_using, 9.4.54 split_lines 9.4.54.1 Possible use: split_lines (container&lt;geometry&gt;) —&gt; list&lt;geometry&gt; container&lt;geometry&gt; split_lines bool —&gt; list&lt;geometry&gt; split_lines (container&lt;geometry&gt; , bool) —&gt; list&lt;geometry&gt; 9.4.54.2 Result: A list of geometries resulting after cutting the lines at their intersections. A list of geometries resulting after cutting the lines at their intersections. if the last boolean operand is set to true, the split lines will import the attributes of the initial lines 9.4.54.3 Examples: list&lt;geometry&gt; var0 &lt;- split_lines([line([{0,10}, {20,10}]), line([{0,10}, {20,10}])]); // var0 equals a list of four polylines: line([{0,10}, {10,10}]), line([{10,10}, {20,10}]), line([{10,0}, {10,10}]) and line([{10,10}, {10,20}]) list&lt;geometry&gt; var1 &lt;- split_lines([line([{0,10}, {20,10}]), line([{0,10}, {20,10}])]); // var1 equals a list of four polylines: line([{0,10}, {10,10}]), line([{10,10}, {20,10}]), line([{10,0}, {10,10}]) and line([{10,10}, {10,20}]) 9.4.55 split_using 9.4.55.1 Possible use: list split_using msi.gama.util.IList&lt;? extends java.lang.Comparable&gt; —&gt; list&lt;list&gt; split_using (list , msi.gama.util.IList&lt;? extends java.lang.Comparable&gt;) —&gt; list&lt;list&gt; split_using (list, msi.gama.util.IList&lt;? extends java.lang.Comparable&gt;, bool) —&gt; list&lt;list&gt; 9.4.55.2 Result: Splits a list of numbers into n+1 bins using a set of n bounds passed as the second argument. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound Splits a list of numbers into n+1 bins using a set of n bounds passed as the second argument. The boolean argument controls whether or not the splitting is strict (if true, elements are in the ith bin if they are strictly smaller than the ith bound 9.4.55.3 See also: split, split_in, 9.4.56 split_with 9.4.56.1 Possible use: string split_with string —&gt; list split_with (string , string) —&gt; list split_with (string, string, bool) —&gt; list 9.4.56.2 Result: Returns a list containing the sub-strings (tokens) of the left-hand operand delimited by each of the characters of the right-hand operand. Returns a list containing the sub-strings (tokens) of the left-hand operand delimited either by each of the characters of the right-hand operand (false) or by the whole right-hand operand (true). 9.4.56.3 Comment: Delimiters themselves are excluded from the resulting list.Delimiters themselves are excluded from the resulting list. 9.4.56.4 Examples: list var0 &lt;- &#39;to be or not to be,that is the question&#39; split_with &#39; ,&#39;; // var0 equals [&#39;to&#39;,&#39;be&#39;,&#39;or&#39;,&#39;not&#39;,&#39;to&#39;,&#39;be&#39;,&#39;that&#39;,&#39;is&#39;,&#39;the&#39;,&#39;question&#39;] list var1 &lt;- &#39;aa::bb:cc&#39; split_with (&#39;::&#39;, true); // var1 equals [&#39;aa&#39;,&#39;bb:cc&#39;] 9.4.57 sqrt 9.4.57.1 Possible use: sqrt (int) —&gt; float sqrt (float) —&gt; float 9.4.57.2 Result: Returns the square root of the operand. 9.4.57.3 Special cases: if the operand is negative, an exception is raised 9.4.57.4 Examples: float var0 &lt;- sqrt(4); // var0 equals 2.0 float var1 &lt;- sqrt(4); // var1 equals 2.0 9.4.58 square 9.4.58.1 Possible use: square (float) —&gt; geometry 9.4.58.2 Result: A square geometry which side size is equal to the operand. 9.4.58.3 Comment: the centre of the square is by default the location of the current agent in which has been called this operator. 9.4.58.4 Special cases: returns nil if the operand is nil. 9.4.58.5 Examples: geometry var0 &lt;- square(10); // var0 equals a geometry as a square of side size 10. 9.4.58.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, rectangle, triangle, 9.4.59 squircle 9.4.59.1 Possible use: float squircle float —&gt; geometry squircle (float , float) —&gt; geometry 9.4.59.2 Result: A mix of square and circle geometry (see : http://en.wikipedia.org/wiki/Squircle), which side size is equal to the first operand and power is equal to the second operand 9.4.59.3 Comment: the center of the ellipse is by default the location of the current agent in which has been called this operator. 9.4.59.4 Special cases: returns a point if the side operand is lower or equal to 0. 9.4.59.5 Examples: geometry var0 &lt;- squircle(4,4); // var0 equals a geometry as a squircle of side 4 with a power of 4. 9.4.59.6 See also: around, cone, line, link, norm, point, polygon, polyline, super_ellipse, rectangle, square, circle, ellipse, triangle, 9.4.60 stack 9.4.60.1 Possible use: stack (msi.gama.util.IList&lt;java.lang.Integer&gt;) —&gt; msi.gama.util.tree.GamaNode&lt;java.lang.String&gt; 9.4.61 standard_deviation 9.4.61.1 Possible use: standard_deviation (container) —&gt; float 9.4.61.2 Result: the standard deviation on the elements of the operand. See Standard_deviation for more details. 9.4.61.3 Comment: The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded. 9.4.61.4 Examples: float var0 &lt;- standard_deviation ([4.5, 3.5, 5.5, 7.0]); // var0 equals 1.2930100540985752 9.4.61.5 See also: mean, mean_deviation, 9.4.62 step_sub_model 9.4.62.1 Possible use: step_sub_model (msi.gama.kernel.experiment.IExperimentAgent) —&gt; int 9.4.62.2 Result: Load a submodel 9.4.62.3 Comment: loaded submodel 9.4.63 strahler 9.4.63.1 Possible use: strahler (graph) —&gt; map 9.4.63.2 Result: retur for each edge, its strahler number 9.4.64 string 9.4.64.1 Possible use: date string string —&gt; string string (date , string) —&gt; string string (date, string, string) —&gt; string 9.4.64.2 Result: converts a date to astring following a custom pattern and using a specific locale (e.g.: ‘fr’, ‘en’, etc.). The pattern can use “%Y %M %N %D %E %h %m %s %z” for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date &amp; time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences converts a date to astring following a custom pattern. The pattern can use “%Y %M %N %D %E %h %m %s %z” for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date &amp; time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences 9.4.64.3 Examples: format(#now, &#39;yyyy-MM-dd&#39;) format(#now, &#39;yyyy-MM-dd&#39;) 9.4.65 student_area 9.4.65.1 Possible use: float student_area int —&gt; float student_area (float , int) —&gt; float 9.4.65.2 Result: Returns the area to the left of x in the Student T distribution with the given degrees of freedom. 9.4.66 student_t_inverse 9.4.66.1 Possible use: float student_t_inverse int —&gt; float student_t_inverse (float , int) —&gt; float 9.4.66.2 Result: Returns the value, t, for which the area under the Student-t probability density function (integrated from minus infinity to t) is equal to x. 9.4.67 subtract_days Same signification as minus_days 9.4.68 subtract_hours Same signification as minus_hours 9.4.69 subtract_minutes Same signification as minus_minutes 9.4.70 subtract_months Same signification as minus_months 9.4.71 subtract_ms Same signification as minus_ms 9.4.72 subtract_seconds Same signification as - 9.4.73 subtract_weeks Same signification as minus_weeks 9.4.74 subtract_years Same signification as minus_years 9.4.75 successors_of 9.4.75.1 Possible use: graph successors_of unknown —&gt; list successors_of (graph , unknown) —&gt; list 9.4.75.2 Result: returns the list of successors (i.e. targets of out edges) of the given vertex (right-hand operand) in the given graph (left-hand operand) 9.4.75.3 Examples: list var1 &lt;- graphEpidemio successors_of ({1,5}); // var1 equals [{12,45}] list var2 &lt;- graphEpidemio successors_of node({34,56}); // var2 equals [] 9.4.75.4 See also: predecessors_of, neighbors_of, 9.4.76 sum 9.4.76.1 Possible use: sum (container) —&gt; unknown sum (graph) —&gt; float 9.4.76.2 Result: the sum of all the elements of the operand 9.4.76.3 Comment: the behavior depends on the nature of the operand 9.4.76.4 Special cases: if it is a population or a list of other types: sum transforms all elements into float and sums them if it is a map, sum returns the sum of the value of all elements if it is a file, sum returns the sum of the content of the file (that is also a container) if it is a graph, sum returns the total weight of the graph if it is a matrix of int, float or object, sum returns the sum of all the numerical elements (i.e. all elements for integer and float matrices) if it is a matrix of other types: sum transforms all elements into float and sums them if it is a list of colors: sum will sum them and return the blended resulting color if it is a list of int or float: sum returns the sum of all the elements int var0 &lt;- sum ([12,10,3]); // var0 equals 25 if it is a list of points: sum returns the sum of all points as a point (each coordinate is the sum of the corresponding coordinate of each element) unknown var1 &lt;- sum([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}]); // var1 equals {20.0,17.0} 9.4.76.5 See also: mul, 9.4.77 sum_of 9.4.77.1 Possible use: container sum_of any expression —&gt; unknown sum_of (container , any expression) —&gt; unknown 9.4.77.2 Result: the sum of the right-hand expression evaluated on each of the elements of the left-hand operand 9.4.77.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 9.4.77.4 Special cases: if the left-operand is a map, the keyword each will contain each value unknown var1 &lt;- [1::2, 3::4, 5::6] sum_of (each + 3); // var1 equals 21 9.4.77.5 Examples: unknown var0 &lt;- [1,2] sum_of (each * 100 ); // var0 equals 300 9.4.77.6 See also: min_of, max_of, product_of, mean_of, 9.4.78 svg_file 9.4.78.1 Possible use: svg_file (string) —&gt; file 9.4.78.2 Result: Constructs a file of type svg. Allowed extensions are limited to svg 9.4.79 tan 9.4.79.1 Possible use: tan (float) —&gt; float tan (int) —&gt; float 9.4.79.2 Result: Returns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). 9.4.79.3 Special cases: Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16 The tangent is only defined for any real number except 90 + k * 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity). 9.4.79.4 Examples: float var0 &lt;- tan (0); // var0 equals 0.0 float var1 &lt;- tan(90); // var1 equals 1.633123935319537E16 9.4.79.5 See also: cos, sin, 9.4.80 tan_rad 9.4.80.1 Possible use: tan_rad (float) —&gt; float 9.4.80.2 Result: Returns the value (in [-1,1]) of the trigonometric tangent of the operand (in radians). 9.4.80.3 See also: cos_rad, sin_rad, 9.4.81 tanh 9.4.81.1 Possible use: tanh (int) —&gt; float tanh (float) —&gt; float 9.4.81.2 Result: Returns the value (in the interval [-1,1]) of the hyperbolic tangent of the operand (which can be any real number, expressed in decimal degrees). 9.4.81.3 Examples: float var0 &lt;- tanh(0); // var0 equals 0.0 float var1 &lt;- tanh(100); // var1 equals 1.0 9.4.82 target_of 9.4.82.1 Possible use: graph target_of unknown —&gt; unknown target_of (graph , unknown) —&gt; unknown 9.4.82.2 Result: returns the target of the edge (right-hand operand) contained in the graph given in left-hand operand. 9.4.82.3 Special cases: if the lef-hand operand (the graph) is nil, returns nil 9.4.82.4 Examples: graph graphEpidemio &lt;- generate_barabasi_albert( [&quot;edges_species&quot;::edge,&quot;vertices_specy&quot;::node,&quot;size&quot;::3,&quot;m&quot;::5] ); unknown var1 &lt;- graphEpidemio source_of(edge(3)); // var1 equals node1graph graphFromMap &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); unknown var3 &lt;- graphFromMap target_of(link({1,5},{12,45})); // var3 equals {12,45} 9.4.82.5 See also: source_of, 9.4.83 teapot 9.4.83.1 Possible use: teapot (float) —&gt; geometry 9.4.83.2 Result: A teapot geometry which radius is equal to the operand. 9.4.83.3 Comment: the centre of the teapot is by default the location of the current agent in which has been called this operator. 9.4.83.4 Special cases: returns a point if the operand is lower or equal to 0. 9.4.83.5 Examples: geometry var0 &lt;- teapot(10); // var0 equals a geometry as a circle of radius 10 but displays a teapot. 9.4.83.6 See also: around, cone, line, link, norm, point, polygon, polyline, rectangle, square, triangle, 9.4.84 text_file 9.4.84.1 Possible use: text_file (string) —&gt; file 9.4.84.2 Result: Constructs a file of type text. Allowed extensions are limited to txt, data, text 9.4.85 TGauss Same signification as truncated_gauss 9.4.86 threeds_file 9.4.86.1 Possible use: threeds_file (string) —&gt; file 9.4.86.2 Result: Constructs a file of type threeds. Allowed extensions are limited to 3ds, max 9.4.87 to Same signification as until 9.4.87.1 Possible use: date to date —&gt; msi.gama.util.IList&lt;msi.gama.util.GamaDate&gt; to (date , date) —&gt; msi.gama.util.IList&lt;msi.gama.util.GamaDate&gt; 9.4.87.2 Result: builds an interval between two dates (the first inclusive and the second exclusive, which behaves like a read-only list of dates. The default step between two dates is the step of the model 9.4.87.3 Comment: The default step can be overruled by using the every operator applied to this interval 9.4.87.4 Examples: date(&#39;2000-01-01&#39;) to date(&#39;2010-01-01&#39;) // builds an interval between these two dates (date(&#39;2000-01-01&#39;) to date(&#39;2010-01-01&#39;)) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval 9.4.87.5 See also: every, 9.4.88 to_GAMA_CRS 9.4.88.1 Possible use: to_GAMA_CRS (geometry) —&gt; geometry geometry to_GAMA_CRS string —&gt; geometry to_GAMA_CRS (geometry , string) —&gt; geometry 9.4.88.2 Special cases: returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by the current CRS, the one corresponding to the world’s agent one geometry var0 &lt;- to_GAMA_CRS({121,14}); // var0 equals a geometry corresponding to the agent geometry transformed into the GAMA CRS returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS geometry var1 &lt;- to_GAMA_CRS({121,14}, &quot;EPSG:4326&quot;); // var1 equals a geometry corresponding to the agent geometry transformed into the GAMA CRS 9.4.89 to_gaml 9.4.89.1 Possible use: to_gaml (unknown) —&gt; string 9.4.89.2 Result: returns the literal description of an expression or description – action, behavior, species, aspect, even model – in gaml 9.4.89.3 Examples: string var0 &lt;- to_gaml(0); // var0 equals &#39;0&#39; string var1 &lt;- to_gaml(3.78); // var1 equals &#39;3.78&#39; string var2 &lt;- to_gaml(true); // var2 equals &#39;true&#39; string var3 &lt;- to_gaml({23, 4.0}); // var3 equals &#39;{23.0,4.0,0.0}&#39; string var4 &lt;- to_gaml(5::34); // var4 equals &#39;5::34&#39; string var5 &lt;- to_gaml(rgb(255,0,125)); // var5 equals &#39;rgb (255, 0, 125,255)&#39; string var6 &lt;- to_gaml(&#39;hello&#39;); // var6 equals &quot;&#39;hello&#39;&quot; string var7 &lt;- to_gaml([1,5,9,3]); // var7 equals &#39;[1,5,9,3]&#39; string var8 &lt;- to_gaml([&#39;a&#39;::345, &#39;b&#39;::13, &#39;c&#39;::12]); // var8 equals &quot;map([&#39;a&#39;::345,&#39;b&#39;::13,&#39;c&#39;::12])&quot; string var9 &lt;- to_gaml([[3,5,7,9],[2,4,6,8]]); // var9 equals &#39;[[3,5,7,9],[2,4,6,8]]&#39; string var10 &lt;- to_gaml(a_graph); // var10 equals ([((1 as node)::(3 as node))::(5 as edge),((0 as node)::(3 as node))::(3 as edge),((1 as node)::(2 as node))::(1 as edge),((0 as node)::(2 as node))::(2 as edge),((0 as node)::(1 as node))::(0 as edge),((2 as node)::(3 as node))::(4 as edge)] as map ) as graph string var11 &lt;- to_gaml(node1); // var11 equals 1 as node 9.4.90 to_rectangles 9.4.90.1 Possible use: to_rectangles (geometry, point, bool) —&gt; list&lt;geometry&gt; to_rectangles (geometry, int, int, bool) —&gt; list&lt;geometry&gt; 9.4.90.2 Result: A list of rectangles of the size corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, dimension, overlaps), if overlaps = true, add the rectangles that overlap the border of the geometry A list of rectangles corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, nb_cols, nb_rows, overlaps) by a grid composed of the given number of columns and rows, if overlaps = true, add the rectangles that overlap the border of the geometry 9.4.90.3 Examples: list&lt;geometry&gt; var0 &lt;- to_rectangles(self, {10.0, 15.0}, true); // var0 equals the list of rectangles of size {10.0, 15.0} corresponding to the discretization into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept list&lt;geometry&gt; var1 &lt;- to_rectangles(self, 5, 20, true); // var1 equals the list of rectangles corresponding to the discretization by a grid of 5 columns and 20 rows into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept 9.4.91 to_squares 9.4.91.1 Possible use: to_squares (geometry, int, bool) —&gt; list&lt;geometry&gt; to_squares (geometry, float, bool) —&gt; list&lt;geometry&gt; to_squares (geometry, int, bool, float) —&gt; list&lt;geometry&gt; 9.4.91.2 Result: A list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps, precision_coefficient), if overlaps = true, add the squares that overlap the border of the geometry, coefficient_precision should be close to 1.0 A list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps), if overlaps = true, add the squares that overlap the border of the geometry A list of squares of the size corresponding to the given size that result from the decomposition of the geometry into squares (geometry, size, overlaps), if overlaps = true, add the squares that overlap the border of the geometry 9.4.91.3 Examples: list&lt;geometry&gt; var0 &lt;- to_squares(self, 10, true, 0.99); // var0 equals the list of 10 squares corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept list&lt;geometry&gt; var1 &lt;- to_squares(self, 10, true); // var1 equals the list of 10 squares corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept list&lt;geometry&gt; var2 &lt;- to_squares(self, 10.0, true); // var2 equals the list of squares of side size 10.0 corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept 9.4.92 to_sub_geometries 9.4.92.1 Possible use: geometry to_sub_geometries list&lt;float&gt; —&gt; list&lt;geometry&gt; to_sub_geometries (geometry , list&lt;float&gt;) —&gt; list&lt;geometry&gt; to_sub_geometries (geometry, list&lt;float&gt;, float) —&gt; list&lt;geometry&gt; 9.4.92.2 Result: A list of geometries resulting after spliting the geometry into sub-geometries. A list of geometries resulting after spliting the geometry into sub-geometries. 9.4.92.3 Examples: list&lt;geometry&gt; var0 &lt;- to_sub_geometries(rectangle(10, 50), [0.1, 0.5, 0.4], 1.0); // var0 equals a list of three geometries corresponding to 3 sub-geometries using cubes of 1m size list&lt;geometry&gt; var1 &lt;- to_sub_geometries(rectangle(10, 50), [0.1, 0.5, 0.4]); // var1 equals a list of three geometries corresponding to 3 sub-geometries 9.4.93 to_triangles Same signification as triangulate 9.4.94 tokenize Same signification as split_with 9.4.95 topology 9.4.95.1 Possible use: topology (unknown) —&gt; topology 9.4.95.2 Result: casting of the operand to a topology. 9.4.95.3 Special cases: if the operand is a topology, returns the topology itself; if the operand is a spatial graph, returns the graph topology associated; if the operand is a population, returns the topology of the population; if the operand is a shape or a geometry, returns the continuous topology bounded by the geometry; if the operand is a matrix, returns the grid topology associated if the operand is another kind of container, returns the multiple topology associated to the container otherwise, casts the operand to a geometry and build a topology from it. 9.4.95.4 Examples: topology var0 &lt;- topology(0); // var0 equals niltopology(a_graph) --: Multiple topology in POLYGON ((24.712119771887785 7.867357373616512, 24.712119771887785 61.283226839310565, 82.4013676510046 7.867357373616512)) at location[53.556743711446195;34.57529210646354] 9.4.95.5 See also: geometry, 9.4.96 topology 9.4.96.1 Possible use: topology (any) —&gt; topology 9.4.96.2 Result: Casts the operand into the type topology 9.4.97 touches 9.4.97.1 Possible use: geometry touches geometry —&gt; bool touches (geometry , geometry) —&gt; bool 9.4.97.2 Result: A boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point). 9.4.97.3 Comment: returns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false. 9.4.97.4 Special cases: if one of the operand is null, returns false. 9.4.97.5 Examples: bool var0 &lt;- polyline([{10,10},{20,20}]) touches {15,15}; // var0 equals false bool var1 &lt;- polyline([{10,10},{20,20}]) touches {10,10}; // var1 equals true bool var2 &lt;- {15,15} touches {15,15}; // var2 equals false bool var3 &lt;- polyline([{10,10},{20,20}]) touches polyline([{10,10},{5,5}]); // var3 equals true bool var4 &lt;- polyline([{10,10},{20,20}]) touches polyline([{5,5},{15,15}]); // var4 equals false bool var5 &lt;- polyline([{10,10},{20,20}]) touches polyline([{15,15},{25,25}]); // var5 equals false bool var6 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{15,15},{15,25},{25,25},{25,15}]); // var6 equals false bool var7 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,20},{20,20},{20,30},{10,30}]); // var7 equals true bool var8 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,10},{0,10},{0,0},{10,0}]); // var8 equals true bool var9 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) touches {15,15}; // var9 equals false bool var10 &lt;- polygon([{10,10},{10,20},{20,20},{20,10}]) touches {10,15}; // var10 equals true 9.4.97.6 See also: disjoint_from, crosses, overlaps, partially_overlaps, intersects, 9.4.98 towards 9.4.98.1 Possible use: geometry towards geometry —&gt; float towards (geometry , geometry) —&gt; float 9.4.98.2 Result: The direction (in degree) between the two geometries (geometries, agents, points) considering the topology of the agent applying the operator. 9.4.98.3 Examples: float var0 &lt;- ag1 towards ag2; // var0 equals the direction between ag1 and ag2 and ag3 considering the topology of the agent applying the operator 9.4.98.4 See also: distance_between, distance_to, direction_between, path_between, path_to, 9.4.99 trace 9.4.99.1 Possible use: trace (matrix) —&gt; float 9.4.99.2 Result: The trace of the given matrix (the sum of the elements on the main diagonal). 9.4.99.3 Examples: float var0 &lt;- trace(matrix([[1,2],[3,4]])); // var0 equals 5 9.4.100 transformed_by 9.4.100.1 Possible use: geometry transformed_by point —&gt; geometry transformed_by (geometry , point) —&gt; geometry 9.4.100.2 Result: A geometry resulting from the application of a rotation and a scaling (right-operand : point {angle(degree), scale factor} of the left-hand operand (geometry, agent, point) 9.4.100.3 Examples: geometry var0 &lt;- self transformed_by {45, 0.5}; // var0 equals the geometry resulting from 45 degrees rotation and 50% scaling of the geometry of the agent applying the operator. 9.4.100.4 See also: rotated_by, translated_by, 9.4.101 translated_by 9.4.101.1 Possible use: geometry translated_by point —&gt; geometry translated_by (geometry , point) —&gt; geometry 9.4.101.2 Result: A geometry resulting from the application of a translation by the right-hand operand distance to the left-hand operand (geometry, agent, point) 9.4.101.3 Examples: geometry var0 &lt;- self translated_by {10,10,10}; // var0 equals the geometry resulting from applying the translation to the left-hand geometry (or agent). 9.4.101.4 See also: rotated_by, transformed_by, 9.4.102 translated_to Same signification as at_location 9.4.103 transpose 9.4.103.1 Possible use: transpose (matrix) —&gt; matrix 9.4.103.2 Result: The transposition of the given matrix 9.4.103.3 Examples: matrix var0 &lt;- transpose(matrix([[5,-3],[6,-4]])); // var0 equals matrix([[5,6],[-3,-4]]) 9.4.104 triangle 9.4.104.1 Possible use: triangle (float) —&gt; geometry 9.4.104.2 Result: A triangle geometry which side size is given by the operand. 9.4.104.3 Comment: the center of the triangle is by default the location of the current agent in which has been called this operator. 9.4.104.4 Special cases: returns nil if the operand is nil. 9.4.104.5 Examples: geometry var0 &lt;- triangle(5); // var0 equals a geometry as a triangle with side_size = 5. 9.4.104.6 See also: around, circle, cone, line, link, norm, point, polygon, polyline, rectangle, square, 9.4.105 triangulate 9.4.105.1 Possible use: triangulate (list&lt;geometry&gt;) —&gt; list&lt;geometry&gt; triangulate (geometry) —&gt; list&lt;geometry&gt; geometry triangulate float —&gt; list&lt;geometry&gt; triangulate (geometry , float) —&gt; list&lt;geometry&gt; triangulate (geometry, float, float) —&gt; list&lt;geometry&gt; 9.4.105.2 Result: A list of geometries (triangles) corresponding to the Delaunay triangulation computed from the list of polylines A list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point) with the given tolerance for the clipping A list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point) with the given tolerance for the clipping and for the triangulation A list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point) 9.4.105.3 Examples: list&lt;geometry&gt; var0 &lt;- triangulate([line([{0,50},{100,50}]), line([{50,0},{50,100}])); // var0 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. list&lt;geometry&gt; var1 &lt;- triangulate(self, 0.1); // var1 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. list&lt;geometry&gt; var2 &lt;- triangulate(self,0.1, 1.0); // var2 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. list&lt;geometry&gt; var3 &lt;- triangulate(self); // var3 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. 9.4.106 truncated_gauss 9.4.106.1 Possible use: truncated_gauss (point) —&gt; float truncated_gauss (list) —&gt; float 9.4.106.2 Result: A random value from a normally distributed random variable in the interval ]mean - standardDeviation; mean + standardDeviation[. 9.4.106.3 Special cases: when the operand is a point, it is read as {mean, standardDeviation} if the operand is a list, only the two first elements are taken into account as [mean, standardDeviation] when truncated_gauss is called with a list of only one element mean, it will always return 0.0 9.4.106.4 Examples: float var0 &lt;- truncated_gauss ({0, 0.3}); // var0 equals a float between -0.3 and 0.3 float var1 &lt;- truncated_gauss ([0.5, 0.0]); // var1 equals 0.5 9.4.106.5 See also: gauss, 9.4.107 type_of 9.4.107.1 Possible use: type_of (unknown) —&gt; msi.gaml.types.IType&lt;?&gt; 9.4.108 undirected 9.4.108.1 Possible use: undirected (graph) —&gt; graph 9.4.108.2 Result: the operand graph becomes an undirected graph. 9.4.108.3 Comment: the operator alters the operand graph, it does not create a new one. 9.4.108.4 See also: directed, 9.4.109 union 9.4.109.1 Possible use: union (container&lt;geometry&gt;) —&gt; geometry container union container —&gt; list union (container , container) —&gt; list 9.4.109.2 Result: returns a new list containing all the elements of both containers without duplicated elements. 9.4.109.3 Special cases: if the right-operand is a container of points, geometries or agents, returns the geometry resulting from the union all the geometries if the left or right operand is nil, union throws an error 9.4.109.4 Examples: geometry var0 &lt;- union([geom1, geom2, geom3]); // var0 equals a geometry corresponding to union between geom1, geom2 and geom3 list var1 &lt;- [1,2,3,4,5,6] union [2,4,9]; // var1 equals [1,2,3,4,5,6,9] list var2 &lt;- [1,2,3,4,5,6] union [0,8]; // var2 equals [1,2,3,4,5,6,0,8] list var3 &lt;- [1,3,2,4,5,6,8,5,6] union [0,8]; // var3 equals [1,3,2,4,5,6,8,0] 9.4.109.5 See also: inter, +, 9.4.110 unknown 9.4.110.1 Possible use: unknown (any) —&gt; unknown 9.4.110.2 Result: Casts the operand into the type unknown 9.4.111 unSerializeSimulation 9.4.111.1 Possible use: unSerializeSimulation (string) —&gt; int 9.4.111.2 Result: unSerializeSimulation 9.4.112 unSerializeSimulationFromFile 9.4.112.1 Possible use: unSerializeSimulationFromFile (string) —&gt; int 9.4.113 until 9.4.113.1 Possible use: until (date) —&gt; bool any expression until date —&gt; bool until (any expression , date) —&gt; bool 9.4.113.2 Result: Returns true if the current_date of the model is before (or equel to) the date passed in argument. Synonym of ‘current_date &lt;= argument’ 9.4.113.3 Examples: reflex when: until(starting_date) {} // This reflex will be run only once at the beginning of the simulation 9.4.114 upper_case 9.4.114.1 Possible use: upper_case (string) —&gt; string 9.4.114.2 Result: Converts all of the characters in the string operand to upper case 9.4.114.3 Examples: string var0 &lt;- upper_case(&quot;Abc&quot;); // var0 equals &#39;ABC&#39; 9.4.114.4 See also: lower_case, 9.4.115 URL_file 9.4.115.1 Possible use: URL_file (string) —&gt; file 9.4.115.2 Result: Constructs a file of type URL. Allowed extensions are limited to url 9.4.116 use_cache 9.4.116.1 Possible use: graph use_cache bool —&gt; graph use_cache (graph , bool) —&gt; graph 9.4.116.2 Result: if the second operand is true, the operand graph will store in a cache all the previously computed shortest path (the cache be cleared if the graph is modified). 9.4.116.3 Comment: the operator alters the operand graph, it does not create a new one. 9.4.116.4 See also: path_between, 9.4.117 user_input 9.4.117.1 Possible use: user_input (any expression) —&gt; map&lt;string,unknown&gt; string user_input any expression —&gt; map&lt;string,unknown&gt; user_input (string , any expression) —&gt; map&lt;string,unknown&gt; 9.4.117.2 Result: asks the user for some values (not defined as parameters). Takes a string (optional) and a map as arguments. The string is used to specify the message of the dialog box. The map is to specify the parameters you want the user to change before the simulation starts, with the name of the parameter in string key, and the default value as value. 9.4.117.3 Comment: This operator takes a map [string::value] as argument, displays a dialog asking the user for these values, and returns the same map with the modified values (if any). The dialog is modal and will interrupt the execution of the simulation until the user has either dismissed or accepted it. It can be used, for instance, in an init section to force the user to input new values instead of relying on the initial values of parameters : 9.4.117.4 Examples: map&lt;string,unknown&gt; values &lt;- user_input([&quot;Number&quot; :: 100, &quot;Location&quot; :: {10, 10}]); create bug number: int(values at &quot;Number&quot;) with: [location:: (point(values at &quot;Location&quot;))]; map&lt;string,unknown&gt; values2 &lt;- user_input(&quot;Enter numer of agents and locations&quot;,[&quot;Number&quot; :: 100, &quot;Location&quot; :: {10, 10}]); create bug number: int(values2 at &quot;Number&quot;) with: [location:: (point(values2 at &quot;Location&quot;))]; 9.4.118 using 9.4.118.1 Possible use: any expression using topology —&gt; unknown using (any expression , topology) —&gt; unknown 9.4.118.2 Result: Allows to specify in which topology a spatial computation should take place. 9.4.118.3 Special cases: has no effect if the topology passed as a parameter is nil 9.4.118.4 Examples: unknown var0 &lt;- (agents closest_to self) using topology(world); // var0 equals the closest agent to self (the caller) in the continuous topology of the world 9.4.119 variance 9.4.119.1 Possible use: variance (container) —&gt; float 9.4.119.2 Result: the variance of the elements of the operand. See Variance for more details. 9.4.119.3 Comment: The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded. 9.4.119.4 Examples: float var0 &lt;- variance ([4.5, 3.5, 5.5, 7.0]); // var0 equals 1.671875 9.4.119.5 See also: mean, median, 9.4.120 variance 9.4.120.1 Possible use: variance (float) —&gt; float variance (int, float, float) —&gt; float 9.4.120.2 Result: Returns the variance of a data sequence. That is (sumOfSquares - mean*sum) / size with mean = sum/size. Returns the variance from a standard deviation. 9.4.121 variance_of 9.4.121.1 Possible use: container variance_of any expression —&gt; unknown variance_of (container , any expression) —&gt; unknown 9.4.121.2 Result: the variance of the right-hand expression evaluated on each of the elements of the left-hand operand 9.4.121.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 9.4.121.4 See also: min_of, max_of, sum_of, product_of, 9.4.122 vertical 9.4.122.1 Possible use: vertical (msi.gama.util.GamaMap&lt;java.lang.Object,java.lang.Integer&gt;) —&gt; msi.gama.util.tree.GamaNode&lt;java.lang.String&gt; 9.4.123 voronoi 9.4.123.1 Possible use: voronoi (list&lt;point&gt;) —&gt; list&lt;geometry&gt; list&lt;point&gt; voronoi geometry —&gt; list&lt;geometry&gt; voronoi (list&lt;point&gt; , geometry) —&gt; list&lt;geometry&gt; 9.4.123.2 Result: A list of geometries corresponding to the Voronoi diagram built from the list of points A list of geometries corresponding to the Voronoi diagram built from the list of points according to the given clip 9.4.123.3 Examples: list&lt;geometry&gt; var0 &lt;- voronoi([{10,10},{50,50},{90,90},{10,90},{90,10}]); // var0 equals the list of geometries corresponding to the Voronoi Diagram built from the list of points. list&lt;geometry&gt; var1 &lt;- voronoi([{10,10},{50,50},{90,90},{10,90},{90,10}], square(300)); // var1 equals the list of geometries corresponding to the Voronoi Diagram built from the list of points with a square of 300m side size as clip. 9.4.124 weight_of 9.4.124.1 Possible use: graph weight_of unknown —&gt; float weight_of (graph , unknown) —&gt; float 9.4.124.2 Result: returns the weight of the given edge (right-hand operand) contained in the graph given in right-hand operand. 9.4.124.3 Comment: In a localized graph, an edge has a weight by default (the distance between both vertices). 9.4.124.4 Special cases: if the left-operand (the graph) is nil, returns nil if the right-hand operand is not an edge of the given graph, weight_of checks whether it is a node of the graph and tries to return its weight if the right-hand operand is neither a node, nor an edge, returns 1. 9.4.124.5 Examples: graph graphFromMap &lt;- as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); float var1 &lt;- graphFromMap weight_of(link({1,5},{12,45})); // var1 equals 1.0 9.4.125 weighted_means_DM 9.4.125.1 Possible use: msi.gama.util.IList&lt;java.util.List&gt; weighted_means_DM msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt; —&gt; int weighted_means_DM (msi.gama.util.IList&lt;java.util.List&gt; , msi.gama.util.IList&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;) —&gt; int 9.4.125.2 Result: The index of the candidate that maximizes the weighted mean of its criterion values. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of map) 9.4.125.3 Special cases: returns -1 is the list of candidates is nil or empty 9.4.125.4 Examples: int var0 &lt;- weighted_means_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [[&quot;name&quot;::&quot;utility&quot;, &quot;weight&quot; :: 2.0],[&quot;name&quot;::&quot;price&quot;, &quot;weight&quot; :: 1.0]]); // var0 equals 1 9.4.125.5 See also: promethee_DM, electre_DM, evidence_theory_DM, 9.4.126 where 9.4.126.1 Possible use: container where any expression —&gt; list where (container , any expression) —&gt; list 9.4.126.2 Result: a list containing all the elements of the left-hand operand that make the right-hand operand evaluate to true. 9.4.126.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 9.4.126.4 Special cases: if the left-hand operand is a list nil, where returns a new empty list if the left-operand is a map, the keyword each will contain each value list var4 &lt;- [1::2, 3::4, 5::6] where (each &gt;= 4); // var4 equals [4, 6] 9.4.126.5 Examples: list var0 &lt;- [1,2,3,4,5,6,7,8] where (each &gt; 3); // var0 equals [4, 5, 6, 7, 8] list var2 &lt;- g2 where (length(g2 out_edges_of each) = 0 ); // var2 equals [node9, node7, node10, node8, node11] list var3 &lt;- (list(node) where (round(node(each).location.x) &gt; 32); // var3 equals [node2, node3] 9.4.126.6 See also: first_with, last_with, where, 9.4.127 with_lifetime 9.4.127.1 Possible use: predicate with_lifetime int —&gt; predicate with_lifetime (predicate , int) —&gt; predicate 9.4.127.2 Result: change the parameters of the given predicate 9.4.127.3 Examples: predicate with_lifetime 10 9.4.128 with_max_of 9.4.128.1 Possible use: container with_max_of any expression —&gt; unknown with_max_of (container , any expression) —&gt; unknown 9.4.128.2 Result: one of elements of the left-hand operand that maximizes the value of the right-hand operand 9.4.128.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 9.4.128.4 Special cases: if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand 9.4.128.5 Examples: unknown var0 &lt;- [1,2,3,4,5,6,7,8] with_max_of (each ); // var0 equals 8 unknown var2 &lt;- g2 with_max_of (length(g2 out_edges_of each) ) ; // var2 equals node4 unknown var3 &lt;- (list(node) with_max_of (round(node(each).location.x)); // var3 equals node3 unknown var4 &lt;- [1::2, 3::4, 5::6] with_max_of (each); // var4 equals 6 9.4.128.6 See also: where, with_min_of, 9.4.129 with_min_of 9.4.129.1 Possible use: container with_min_of any expression —&gt; unknown with_min_of (container , any expression) —&gt; unknown 9.4.129.2 Result: one of elements of the left-hand operand that minimizes the value of the right-hand operand 9.4.129.3 Comment: in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements. 9.4.129.4 Special cases: if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand 9.4.129.5 Examples: unknown var0 &lt;- [1,2,3,4,5,6,7,8] with_min_of (each ); // var0 equals 1 unknown var2 &lt;- g2 with_min_of (length(g2 out_edges_of each) ); // var2 equals node11 unknown var3 &lt;- (list(node) with_min_of (round(node(each).location.x)); // var3 equals node0 unknown var4 &lt;- [1::2, 3::4, 5::6] with_min_of (each); // var4 equals 2 9.4.129.6 See also: where, with_max_of, 9.4.130 with_optimizer_type 9.4.130.1 Possible use: graph with_optimizer_type string —&gt; graph with_optimizer_type (graph , string) —&gt; graph 9.4.130.2 Result: changes the shortest path computation method of the given graph 9.4.130.3 Comment: the right-hand operand can be “Djikstra”, “Bellmann”, “Astar” to use the associated algorithm. Note that these methods are dynamic: the path is computed when needed. In contrarily, if the operand is another string, a static method will be used, i.e. all the shortest are previously computed. 9.4.130.4 Examples: graphEpidemio &lt;- graphEpidemio with_optimizer_type &quot;static&quot;; 9.4.130.5 See also: set_verbose, 9.4.131 with_precision 9.4.131.1 Possible use: float with_precision int —&gt; float with_precision (float , int) —&gt; float point with_precision int —&gt; point with_precision (point , int) —&gt; point geometry with_precision int —&gt; geometry with_precision (geometry , int) —&gt; geometry 9.4.131.2 Result: Rounds off the value of left-hand operand to the precision given by the value of right-hand operand Rounds off the ordinates of the left-hand point to the precision given by the value of right-hand operand A geometry corresponding to the rounding of points of the operand considering a given precison. 9.4.131.3 Examples: float var0 &lt;- 12345.78943 with_precision 2; // var0 equals 12345.79 float var1 &lt;- 123 with_precision 2; // var1 equals 123.00 point var2 &lt;- {12345.78943, 12345.78943, 12345.78943} with_precision 2 ; // var2 equals {12345.79, 12345.79, 12345.79} geometry var3 &lt;- self with_precision 2; // var3 equals the geometry resulting from the rounding of points of the geometry with a precision of 0.1. 9.4.131.4 See also: round, 9.4.132 with_values 9.4.132.1 Possible use: predicate with_values map —&gt; predicate with_values (predicate , map) —&gt; predicate 9.4.132.2 Result: change the parameters of the given predicate 9.4.132.3 Examples: predicate with_values [&quot;time&quot;::10] 9.4.133 with_weights 9.4.133.1 Possible use: graph with_weights list —&gt; graph with_weights (graph , list) —&gt; graph graph with_weights map —&gt; graph with_weights (graph , map) —&gt; graph 9.4.133.2 Result: returns the graph (left-hand operand) with weight given in the map (right-hand operand). 9.4.133.3 Comment: this operand re-initializes the path finder 9.4.133.4 Special cases: if the right-hand operand is a list, affects the n elements of the list to the n first edges. Note that the ordering of edges may change overtime, which can create some problems… if the left-hand operand is a map, the map should contains pairs such as: vertex/edge::double graph_from_edges (list(ant) as_map each::one_of (list(ant))) with_weights (list(ant) as_map each::each.food) 9.4.134 without_holes 9.4.134.1 Possible use: without_holes (geometry) —&gt; geometry 9.4.134.2 Result: A geometry corresponding to the operand geometry (geometry, agent, point) without its holes 9.4.134.3 Examples: geometry var0 &lt;- solid(self); // var0 equals the geometry corresponding to the geometry of the agent applying the operator without its holes. 9.4.135 writable 9.4.135.1 Possible use: file writable bool —&gt; file writable (file , bool) —&gt; file 9.4.135.2 Result: Marks the file as read-only or not, depending on the second boolean argument, and returns the first argument 9.4.135.3 Comment: A file is created using its native flags. This operator can change them. Beware that this change is system-wide (and not only restrained to GAMA): changing a file to read-only mode (e.g. “writable(f, false)”) 9.4.135.4 Examples: file var0 &lt;- shape_file(&quot;../images/point_eau.shp&quot;) writable false; // var0 equals returns a file in read-only mode 9.4.135.5 See also: file, 9.4.136 xml_file 9.4.136.1 Possible use: xml_file (string) —&gt; file 9.4.136.2 Result: Constructs a file of type xml. Allowed extensions are limited to xml 9.4.137 xor 9.4.137.1 Possible use: bool xor bool —&gt; bool xor (bool , bool) —&gt; bool 9.4.137.2 Result: a bool value, equal to the logical xor between the left-hand operand and the right-hand operand. False when they are equal 9.4.137.3 Comment: both operands are always casted to bool before applying the operator. Thus, an expression like 1 xor 0 is accepted and returns true. 9.4.137.4 See also: or, and, !, 9.4.138 years_between 9.4.138.1 Possible use: date years_between date —&gt; int years_between (date , date) —&gt; int 9.4.138.2 Result: Provide the exact number of years between two dates. This number can be positive or negative (if the second operand is smaller than the first one) 9.4.138.3 Examples: int var0 &lt;- years_between(date(&#39;2000-01-01&#39;), date(&#39;2010-01-01&#39;)); // var0 equals 10 "]
]
